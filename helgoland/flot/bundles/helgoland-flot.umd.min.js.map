{"version":3,"sources":["null","ng://@helgoland/flot/lib/flot-overview-timeseries-graph/flot-overview-timeseries-graph.component.ts","ng://@helgoland/flot/lib/flot-timeseries-graph/flot-timeseries-graph.component.ts","ng://@helgoland/flot/lib/flot.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","FlotOverviewTimeseriesGraphComponent","timeSrvc","cd","this","EventEmitter","prototype","ngAfterViewInit","rangefactor","calculateOverviewRange","init","detectChanges","ngOnChanges","changes","timeChanged","timespan","onTimespanChanged","emit","createTimespanOfInterval","timeInterval","overviewTimespan","getBufferedTimespan","graphOptions","selection","range","from","to","Component","args","selector","template","styles","Time","ChangeDetectorRef","Input","Output","Mixin","HasLoadableContent","FlotTimeseriesGraphComponent","iterableDiffers","api","datasetIdResolver","labelMapper","translateSrvc","_this","_super","call","grid","autoHighlight","hoverable","series","lines","fill","show","points","radius","shadowSize","mode","xaxis","timezone","yaxes","showReferenceValues","Map","__","constructor","create","tslib_1.__extends","plotarea","flotElem","nativeElement","$","bind","evt","plot","getXAxes","changeTime","min","max","ranges","pos","item","onHighlight","internalId","showTooltip","hideTooltip","createTooltip","plotGraph","onLanguageChanged","langChangeEvent","reloadDataForDatasets","datasetIds","console","log","Date","forEach","id","loadData","datasetMap","get","graphOptionsChanged","options","assign","plotOptions","timeIntervalChanges","setSelectedId","tsData","preparedData","find","e","selected","lineWidth","bars","removeSelectedId","dataset","removeDataset","delete","removePreparedData","addDataset","url","getSingleTimeseries","subscribe","timeseries","addLoadedDataset","error","getDataset","datasetOptionsChanged","has","onResize","Timespan","clientHeight","prepareAxisPos","plotObj","createPlotAnnotation","createYAxis","setSelection","empty","idx","findIndex","entry","splice","axisIdx","internalIdIndex","internalIds","indexOf","tsColors","prepareData","data","Observable","observer","dataIdx","selectedIndex","selectedDatasetIds","datasetOptions","createAxisLabel","label","axe","yaxisEntry","push","color","zeroBasedYAxis","uom","dataEntry","visible","values","fillColor","pointRadius","addReferenceValueData","next","filter","startsWith","refValue","refDataEntry","referenceValues","yaxis","getMappedLabel","parameters","phenomenon","map","plotArea","annotation","getOptions","getPlaceholder","remove","each","getAxes","axis","box","direction","left","top","width","height","n","appendTo","click","event","currentTarget","index","elem","hasClass","selections","getData","onDatasetSelected","addClass","hideLabel","yaxisLabel_1","text","html","css","set","refresh","loadingCounter","isContentLoading","buffer","forceUpdate","Timeseries","getTsData","format","expanded","generalize","generalizeAllways","result","onError","onCompleteLoadingData","Dataset","append","datapoint","toFixed","tickFormatter","tooltip","pageX","getBoundingClientRect","position","pageY","right","window","hide","encapsulation","ViewEncapsulation","None","IterableDiffers","DatasetApiInterface","InternalIdHandler","LabelMapperService","TranslateService","ViewChild","DatasetPresenterComponent","HelgolandFlotModule","NgModule","declarations","imports","HelgolandLabelMapperModule","exports","providers"],"mappings":"+7BAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAS5B,SAAAO,EAqB2BC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HZ,EAAvHa,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOV,OAAOe,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAQ,GAALK,EAAQA,KAASpB,EAAIS,EAAWW,MAAIJ,GAAKH,EAAI,EAAIb,EAAEgB,GAAS,EAAJH,EAAQb,EAAEU,EAAQC,EAAKK,GAAKhB,EAAEU,EAAQC,KAASK,GAChJ,OAAW,EAAJH,GAASG,GAAKd,OAAOmB,eAAeX,EAAQC,EAAKK,GAAIA,EAGhE,SAAAM,EAI2BC,EAAaC,GACpC,GAAuB,iBAAZN,SAAoD,mBAArBA,QAAQO,SAAyB,OAAOP,QAAQO,SAASF,EAAaC,oBCVhH,SAAAE,EACcC,EACAC,GADAC,KAAAF,SAAAA,EACAE,KAAAD,GAAAA,yBAhBqC,IAAIE,EAAAA,4BAGb,IAAIA,EAAAA,mCAGG,IAAIA,EAAAA,wBAMtC,SAORJ,EAAAK,UAAAC,2BACHH,KAAKI,YAAcJ,KAAKI,aAAe,EACvCJ,KAAKK,yBACLL,KAAKM,MAAO,EACZN,KAAKD,GAAGQ,iBAGLV,EAAAK,UAAAM,qBAAYC,GACXA,EAAO,cAAiBT,KAAKM,MAC7BN,KAAKK,0BAINR,EAAAK,UAAAQ,qBAAYC,GACfX,KAAKY,kBAAkBC,KAAKF,IAGxBd,EAAAK,UAAAG,kCACJ,IAAMM,EAAWX,KAAKF,SAASgB,yBAAyBd,KAAKe,cAC7Df,KAAKgB,iBAAmBhB,KAAKF,SAASmB,oBAAoBN,EAAUX,KAAKI,aACzEJ,KAAKkB,aAAaC,UAAUC,MAAQ,CAChCC,KAAMV,EAASU,KACfC,GAAIX,EAASW,yBAnExBC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,qCACVC,SAAU,wRAGVC,OAAQ,CAAC,yEAPuCC,EAAAA,YARhDC,EAAAA,yDAoBCC,EAAAA,8BAGAA,EAAAA,4BAGAA,EAAAA,4BAGAA,EAAAA,2BAGAA,EAAAA,iCAGAC,EAAAA,0BAGAA,EAAAA,iCAGAA,EAAAA,UAvBQlC,EAAoClB,EAAA,CADhDqD,EAAAA,MAAM,CAACC,EAAAA,4CAkCoBL,EAAAA,KACNC,EAAAA,qBAlCThC,oBC8ET,SAAAqC,EACcC,EACAC,EACAC,EACAvC,EACAwC,EACAC,GANd,IAAAC,EAQIC,EAAAC,KAAA1C,KAAMmC,EAAiBC,EAAKC,EAAmBvC,EAAUyC,IAAcvC,YAP7DwC,EAAAL,gBAAAA,EACAK,EAAAJ,IAAAA,EACAI,EAAAH,kBAAAA,EACAG,EAAA1C,SAAAA,EACA0C,EAAAF,YAAAA,EACAE,EAAAD,cAAAA,gBAjD6B,IAAItC,EAAAA,4BAOVzB,sBAEF,CAC/BmE,KAAM,CACFC,eAAe,EACfC,WAAW,GAEfC,OAAQ,CACJC,MAAO,CACHC,MAAM,EACNC,MAAM,GAEVC,OAAQ,CACJF,MAAM,EACNG,OAAQ,EACRF,MAAM,GAEVG,WAAY,GAEhBjC,UAAW,CACPkC,KAAM,MAEVC,MAAO,CACHD,KAAM,OACNE,SAAU,WAEdC,MAAO,GACPC,qBAAqB,gBAGmB,IAAIC,qBAIvB,WFzE7B,SAA0BvF,EAAGC,GAEzB,SAAAuF,IAAgB3D,KAAK4D,YAAczF,EADnCD,EAAcC,EAAGC,GAEjBD,EAAE+B,UAAkB,OAAN9B,EAAaC,OAAOwF,OAAOzF,IAAMuF,EAAGzD,UAAY9B,EAAE8B,UAAW,IAAIyD,GEyBvEG,CAAAA,EAAAA,GA0DD5B,EAAAhC,UAAAC,sCACHH,KAAK+D,SAAW/D,KAAKgE,SAASC,cAE9BC,EAAElE,KAAK+D,UAAUI,KAAK,WAAY,SAACC,EAAUC,GACzC,IAAMf,EAAQe,EAAKC,WAAW,GAC9B9B,EAAK+B,WAAWjB,EAAMkB,IAAKlB,EAAMmB,OAIrCP,EAAElE,KAAK+D,UAAUI,KAAK,aAAc,SAACC,EAAUC,GAC3C,IAAMf,EAAQe,EAAKC,WAAW,GAC9B9B,EAAK+B,WAAWjB,EAAMkB,IAAKlB,EAAMmB,OAGrCP,EAAElE,KAAK+D,UAAUI,KAAK,aAAc,SAACC,EAAUC,GAC3C7B,EAAK+B,WAAWF,EAAKf,MAAMjC,KAAMgD,EAAKf,MAAMhC,MAIhD4C,EAAElE,KAAK+D,UAAUI,KAAK,eAAgB,SAACC,EAAUM,GAC7ClC,EAAK+B,WAAWG,EAAOpB,MAAMjC,KAAMqD,EAAOpB,MAAMhC,MAGpD4C,EAAElE,KAAK+D,UAAUI,KAAK,YAAa,SAACC,EAAUO,EAAUC,GAChDA,GACApC,EAAKqC,YAAYhE,KAAK+D,EAAK9B,OAAOgC,YAClCtC,EAAKuC,YAAYX,EAAKO,EAAKC,KAE3BpC,EAAKqC,YAAYhE,KAAK,IACtB2B,EAAKwC,iBAIbhF,KAAKiF,gBAELjF,KAAKkF,aAGChD,EAAAhC,UAAAiF,kBAAV,SAA4BC,KAErBlD,EAAAhC,UAAAmF,+BAAsBC,cACzBC,QAAQC,IAAI,kBAAoB,IAAIC,MACpCzF,KAAKsF,WAAWI,QAAQ,SAAAC,GAAM,OAAAnD,EAAKoD,SAASpD,EAAKqD,WAAWC,IAAIH,IAAK,MAG/DzD,EAAAhC,UAAA6F,oBAAV,SAA8BC,GAC1B3H,OAAO4H,OAAOjG,KAAKkG,YAAaF,GAChChG,KAAKkG,YAAY1C,MAAQ,GACzBxD,KAAKmG,uBAGCjE,EAAAhC,UAAAkG,cAAV,SAAwBtB,GACpB,IAAMuB,EAASrG,KAAKsG,aAAaC,KAAK,SAACC,GAAM,OAAAA,EAAE1B,aAAeA,IAC9DuB,EAAOI,UAAW,EAClBJ,EAAOnD,OAAOC,QAAU,EACxBkD,EAAOtD,MAAM2D,WAAa,EAC1BL,EAAOM,KAAKD,WAAa,EACzB1G,KAAKkF,aAGChD,EAAAhC,UAAA0G,iBAAV,SAA2B9B,GACvB,IAAMuB,EAASrG,KAAKsG,aAAaC,KAAK,SAACC,GAAM,OAAAA,EAAE1B,aAAeA,IAC9DuB,EAAOI,UAAW,EAClBJ,EAAOnD,OAAOC,QAAU,EACxBkD,EAAOtD,MAAM2D,WAAa,EAC1BL,EAAOM,KAAKD,WAAa,EACzB1G,KAAKkF,aAGChD,EAAAhC,UAAAiG,oBAAV,WAAA,IAAA3D,EAAAxC,KACIA,KAAK6F,WAAWH,QAAQ,SAACmB,GACrBrE,EAAKoD,SAASiB,MAIZ3E,EAAAhC,UAAA4G,cAAV,SAAwBhC,GACpB9E,KAAK6F,WAAWkB,UAAOjC,GACvB9E,KAAKgH,mBAAmBlC,GACxB9E,KAAKkF,aAGChD,EAAAhC,UAAA+G,WAAV,SAAqBnC,EAAoBoC,GAAzC,IAAA1E,EAAAxC,KACIA,KAAKoC,IAAI+E,oBAAoBrC,EAAYoC,GAAKE,UAC1C,SAACC,GAAe,OAAA7E,EAAK8E,iBAAiBD,IACtC,SAACE,GACG/E,EAAKJ,IAAIoF,WAAW1C,EAAYoC,GAAKE,UACjC,SAACP,GAAY,OAAArE,EAAK8E,iBAAiBT,QAMzC3E,EAAAhC,UAAAuH,sBAAV,SAAgC3C,EAAoBkB,GAC5ChG,KAAK6F,WAAW6B,IAAI5C,IACpB9E,KAAK4F,SAAS5F,KAAK6F,WAAWC,IAAIhB,KAIhC5C,EAAAhC,UAAAyH,SAAV,WACI3H,KAAKkF,aAGDhD,EAAAhC,UAAAqE,oBAAWlD,EAAcC,GAC7BtB,KAAKY,kBAAkBC,KAAK,IAAI+G,EAAAA,SAASvG,EAAMC,KAG3CY,EAAAhC,UAAAgF,qBACJ,GAAIlF,KAAKsG,cACFtG,KAAK+D,UACwB,IAA7B/D,KAAKsG,aAAapH,QAClBc,KAAKkG,aACwB,EAA7BlG,KAAK+D,SAAS8D,aAAkB,CACnC7H,KAAK8H,iBACL9H,KAAKkG,YAAY5C,MAAMkB,IAAMxE,KAAKW,SAASU,KAC3CrB,KAAKkG,YAAY5C,MAAMmB,IAAMzE,KAAKW,SAASW,GAC3C,IAAMyG,EAAgB7D,EAAEG,KAAKrE,KAAK+D,SAAU/D,KAAKsG,aAActG,KAAKkG,aACpElG,KAAKgI,qBAAqBhI,KAAK+D,SAAU/D,KAAKkG,aAC9ClG,KAAKiI,YAAYF,GACjB/H,KAAKkI,aAAaH,EAAS/H,KAAKkG,kBAE5BlG,KAAK+D,UACLG,EAAElE,KAAK+D,UAAUoE,SAKrBjG,EAAAhC,UAAA8G,4BAAmBlC,GAEvB,IAAMsD,EAAMpI,KAAKsG,aAAa+B,UAAU,SAACC,GAAU,OAAAA,EAAMxD,aAAeA,IAC7D,GAAPsD,GAAYpI,KAAKsG,aAAaiC,OAAOH,EAAK,GAE9C,IAAMI,EAAUxI,KAAKkG,YAAY1C,MAAM6E,UAAU,SAACC,GAC9C,IAAMG,EAAkBH,EAAMI,YAAYC,QAAQ7D,GAClD,IAAuB,EAAnB2D,EAAsB,CACtB,GAAiC,IAA7BH,EAAMI,YAAYxJ,OAClB,OAAO,EAEPoJ,EAAMI,YAAYH,OAAOE,EAAiB,GAC1CH,EAAMM,SAASL,OAAOE,EAAiB,GAG/C,OAAO,KAEI,EAAXD,GACAxI,KAAKkG,YAAY1C,MAAM+E,OAAOC,EAAS,IAIvCtG,EAAAhC,UAAA2I,qBAAYhC,EAAmBiC,cACnC,OAAOC,EAAAA,WAAWlF,OAAO,SAACmF,GACtB,IAAMC,EAAUzG,EAAK8D,aAAa+B,UAAU,SAAC7B,GAAM,OAAAA,EAAE1B,aAAe+B,EAAQ/B,aACtEoE,EAAgB1G,EAAK2G,mBAAmBR,QAAQ9B,EAAQ/B,YACxDnD,EAASa,EAAK4G,eAAetD,IAAIe,EAAQ/B,YAC/CtC,EAAK6G,gBAAgBxC,GAASO,UAAU,SAACkC,GACrC,IACMC,EAAM/G,EAAK0D,YAAY1C,MAAM+C,KAAK,SAACiD,EAAYpB,GAEjD,OADSA,EAAM,EACRoB,EAAWF,QAAUA,IAE5BC,GACIA,EAAIb,YAAYC,QAAQ9B,EAAQ/B,YAAc,GAC9CyE,EAAIb,YAAYe,KAAK5C,EAAQ/B,YAC7ByE,EAAIX,SAASa,KAAK9H,EAAO+H,QAEzBH,EAAIX,SAASW,EAAIb,YAAYC,QAAQ9B,EAAQ/B,aAAenD,EAAO+H,MAEvEH,EAAI/E,IAAM7C,EAAOgI,eAAiB,EAAI,OAEtCnH,EAAK0D,YAAY1C,MAAMiG,KAAK,CACxBG,IAAK/C,EAAQ+C,IACbN,MAAKA,EACLV,SAAU,CAACjH,EAAO+H,OAClBhB,YAAa,CAAC7B,EAAQ/B,YACtBN,IAAK7C,EAAOgI,eAAiB,EAAI,OAE5BnH,EAAK0D,YAAY1C,MAAMtE,QAEpC,IAAM2K,EAAwB,CAC1B/E,WAAY+B,EAAQ/B,WACpB4E,MAAO/H,EAAO+H,MACdZ,KAAMnH,EAAOmI,QAAUhB,EAAKiB,OAAS,GACrC7G,OAAQ,CACJ8G,UAAWrI,EAAO+H,MAClBvG,OAAQxB,EAAOsI,YACfhH,KAA2B,EAArBtB,EAAOsI,aAEjBlH,MAAO,CACH2D,UAAW/E,EAAO+E,UAClBzD,KAAyB,EAAnBtB,EAAO+E,WAEjBC,KAAM,CACFD,UAAW,IAIE,GAAjBwC,IACAW,EAAU3G,OAAOC,QAAU,EAC3B0G,EAAU9G,MAAM2D,WAAa,EAC7BmD,EAAUlD,KAAKD,WAAa,GAEjB,GAAXuC,EACAzG,EAAK8D,aAAa2C,GAAWY,EAE7BrH,EAAK8D,aAAamD,KAAKI,GAE3BrH,EAAK0H,sBAAsBrD,EAAQ/B,WAAYnD,EAAQmH,GACvDE,EAASmB,MAAK,QAKlBjI,EAAAhC,UAAAgK,+BAAsBpF,EAAoBnD,EAAwBmH,cACtE9I,KAAKsG,aAAetG,KAAKsG,aAAa8D,OAAO,SAAC9B,GAC1C,OAAQA,EAAMxD,WAAWuF,WAAW,MAAQvF,KAE5C9E,KAAKkG,YAAYzC,qBACjB9B,EAAO8B,oBAAoBiC,QAAQ,SAAC4E,GAChC,IAAMC,EAAe,CACjBzF,WAAY,MAAQA,EAAawF,EAAS3E,GAC1C+D,MAAOY,EAASZ,MAChBZ,KAAMA,EAAK0B,gBAAgBF,EAAS3E,IACpCzC,OAAQ,CACJ8G,UAAWM,EAASZ,OAExB3G,MAAO,CACH2D,UAAW,IAGnBlE,EAAK8D,aAAamD,KAAKc,MAK3BrI,EAAAhC,UAAA4H,qCAEJ9H,KAAKkG,YAAY1C,MAAQxD,KAAKkG,YAAY1C,MAAM4G,OAAO,SAAC9B,GAAU,OAA6B,IAA7BA,EAAMI,YAAYxJ,SACpFc,KAAKkG,YAAY1C,MAAMkC,QAAQ,SAACpC,EAAO8E,GACnC9E,EAAMoF,YAAYhD,QAAQ,SAACC,GACVnD,EAAK8D,aAAaC,KAAK,SAACsD,GAAc,OAAAA,EAAU/E,aAAea,IACvE8E,MAAQrC,EAAM,OAKvBlG,EAAAhC,UAAAmJ,yBAAgBxC,GACpB,OAAO7G,KAAKsC,YAAYoI,eAAe7D,EAAQ8D,WAAWC,WAAWtB,OAChEuB,IAAI,SAACvB,GAAU,OAAAA,EAAQ,KAAOzC,EAAQ+C,IAAM,OAG7C1H,EAAAhC,UAAAgI,sBAAa7D,EAAY2B,GACzB3B,GAAQ2B,EAAQ7E,UAAUC,OAC1BiD,EAAK6D,aAAa,CACd5E,MAAO,CACHjC,KAAM2E,EAAQ7E,UAAUC,MAAMC,KAC9BC,GAAI0E,EAAQ7E,UAAUC,MAAME,MAEjC,IAIHY,EAAAhC,UAAA8H,8BAAqB8C,EAAe9E,GACpCA,EAAQ+E,YAKR7I,EAAAhC,UAAA+H,qBAAY5D,cACZA,EAAK2G,aAAaP,MAAMxH,OAExBiB,EAAEG,EAAK4G,kBAAkB1E,KAAK,eAAe2E,SAG7ChH,EAAEiH,KAAK9G,EAAK+G,UAAW,SAAC7L,EAAW8L,GAC/B,GAAKA,EAAKpI,KAAV,CACA,IAAMqI,EAAMD,EAAKC,IACjB,GAAuB,MAAnBD,EAAKE,YACLrH,EAAE,+DACIoH,EAAIE,KAAO,WAAaF,EAAIG,IAAM,aAClCH,EAAII,MAAQ,cAAgBJ,EAAIK,OAAS,cAC1C7C,KAAK,SAAUuC,EAAKO,GACpBC,SAASxH,EAAK4G,kBACnB/G,EAAE,0DACIoH,EAAIE,KAAO,WAAaF,EAAIG,IAAM,aAClCH,EAAII,MAAQ,cAAgBJ,EAAIK,OAAS,cAC1C7C,KAAK,SAAUuC,EAAKO,GACpBC,SAASxH,EAAK4G,kBACda,MAAM,SAACC,GACJ,IAAMlN,EAASqF,EAAE6H,EAAMC,eACnBvF,GAAW,EACfvC,EAAEiH,KAAKjH,EAAE,eAAgB,SAAC+H,EAAeC,GAErC,GADAA,EAAOhI,EAAEgI,GACLrN,EAAOiK,KAAK,YAAcoD,EAAKpD,KAAK,UAEpC,OADArC,EAAWyF,EAAKC,SAAS,aAClB,IAGf,IAAMC,EAAuB,GAC7BlI,EAAEiH,KAAK9G,EAAKgI,UAAW,SAACJ,EAAeC,GAC/BrN,EAAOiK,KAAK,YAAcoD,EAAKzB,MAAMmB,IACrCM,EAAKzF,UAAYA,EACbyF,EAAKzF,UACL2F,EAAW3C,KAAKyC,EAAKpH,eAIjCtC,EAAK8J,kBAAkBzL,KAAKuL,GACvB3F,GACD5H,EAAO0N,SAAS,YAEpB/J,EAAK0C,eAERmG,EAAKrF,QAAQwG,WAAW,CACzB,IAAMC,EAAavI,EAAE,gDACfoH,EAAIE,KAAO,cAAckB,KAAKrB,EAAKrF,QAAQsD,OAC5CuC,SAASxH,EAAK4G,kBACdnC,KAAK,SAAUuC,EAAKO,GACrBP,EAAKrF,QAAQ4C,UACb1E,EAAEiH,KAAKE,EAAKrF,QAAQ4C,SAAU,SAACR,EAAasB,GACxCxF,EAAE,UAAUyI,KAAK,kBAAkBC,IAAI,QAASlD,GAC3C6C,SAAS,oBAAoBV,SAASY,KAGnDA,EAAWG,IAAI,eAAqBH,EAAWd,SAAWc,EAAWf,SAAW,EAAjD,OAM3CrH,EAAKgI,UAAU3G,QAAQ,SAACwG,GAChBA,EAAKzF,WACLvC,EAAE,UAAYgI,EAAKzB,MAAMmB,EAAI,SAASW,SAAS,YAC/CrI,EAAEiH,KAAKjH,EAAE,eAAgB,SAAC3E,EAAW+I,GACjC,GAAIpE,EAAEoE,GAAOQ,KAAK,YAAcoD,EAAKzB,MAAMmB,IAClC1H,EAAEoE,GAAO6D,SAAS,YAEnB,OADAjI,EAAEoE,GAAOiE,SAAS,aACX,IAInBrI,EAAEiH,KAAKjH,EAAE,oBAAqB,SAAC3E,EAAW+I,GACtC,GAAIpE,EAAEoE,GAAOQ,KAAK,YAAcoD,EAAKzB,MAAMmB,IAClC1H,EAAEoE,GAAO6D,SAAS,YAEnB,OADAjI,EAAEoE,GAAOiE,SAAS,aACX,IAInBrI,EAAEiH,KAAKjH,EAAE,yBAA0B,SAAC3E,EAAW+I,GAC3C,GAAIpE,EAAEoE,GAAOQ,KAAK,YAAcoD,EAAKzB,MAAMmB,IAClC1H,EAAEoE,GAAO6D,SAAS,YAEnB,OADAjI,EAAEoE,GAAOiE,SAAS,aACX,SAS3BrK,EAAAhC,UAAAoH,0BAAiBT,GACrB7G,KAAK6F,WAAWgH,IAAIhG,EAAQ/B,WAAY+B,GACxC7G,KAAK4F,SAASiB,IAGV3E,EAAAhC,UAAA0F,kBAASiB,EAAmBiG,cAC1B1D,EAAiBpJ,KAAKoJ,eAAetD,IAAIe,EAAQ/B,YACvD,GAAIsE,EACA,GAAIpJ,KAAKW,UAAYX,KAAKkG,aAAekD,EAAeU,QAAS,CACjC,IAAxB9J,KAAK+M,gBAAwB/M,KAAKgN,kBAAiB,GACvDhN,KAAK+M,iBACL,IAAME,EAASjN,KAAKF,SAASmB,oBAAoBjB,KAAKW,SAAU,IAC1DqF,EAA8B,GAChC8G,IAAW9G,EAAQkH,YAAcJ,GACjCjG,aAAmBsG,EAAAA,YACnBnN,KAAKoC,IAAIgL,UAA4BvG,EAAQlB,GAAIkB,EAAQK,IAAK+F,EAC1D,CACII,OAAQ,OACRC,UAAmD,IAAzCtN,KAAKkG,YAAYzC,oBAC3B8J,WAAYvN,KAAKkG,YAAYsH,mBAAqBpE,EAAemE,YAClEvH,GACLoB,UACE,SAACqG,GAAW,OAAAjL,EAAKqG,YAAYhC,EAAS4G,GAAQrG,UAAU,WACpD5E,EAAK0C,eAET,SAACqC,GAAU,OAAA/E,EAAKkL,QAAQnG,IACxB,WAAM,OAAA/E,EAAKmL,sBAAsB9G,KAGrCA,aAAmB+G,EAAAA,SACnB5N,KAAKoC,IAAIiK,QAA0BxF,EAAQlB,GAAIkB,EAAQK,IAAK+F,EACxD,CACII,OAAQ,OACRC,UAAmD,IAAzCtN,KAAKkG,YAAYzC,oBAC3B8J,WAAYvN,KAAKkG,YAAYsH,mBAAqBpE,EAAemE,YAClEvH,GACLoB,UACE,SAACqG,GAAW,OAAAjL,EAAKqG,YAAYhC,EAAS4G,GAAQrG,UAAU,WAAM,OAAA5E,EAAK0C,eACnE,SAACqC,GAAU,OAAA/E,EAAKkL,QAAQnG,IACxB,WAAM,OAAA/E,EAAKmL,sBAAsB9G,UAGjCuC,EAAeU,UACvB9J,KAAKgH,mBAAmBH,EAAQ/B,YAChC9E,KAAKkF,cAKThD,EAAAhC,UAAAwN,iBAAQnG,GACZhC,QAAQgC,MAAMA,IAGVrF,EAAAhC,UAAAyN,+BAAsB9G,GAC1B7G,KAAK+M,iBACuB,IAAxB/M,KAAK+M,gBAAwB/M,KAAKgN,kBAAiB,IAGnD9K,EAAAhC,UAAA+E,yBACyB,IAAzBf,EAAE,YAAYhF,QACdgF,EAAE,4BAA4B2H,SAAS,SAIvC3J,EAAAhC,UAAA6E,qBAAYgH,EAAYpH,EAAUC,GACtCV,EAAE,YAAYiE,QACdjE,EAAE,YAAY2J,OAAO,QAAUjJ,EAAKkJ,UAAU,GAAGC,QAAQ,GAAK,IAAMnJ,EAAK9B,OAAO2H,MAAMzE,QAAQ4D,IAAM,UACpG1F,EAAE,YAAY2J,OAAO,QAAUjJ,EAAK9B,OAAOQ,MAAM0K,cAAcpJ,EAAKkJ,UAAU,GAAIlJ,EAAK9B,OAAOQ,OAAS,UACvG,IAAM2K,EAAU/J,EAAE,YAAYjB,OACX8I,EAAMlN,OAAkB,YAAI,GAC9B+F,EAAKsJ,MAAQnC,EAAMlN,OAAOsP,wBAAwB3C,KAC/DyC,EAAQrB,IAAI,CACRwB,SAAU,WACV3C,IAAK7G,EAAKyJ,MAAQ,EAClB7C,KAAM5G,EAAKsJ,MAAQ,EACnBI,MAAO,SAGXL,EAAQrB,IAAI,CACRwB,SAAU,WACV3C,IAAK7G,EAAKyJ,MAAQ,EAClBC,MAAQpK,EAAEqK,QAAQ7C,QAAU9G,EAAKsJ,MACjC1C,KAAM,UAKVtJ,EAAAhC,UAAA8E,uBACJd,EAAE,YAAYsK,4BAngBrBjN,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,4BACVC,SAAU,mCAEVC,OAAQ,CAAC,sjBACT8M,cAAeC,EAAAA,kBAAkBC,kDApCjCC,EAAAA,uBAQAC,EAAAA,2BAMAC,EAAAA,yBAEAlN,EAAAA,YAIKmN,EAAAA,0BACiBC,EAAAA,yDAsBrBjN,EAAAA,yBAGAkN,EAAAA,UAASzN,KAAA,CAAC,WAPFU,EAA4BvD,EAAA,CADxCqD,EAAAA,MAAM,CAACC,EAAAA,4CAkD2B2M,EAAAA,gBACZC,EAAAA,oBACcC,EAAAA,kBACTlN,EAAAA,KACGmN,EAAAA,mBACEC,EAAAA,oBAtDpB9M,IACDgN,EAAAA,2BCnDZC,EAAA,oDAQCC,EAAAA,SAAQ5N,KAAA,CAAC,CACR6N,aAAc,CACZnN,EACArC,GAEFyP,QAAS,CACPC,EAAAA,4BAEFC,QAAS,CACPtN,EACArC,GAEF4P,UAAW,SApBb","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { DatasetOptions, HasLoadableContent, Mixin, Time, TimeInterval, Timespan } from '@helgoland/core';\n\n@Component({\n    selector: 'n52-flot-overview-timeseries-graph',\n    template: `<n52-flot-timeseries-graph [datasetIds]=\"datasetIds\" [timeInterval]=\"overviewTimespan\" [datasetOptions]=\"datasetOptions\"\n  [graphOptions]=\"graphOptions\" (onTimespanChanged)=\"timeChanged($event)\" (onContentLoading)=\"onContentLoading.emit($event)\"></n52-flot-timeseries-graph>\n`,\n    styles: [`:host .flot{height:100%}`]\n})\n@Mixin([HasLoadableContent])\nexport class FlotOverviewTimeseriesGraphComponent implements OnChanges, AfterViewInit, HasLoadableContent {\n\n    @Input()\n    public datasetIds: string[];\n\n    @Input()\n    public datasetOptions: Map<string, DatasetOptions>;\n\n    @Input()\n    public graphOptions: any;\n\n    @Input()\n    public timeInterval: TimeInterval;\n\n    @Input()\n    public rangefactor: number;\n\n    @Output()\n    public onTimespanChanged: EventEmitter<Timespan> = new EventEmitter();\n\n    @Output()\n    public onLoading: EventEmitter<boolean> = new EventEmitter();\n\n    @Output()\n    public onContentLoading: EventEmitter<boolean> = new EventEmitter();\n\n    public isContentLoading: (loading: boolean) => void;\n\n    public overviewTimespan: Timespan;\n\n    private init = false;\n\n    constructor(\n        protected timeSrvc: Time,\n        protected cd: ChangeDetectorRef\n    ) { }\n\n    public ngAfterViewInit(): void {\n        this.rangefactor = this.rangefactor || 1;\n        this.calculateOverviewRange();\n        this.init = true;\n        this.cd.detectChanges();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.timeInterval && this.init) {\n            this.calculateOverviewRange();\n        }\n    }\n\n    public timeChanged(timespan: Timespan) {\n        this.onTimespanChanged.emit(timespan);\n    }\n\n    private calculateOverviewRange() {\n        const timespan = this.timeSrvc.createTimespanOfInterval(this.timeInterval);\n        this.overviewTimespan = this.timeSrvc.getBufferedTimespan(timespan, this.rangefactor);\n        this.graphOptions.selection.range = {\n            from: timespan.from,\n            to: timespan.to\n        };\n    }\n}\n","import 'Flot/jquery.flot.js';\nimport 'Flot/jquery.flot.time.js';\nimport '@helgoland/flot/jquery.flot.navigate.js';\nimport '@helgoland/flot/jquery.flot.selection.js';\nimport '@helgoland/flot/jquery.flot.touch.js';\n\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    IterableDiffers,\n    Output,\n    ViewChild,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    Data,\n    Dataset,\n    DatasetApiInterface,\n    DatasetOptions,\n    DatasetPresenterComponent,\n    HasLoadableContent,\n    HttpRequestOptions,\n    IDataset,\n    InternalIdHandler,\n    Mixin,\n    Time,\n    Timeseries,\n    Timespan,\n} from '@helgoland/core';\nimport { LabelMapperService } from '@helgoland/depiction';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { DataSeries } from '../model/dataSeries.js';\nimport { Plot } from '../model/plot.js';\nimport { PlotOptions } from '../model/plotOptions.js';\n\ndeclare var $: any;\n\n@Component({\n    selector: 'n52-flot-timeseries-graph',\n    template: `<div class=\"flot\" #flot></div>\n`,\n    styles: [`n52-flot-timeseries-graph .flot{height:100%}n52-flot-timeseries-graph .axisTarget{cursor:pointer}n52-flot-timeseries-graph .axisLabel{position:absolute;font-size:90%;text-align:center}n52-flot-timeseries-graph .yaxisLabel{top:50%;transform:rotate(-90deg);-o-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);-webkit-transform:rotate(-90deg);z-index:-9999;padding-bottom:8px}n52-flot-timeseries-graph .labelColorMarker{font-size:150%}n52-flot-timeseries-graph .graph-annotation{position:absolute;bottom:40px;right:15px;color:red}`],\n    encapsulation: ViewEncapsulation.None\n})\n@Mixin([HasLoadableContent])\nexport class FlotTimeseriesGraphComponent\n    extends DatasetPresenterComponent<DatasetOptions, PlotOptions>\n    implements AfterViewInit {\n\n    @Output()\n    public onHighlight: EventEmitter<string> = new EventEmitter();\n\n    @ViewChild('flot')\n    public flotElem: ElementRef;\n\n    private plotarea: any;\n\n    private preparedData: DataSeries[] = Array();\n\n    private plotOptions: PlotOptions = {\n        grid: {\n            autoHighlight: true,\n            hoverable: true\n        },\n        series: {\n            lines: {\n                fill: false,\n                show: true\n            },\n            points: {\n                fill: true,\n                radius: 2,\n                show: false\n            },\n            shadowSize: 1\n        },\n        selection: {\n            mode: null\n        },\n        xaxis: {\n            mode: 'time',\n            timezone: 'browser',\n        },\n        yaxes: [],\n        showReferenceValues: false\n    };\n\n    private datasetMap: Map<string, IDataset> = new Map();\n\n    private lastHightlight: string;\n\n    private loadingCounter = 0;\n\n    constructor(\n        protected iterableDiffers: IterableDiffers,\n        protected api: DatasetApiInterface,\n        protected datasetIdResolver: InternalIdHandler,\n        protected timeSrvc: Time,\n        protected labelMapper: LabelMapperService,\n        protected translateSrvc: TranslateService\n    ) {\n        super(iterableDiffers, api, datasetIdResolver, timeSrvc, translateSrvc);\n    }\n\n    public ngAfterViewInit() {\n        this.plotarea = this.flotElem.nativeElement;\n\n        $(this.plotarea).bind('plotzoom', (evt: any, plot: any) => {\n            const xaxis = plot.getXAxes()[0];\n            this.changeTime(xaxis.min, xaxis.max);\n        });\n\n        // plot pan ended event\n        $(this.plotarea).bind('plotpanEnd', (evt: any, plot: any) => {\n            const xaxis = plot.getXAxes()[0];\n            this.changeTime(xaxis.min, xaxis.max);\n        });\n\n        $(this.plotarea).bind('touchended', (evt: any, plot: any) => {\n            this.changeTime(plot.xaxis.from, plot.xaxis.to);\n        });\n\n        // plot selected event\n        $(this.plotarea).bind('plotselected', (evt: any, ranges: any) => {\n            this.changeTime(ranges.xaxis.from, ranges.xaxis.to);\n        });\n\n        $(this.plotarea).bind('plothover', (evt: any, pos: any, item: any) => {\n            if (item) {\n                this.onHighlight.emit(item.series.internalId);\n                this.showTooltip(evt, pos, item);\n            } else {\n                this.onHighlight.emit('');\n                this.hideTooltip();\n            }\n        });\n\n        this.createTooltip();\n\n        this.plotGraph();\n    }\n\n    protected onLanguageChanged(langChangeEvent: LangChangeEvent): void { }\n\n    public reloadDataForDatasets(datasetIds: string[]): void {\n        console.log('reload data at ' + new Date());\n        this.datasetIds.forEach(id => this.loadData(this.datasetMap.get(id), true));\n    }\n\n    protected graphOptionsChanged(options: PlotOptions) {\n        Object.assign(this.plotOptions, options);\n        this.plotOptions.yaxes = [];\n        this.timeIntervalChanges();\n    }\n\n    protected setSelectedId(internalId: string) {\n        const tsData = this.preparedData.find((e) => e.internalId === internalId);\n        tsData.selected = true;\n        tsData.points.radius *= 3;\n        tsData.lines.lineWidth *= 3;\n        tsData.bars.lineWidth *= 3;\n        this.plotGraph();\n    }\n\n    protected removeSelectedId(internalId: string) {\n        const tsData = this.preparedData.find((e) => e.internalId === internalId);\n        tsData.selected = false;\n        tsData.points.radius /= 3;\n        tsData.lines.lineWidth /= 3;\n        tsData.bars.lineWidth /= 3;\n        this.plotGraph();\n    }\n\n    protected timeIntervalChanges() {\n        this.datasetMap.forEach((dataset) => {\n            this.loadData(dataset);\n        });\n    }\n\n    protected removeDataset(internalId: string) {\n        this.datasetMap.delete(internalId);\n        this.removePreparedData(internalId);\n        this.plotGraph();\n    }\n\n    protected addDataset(internalId: string, url: string): void {\n        this.api.getSingleTimeseries(internalId, url).subscribe(\n            (timeseries) => this.addLoadedDataset(timeseries),\n            (error) => {\n                this.api.getDataset(internalId, url).subscribe(\n                    (dataset) => this.addLoadedDataset(dataset)\n                );\n            }\n        );\n    }\n\n    protected datasetOptionsChanged(internalId: string, options: DatasetOptions): void {\n        if (this.datasetMap.has(internalId)) {\n            this.loadData(this.datasetMap.get(internalId));\n        }\n    }\n\n    protected onResize(): void {\n        this.plotGraph();\n    }\n\n    private changeTime(from: number, to: number) {\n        this.onTimespanChanged.emit(new Timespan(from, to));\n    }\n\n    private plotGraph() {\n        if (this.preparedData\n            && this.plotarea\n            && this.preparedData.length !== 0\n            && this.plotOptions\n            && this.plotarea.clientHeight > 0) {\n            this.prepareAxisPos();\n            this.plotOptions.xaxis.min = this.timespan.from;\n            this.plotOptions.xaxis.max = this.timespan.to;\n            const plotObj: Plot = $.plot(this.plotarea, this.preparedData, this.plotOptions);\n            this.createPlotAnnotation(this.plotarea, this.plotOptions);\n            this.createYAxis(plotObj);\n            this.setSelection(plotObj, this.plotOptions);\n        } else {\n            if (this.plotarea) {\n                $(this.plotarea).empty();\n            }\n        }\n    }\n\n    private removePreparedData(internalId: string) {\n        // remove from preparedData Array\n        const idx = this.preparedData.findIndex((entry) => entry.internalId === internalId);\n        if (idx >= 0) { this.preparedData.splice(idx, 1); }\n        // remove from axis\n        const axisIdx = this.plotOptions.yaxes.findIndex((entry) => {\n            const internalIdIndex = entry.internalIds.indexOf(internalId);\n            if (internalIdIndex > -1) {\n                if (entry.internalIds.length === 1) {\n                    return true;\n                } else {\n                    entry.internalIds.splice(internalIdIndex, 1);\n                    entry.tsColors.splice(internalIdIndex, 1);\n                }\n            }\n            return false;\n        });\n        if (axisIdx > -1) {\n            this.plotOptions.yaxes.splice(axisIdx, 1);\n        }\n    }\n\n    private prepareData(dataset: IDataset, data: Data<[number, number]>): Observable<boolean> {\n        return Observable.create((observer: Observer<boolean>) => {\n            const dataIdx = this.preparedData.findIndex((e) => e.internalId === dataset.internalId);\n            const selectedIndex = this.selectedDatasetIds.indexOf(dataset.internalId);\n            const styles = this.datasetOptions.get(dataset.internalId);\n            this.createAxisLabel(dataset).subscribe((label) => {\n                let axePos;\n                const axe = this.plotOptions.yaxes.find((yaxisEntry, idx) => {\n                    axePos = idx + 1;\n                    return yaxisEntry.label === label;\n                });\n                if (axe) {\n                    if (axe.internalIds.indexOf(dataset.internalId) < 0) {\n                        axe.internalIds.push(dataset.internalId);\n                        axe.tsColors.push(styles.color);\n                    } else {\n                        axe.tsColors[axe.internalIds.indexOf(dataset.internalId)] = styles.color;\n                    }\n                    axe.min = styles.zeroBasedYAxis ? 0 : null;\n                } else {\n                    this.plotOptions.yaxes.push({\n                        uom: dataset.uom,\n                        label,\n                        tsColors: [styles.color],\n                        internalIds: [dataset.internalId],\n                        min: styles.zeroBasedYAxis ? 0 : null\n                    });\n                    axePos = this.plotOptions.yaxes.length;\n                }\n                const dataEntry: DataSeries = {\n                    internalId: dataset.internalId,\n                    color: styles.color,\n                    data: styles.visible ? data.values : [],\n                    points: {\n                        fillColor: styles.color,\n                        radius: styles.pointRadius,\n                        show: styles.pointRadius > 0 ? true : false\n                    },\n                    lines: {\n                        lineWidth: styles.lineWidth,\n                        show: styles.lineWidth > 0 ? true : false\n                    },\n                    bars: {\n                        lineWidth: 1\n                    }\n                };\n\n                if (selectedIndex >= 0) {\n                    dataEntry.points.radius *= 3;\n                    dataEntry.lines.lineWidth *= 3;\n                    dataEntry.bars.lineWidth *= 3;\n                }\n                if (dataIdx >= 0) {\n                    this.preparedData[dataIdx] = dataEntry;\n                } else {\n                    this.preparedData.push(dataEntry);\n                }\n                this.addReferenceValueData(dataset.internalId, styles, data);\n                observer.next(true);\n            });\n        });\n    }\n\n    private addReferenceValueData(internalId: string, styles: DatasetOptions, data: Data<[number, number]>) {\n        this.preparedData = this.preparedData.filter((entry) => {\n            return !entry.internalId.startsWith('ref' + internalId);\n        });\n        if (this.plotOptions.showReferenceValues) {\n            styles.showReferenceValues.forEach((refValue) => {\n                const refDataEntry = {\n                    internalId: 'ref' + internalId + refValue.id,\n                    color: refValue.color,\n                    data: data.referenceValues[refValue.id],\n                    points: {\n                        fillColor: refValue.color\n                    },\n                    lines: {\n                        lineWidth: 1\n                    },\n                };\n                this.preparedData.push(refDataEntry);\n            });\n        }\n    }\n\n    private prepareAxisPos() {\n        // remove unused axes\n        this.plotOptions.yaxes = this.plotOptions.yaxes.filter((entry) => entry.internalIds.length !== 0);\n        this.plotOptions.yaxes.forEach((xaxis, idx) => {\n            xaxis.internalIds.forEach((id) => {\n                const temp = this.preparedData.find((dataEntry) => dataEntry.internalId === id);\n                temp.yaxis = idx + 1;\n            });\n        });\n    }\n\n    private createAxisLabel(dataset: IDataset): Observable<string> {\n        return this.labelMapper.getMappedLabel(dataset.parameters.phenomenon.label)\n            .map((label) => label + ' [' + dataset.uom + ']');\n    }\n\n    private setSelection(plot: Plot, options: PlotOptions) {\n        if (plot && options.selection.range) {\n            plot.setSelection({\n                xaxis: {\n                    from: options.selection.range.from,\n                    to: options.selection.range.to\n                }\n            }, true);\n        }\n    }\n\n    private createPlotAnnotation(plotArea: any, options: PlotOptions) {\n        if (options.annotation) {\n            // plotArea.append('<div class=\"graph-annotation\">Daten ohne GewÃ¤hr</div>');\n        }\n    }\n\n    private createYAxis(plot: Plot) {\n        if (plot.getOptions().yaxis.show) {\n            // remove old labels\n            $(plot.getPlaceholder()).find('.yaxisLabel').remove();\n\n            // createYAxis\n            $.each(plot.getAxes(), (i: number, axis: any) => {\n                if (!axis.show) { return; }\n                const box = axis.box;\n                if (axis.direction === 'y') {\n                    $('<div class=\"axisTargetStyle\" style=\"position:absolute; left:'\n                        + box.left + 'px; top:' + box.top + 'px; width:'\n                        + box.width + 'px; height:' + box.height + 'px\"></div>')\n                        .data('axis.n', axis.n)\n                        .appendTo(plot.getPlaceholder());\n                    $('<div class=\"axisTarget\" style=\"position:absolute; left:'\n                        + box.left + 'px; top:' + box.top + 'px; width:'\n                        + box.width + 'px; height:' + box.height + 'px\"></div>')\n                        .data('axis.n', axis.n)\n                        .appendTo(plot.getPlaceholder())\n                        .click((event: any) => {\n                            const target = $(event.currentTarget);\n                            let selected = false;\n                            $.each($('.axisTarget'), (index: number, elem: any) => {\n                                elem = $(elem);\n                                if (target.data('axis.n') === elem.data('axis.n')) {\n                                    selected = elem.hasClass('selected');\n                                    return false; // break loop\n                                }\n                            });\n                            const selections: string[] = [];\n                            $.each(plot.getData(), (index: number, elem: any) => {\n                                if (target.data('axis.n') === elem.yaxis.n) {\n                                    elem.selected = !selected;\n                                    if (elem.selected) {\n                                        selections.push(elem.internalId);\n                                    }\n                                }\n                            });\n                            this.onDatasetSelected.emit(selections);\n                            if (!selected) {\n                                target.addClass('selected');\n                            }\n                            this.plotGraph();\n                        });\n                    if (!axis.options.hideLabel) {\n                        const yaxisLabel = $('<div class=\"axisLabel yaxisLabel\" style=left:'\n                            + box.left + 'px;></div>').text(axis.options.label)\n                            .appendTo(plot.getPlaceholder())\n                            .data('axis.n', axis.n);\n                        if (axis.options.tsColors) {\n                            $.each(axis.options.tsColors, (idx: number, color: string) => {\n                                $('<span>').html('&nbsp;&#x25CF;').css('color', color)\n                                    .addClass('labelColorMarker').appendTo(yaxisLabel);\n                            });\n                        }\n                        yaxisLabel.css('margin-left', -4 + (yaxisLabel.height() - yaxisLabel.width()) / 2);\n                    }\n                }\n            });\n\n            // set selection to axis\n            plot.getData().forEach((elem: any) => {\n                if (elem.selected) {\n                    $('.flot-y' + elem.yaxis.n + '-axis').addClass('selected');\n                    $.each($('.axisTarget'), (i: number, entry: Element) => {\n                        if ($(entry).data('axis.n') === elem.yaxis.n) {\n                            if (!$(entry).hasClass('selected')) {\n                                $(entry).addClass('selected');\n                                return false;\n                            }\n                        }\n                    });\n                    $.each($('.axisTargetStyle'), (i: number, entry: Element) => {\n                        if ($(entry).data('axis.n') === elem.yaxis.n) {\n                            if (!$(entry).hasClass('selected')) {\n                                $(entry).addClass('selected');\n                                return false;\n                            }\n                        }\n                    });\n                    $.each($('.axisLabel.yaxisLabel'), (i: number, entry: Element) => {\n                        if ($(entry).data('axis.n') === elem.yaxis.n) {\n                            if (!$(entry).hasClass('selected')) {\n                                $(entry).addClass('selected');\n                                return false;\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    private addLoadedDataset(dataset: IDataset) {\n        this.datasetMap.set(dataset.internalId, dataset);\n        this.loadData(dataset);\n    }\n\n    private loadData(dataset: IDataset, refresh?: boolean) {\n        const datasetOptions = this.datasetOptions.get(dataset.internalId);\n        if (datasetOptions) {\n            if (this.timespan && this.plotOptions && datasetOptions.visible) {\n                if (this.loadingCounter === 0) { this.isContentLoading(true); }\n                this.loadingCounter++;\n                const buffer = this.timeSrvc.getBufferedTimespan(this.timespan, 0.2);\n                const options: HttpRequestOptions = {};\n                if (refresh) { options.forceUpdate = refresh; }\n                if (dataset instanceof Timeseries) {\n                    this.api.getTsData<[number, number]>(dataset.id, dataset.url, buffer,\n                        {\n                            format: 'flot',\n                            expanded: this.plotOptions.showReferenceValues === true,\n                            generalize: this.plotOptions.generalizeAllways || datasetOptions.generalize\n                        }, options\n                    ).subscribe(\n                        (result) => this.prepareData(dataset, result).subscribe(() => {\n                            this.plotGraph();\n                        }),\n                        (error) => this.onError(error),\n                        () => this.onCompleteLoadingData(dataset)\n                    );\n                }\n                if (dataset instanceof Dataset) {\n                    this.api.getData<[number, number]>(dataset.id, dataset.url, buffer,\n                        {\n                            format: 'flot',\n                            expanded: this.plotOptions.showReferenceValues === true,\n                            generalize: this.plotOptions.generalizeAllways || datasetOptions.generalize\n                        }, options\n                    ).subscribe(\n                        (result) => this.prepareData(dataset, result).subscribe(() => this.plotGraph()),\n                        (error) => this.onError(error),\n                        () => this.onCompleteLoadingData(dataset)\n                    );\n                }\n            } else if (!datasetOptions.visible) {\n                this.removePreparedData(dataset.internalId);\n                this.plotGraph();\n            }\n        }\n    }\n\n    private onError(error: any) {\n        console.error(error);\n    }\n\n    private onCompleteLoadingData(dataset: IDataset) {\n        this.loadingCounter--;\n        if (this.loadingCounter === 0) { this.isContentLoading(false); }\n    }\n\n    private createTooltip() {\n        if ($('#tooltip').length === 0) {\n            $('<div id=\"tooltip\"></div>').appendTo('body');\n        }\n    }\n\n    private showTooltip(event: any, pos: any, item: any) {\n        $('#tooltip').empty();\n        $('#tooltip').append('<div>' + item.datapoint[1].toFixed(2) + ' ' + item.series.yaxis.options.uom + '</div>');\n        $('#tooltip').append('<div>' + item.series.xaxis.tickFormatter(item.datapoint[0], item.series.xaxis) + '</div>');\n        const tooltip = $('#tooltip').show();\n        const halfwidth = (event.target.clientWidth) / 2;\n        if (halfwidth >= item.pageX - event.target.getBoundingClientRect().left) {\n            tooltip.css({\n                position: 'absolute',\n                top: item.pageY + 5,\n                left: item.pageX + 5,\n                right: 'auto'\n            });\n        } else {\n            tooltip.css({\n                position: 'absolute',\n                top: item.pageY + 5,\n                right: ($(window).width() - item.pageX),\n                left: 'auto'\n            });\n        }\n    }\n\n    private hideTooltip() {\n        $('#tooltip').hide();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { HelgolandLabelMapperModule } from '@helgoland/depiction';\n\nimport {\n  FlotOverviewTimeseriesGraphComponent,\n} from './flot-overview-timeseries-graph/flot-overview-timeseries-graph.component';\nimport { FlotTimeseriesGraphComponent } from './flot-timeseries-graph/flot-timeseries-graph.component';\n\n@NgModule({\n  declarations: [\n    FlotTimeseriesGraphComponent,\n    FlotOverviewTimeseriesGraphComponent\n  ],\n  imports: [\n    HelgolandLabelMapperModule\n  ],\n  exports: [\n    FlotTimeseriesGraphComponent,\n    FlotOverviewTimeseriesGraphComponent\n  ],\n  providers: []\n})\nexport class HelgolandFlotModule { }\n"]}