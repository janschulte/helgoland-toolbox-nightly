import 'Flot/jquery.flot.js';
import 'Flot/jquery.flot.time.js';
import '@helgoland/flot/jquery.flot.navigate.js';
import '@helgoland/flot/jquery.flot.selection.js';
import '@helgoland/flot/jquery.flot.touch.js';
import { AfterViewInit, ElementRef, EventEmitter, IterableDiffers } from '@angular/core';
import { DatasetApiInterface, DatasetOptions, DatasetPresenterComponent, InternalIdHandler, Time } from '@helgoland/core';
import { LabelMapperService } from '@helgoland/depiction';
import { LangChangeEvent, TranslateService } from '@ngx-translate/core';
import { PlotOptions } from '../model/plotOptions.js';
export declare class FlotTimeseriesGraphComponent extends DatasetPresenterComponent<DatasetOptions, PlotOptions> implements AfterViewInit {
    protected iterableDiffers: IterableDiffers;
    protected api: DatasetApiInterface;
    protected datasetIdResolver: InternalIdHandler;
    protected timeSrvc: Time;
    protected labelMapper: LabelMapperService;
    protected translateSrvc: TranslateService;
    onHighlight: EventEmitter<string>;
    flotElem: ElementRef;
    private plotarea;
    private preparedData;
    private plotOptions;
    private datasetMap;
    private lastHightlight;
    private loadingCounter;
    constructor(iterableDiffers: IterableDiffers, api: DatasetApiInterface, datasetIdResolver: InternalIdHandler, timeSrvc: Time, labelMapper: LabelMapperService, translateSrvc: TranslateService);
    ngAfterViewInit(): void;
    protected onLanguageChanged(langChangeEvent: LangChangeEvent): void;
    reloadDataForDatasets(datasetIds: string[]): void;
    protected graphOptionsChanged(options: PlotOptions): void;
    protected setSelectedId(internalId: string): void;
    protected removeSelectedId(internalId: string): void;
    protected timeIntervalChanges(): void;
    protected removeDataset(internalId: string): void;
    protected addDataset(internalId: string, url: string): void;
    protected datasetOptionsChanged(internalId: string, options: DatasetOptions): void;
    protected onResize(): void;
    private changeTime(from, to);
    private plotGraph();
    private removePreparedData(internalId);
    private prepareData(dataset, data);
    private addReferenceValueData(internalId, styles, data);
    private prepareAxisPos();
    private createAxisLabel(dataset);
    private setSelection(plot, options);
    private createPlotAnnotation(plotArea, options);
    private createYAxis(plot);
    private addLoadedDataset(dataset);
    private loadData(dataset, refresh?);
    private onError(error);
    private onCompleteLoadingData(dataset);
    private createTooltip();
    private showTooltip(event, pos, item);
    private hideTooltip();
}
