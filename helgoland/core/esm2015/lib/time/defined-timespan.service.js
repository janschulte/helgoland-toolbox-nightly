/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import moment from 'moment';
import { Timespan } from '../model/internal/timeInterval';
/** @enum {string} */
const DefinedTimespan = {
    LASTHOUR: 'last_hour',
    TODAY: 'today',
    YESTERDAY: 'yesterday',
    TODAY_YESTERDAY: 'today_yesterday',
    CURRENT_WEEK: 'current_week',
    LAST_WEEK: 'last_week',
    CURRENT_MONTH: 'current_month',
    LAST_MONTH: 'last_month',
    CURRENT_YEAR: 'current_year',
    LAST_YEAR: 'last_year',
};
export { DefinedTimespan };
export class DefinedTimespanService {
    constructor() {
        this.intervals = new Map();
        this.intervals.set(DefinedTimespan.LASTHOUR, () => {
            /** @type {?} */
            const from = moment().subtract(1, 'hours').unix() * 1000;
            /** @type {?} */
            const to = moment().unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.TODAY, () => {
            /** @type {?} */
            const from = moment().startOf('day').unix() * 1000;
            /** @type {?} */
            const to = moment().endOf('day').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.YESTERDAY, () => {
            /** @type {?} */
            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;
            /** @type {?} */
            const to = moment().subtract(1, 'days').endOf('day').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.TODAY_YESTERDAY, () => {
            /** @type {?} */
            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;
            /** @type {?} */
            const to = moment().endOf('day').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.CURRENT_WEEK, () => {
            /** @type {?} */
            const from = moment().startOf('isoWeek').unix() * 1000;
            /** @type {?} */
            const to = moment().endOf('isoWeek').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.LAST_WEEK, () => {
            /** @type {?} */
            const from = moment().subtract(1, 'weeks').startOf('isoWeek').unix() * 1000;
            /** @type {?} */
            const to = moment().subtract(1, 'weeks').endOf('isoWeek').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.CURRENT_MONTH, () => {
            /** @type {?} */
            const from = moment().startOf('month').unix() * 1000;
            /** @type {?} */
            const to = moment().endOf('month').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.LAST_MONTH, () => {
            /** @type {?} */
            const from = moment().subtract(1, 'months').startOf('month').unix() * 1000;
            /** @type {?} */
            const to = moment().subtract(1, 'months').endOf('month').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.CURRENT_YEAR, () => {
            /** @type {?} */
            const from = moment().startOf('year').unix() * 1000;
            /** @type {?} */
            const to = moment().endOf('year').unix() * 1000;
            return new Timespan(from, to);
        });
        this.intervals.set(DefinedTimespan.LAST_YEAR, () => {
            /** @type {?} */
            const from = moment().subtract(1, 'years').startOf('year').unix() * 1000;
            /** @type {?} */
            const to = moment().subtract(1, 'years').endOf('year').unix() * 1000;
            return new Timespan(from, to);
        });
    }
    /**
     * @param {?} intervalDescriber
     * @return {?}
     */
    getInterval(intervalDescriber) {
        if (this.intervals.has(intervalDescriber)) {
            return this.intervals.get(intervalDescriber)();
        }
    }
}
DefinedTimespanService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DefinedTimespanService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    DefinedTimespanService.prototype.intervals;
}

//# sourceMappingURL=data:application/json;base64,