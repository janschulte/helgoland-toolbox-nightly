{"version":3,"file":"helgoland-core.umd.js.map","sources":["ng://@helgoland/core/lib/color/color.service.ts","ng://@helgoland/core/lib/dataset-api/api-mapping.service.ts","ng://@helgoland/core/lib/dataset-api/helper/status-interval-resolver.service.ts","ng://@helgoland/core/lib/dataset-api/internal-id-handler.service.ts","ng://@helgoland/core/lib/local-storage/local-storage.service.ts","ng://@helgoland/core/lib/notifier/notifier.service.ts","ng://@helgoland/core/lib/pipes/dateproxy/dateproxy.pipe.ts",null,"ng://@helgoland/core/lib/model/internal/timeInterval.ts","ng://@helgoland/core/lib/time/defined-timespan.service.ts","ng://@helgoland/core/lib/time/time.service.ts","ng://@helgoland/core/lib/core.module.ts","ng://@helgoland/core/lib/abstract-services/api-interface.ts","ng://@helgoland/core/lib/abstract-services/dataset.service.ts","ng://@helgoland/core/lib/abstract-services/rendering-hints-dataset.service.ts","ng://@helgoland/core/lib/dataset-api/api-interface.ts","ng://@helgoland/core/lib/model/dataset-api/dataset.ts","ng://@helgoland/core/lib/dataset-api/http.service.ts","ng://@helgoland/core/lib/dataset-api/dataset-impl-api-interface.service.ts","ng://@helgoland/core/lib/dataset-api/splitted-data-api-interface.service.ts","ng://@helgoland/core/lib/language/language-changer.ts","ng://@helgoland/core/lib/language/locale-selector.ts","ng://@helgoland/core/lib/model/dataset-api/data.ts","ng://@helgoland/core/lib/model/dataset-api/station.ts","ng://@helgoland/core/lib/model/dataset-api/enums.ts","ng://@helgoland/core/lib/model/internal/filter.ts","ng://@helgoland/core/lib/model/internal/options.ts","ng://@helgoland/core/lib/model/internal/id-cache.ts","ng://@helgoland/core/lib/model/mixins/Mixin.decorator.ts","ng://@helgoland/core/lib/model/mixins/has-loadable-content.ts","ng://@helgoland/core/lib/model/internal/ResizableComponent.ts","ng://@helgoland/core/lib/presenting/dataset-presenter.component.ts","ng://@helgoland/core/lib/presenting/presenter-message-type.ts","ng://@helgoland/core/lib/settings/settings.service.ts","ng://@helgoland/core/lib/status-check/status-check.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ColorService {\n\n    /**\n     * Creates a random color and return it as a hex string.\n     */\n    public getColor(): string {\n        return this.getRandomColor();\n    }\n\n    /**\n     * Converts a hex string and opacity in percent to RGBA color as string.\n     */\n    public convertHexToRGBA(hex: string, opacity: number): string {\n        hex = hex.replace('#', '');\n        const r = parseInt(hex.substring(0, 2), 16);\n        const g = parseInt(hex.substring(2, 4), 16);\n        const b = parseInt(hex.substring(4, 6), 16);\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';\n    }\n\n    private getRandomColor(): string {\n        const letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nexport enum DatasetApiVersion {\n    V1,\n    V2\n}\n\n@Injectable()\nexport class DatasetApiMapping {\n\n    private cache: Map<string, DatasetApiVersion> = new Map<string, DatasetApiVersion>();\n\n    constructor(\n        protected http: HttpClient\n    ) { }\n\n    public getApiVersion(apiUrl: string): Observable<DatasetApiVersion> {\n        return new Observable<DatasetApiVersion>((observer: Observer<DatasetApiVersion>) => {\n            if (this.cache.has(apiUrl)) {\n                this.confirmVersion(observer, this.cache.get(apiUrl));\n            } else {\n                this.http.get<any[]>(apiUrl).subscribe((result) => {\n                    let version = DatasetApiVersion.V1;\n                    result.forEach((entry) => {\n                        if (entry.id === 'platforms') {\n                            version = DatasetApiVersion.V2;\n                        }\n                    });\n                    this.cache.set(apiUrl, version);\n                    this.confirmVersion(observer, version);\n                });\n            }\n        });\n    }\n\n    private confirmVersion(observer: Observer<DatasetApiVersion>, version: DatasetApiVersion) {\n        observer.next(version);\n        observer.complete();\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StatusInterval } from '../../model/dataset-api/dataset';\n\n@Injectable()\nexport class StatusIntervalResolverService {\n\n  constructor() { }\n\n  public getMatchingInterval(value: number, statusIntervals: StatusInterval[]): StatusInterval {\n    if (value && statusIntervals) {\n      return statusIntervals.find((interval) => {\n        const upper = interval.upper ? parseFloat(interval.upper) : Number.MAX_VALUE;\n        const lower = interval.lower ? parseFloat(interval.lower) : Number.MIN_VALUE;\n        if (lower <= value && value < upper) { return true; }\n      });\n    }\n  }\n\n}\n","import 'rxjs/operator/map';\n\nimport { Injectable } from '@angular/core';\n\nimport { IDataset } from '../model/dataset-api/dataset';\n\nconst INTERNAL_ID_SEPERATOR = '__';\n\nexport interface InternalDatasetId {\n  id: string;\n  url: string;\n}\n\n/**\n * Service to generate or resolve internal dataset IDs\n */\n@Injectable()\nexport class InternalIdHandler {\n\n  /**\n   * Generates an internal id for the given dataset.\n   * @param dataset The dataset for which the internal id will be generated and saved.\n   */\n  public generateInternalId(dataset: IDataset) {\n    dataset.internalId = dataset.url + INTERNAL_ID_SEPERATOR + dataset.id;\n  }\n\n  /**\n   * Resolves the internal ID to the url and the API specific dataset id.\n   * @param internalId The internal id as string\n   * @returns Construct of url and API id\n   */\n  public resolveInternalId(internalId: string): InternalDatasetId {\n    const split = internalId.split(INTERNAL_ID_SEPERATOR);\n    if (split.length !== 2) {\n      console.error('InternalID ' + internalId + ' is not resolvable');\n    } else {\n      return {\n        url: split[0],\n        id: split[1]\n      };\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * LocalStorage save objects with a given key\n *\n * @export\n */\n@Injectable()\nexport class LocalStorage {\n\n    private localStorageEnabled = false;\n\n    constructor() {\n        if (typeof (Storage) !== 'undefined') {\n            this.localStorageEnabled = true;\n        }\n    }\n\n    /**\n     * Saves the object with the key in the local storage\n     *\n     * @param key\n     * @param object\n     * @returns successfull saving\n     * @memberof LocalStorage\n     */\n    public save(key: string, object: any): boolean {\n        if (this.localStorageEnabled) {\n            localStorage.setItem(key, JSON.stringify(object));\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * loads the object with for the key\n     *\n     * @param key\n     * @returns the object if exists, else null\n     * @memberof LocalStorage\n     */\n    public load<T>(key: string): T {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) {\n                return JSON.parse(result);\n            }\n            return null;\n        }\n    }\n\n    /**\n     * loads an array of objects for the key\n     *\n     * @param key\n     * @returns the array of objects if exists, else null\n     * @memberof LocalStorage\n     */\n    public loadArray<T>(key: string): T[] {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) {\n                return JSON.parse(result);\n            }\n            return null;\n        }\n    }\n\n    /**\n     * load a textual string for the given key\n     *\n     * @param key\n     * @returns the string if exists, else null\n     * @memberof LocalStorage\n     */\n    public loadTextual(key: string): string {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nconst ID = 'helgoland-notifier';\nconst TIME_IN_MS = 3000;\n\n@Injectable()\nexport class NotifierService {\n\n  private notifierTimeout: any;\n\n  constructor() {\n    const notifierElement = document.getElementById(ID);\n    if (!notifierElement) {\n      const node = document.createElement('div');\n      node.id = ID;\n      node.className = 'hide';\n      const textNode = document.createTextNode('');\n      node.appendChild(textNode);\n      document.body.appendChild(node);\n    }\n  }\n\n  public notify(text: string) {\n    clearTimeout(this.notifierTimeout);\n    const notifierElement = document.getElementById(ID);\n    notifierElement.innerHTML = text;\n    notifierElement.className = notifierElement.className.replace('hide', 'show');\n    this.notifierTimeout = setTimeout(() => {\n      notifierElement.className = notifierElement.className.replace('show', 'hide');\n    }, TIME_IN_MS);\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Pipe({\n    name: 'dateI18n',\n    pure: false\n})\nexport class DateProxyPipe implements PipeTransform {\n\n    constructor(\n        protected translate: TranslateService\n    ) { }\n\n    public transform(value: any, pattern: string = 'mediumDate'): any {\n        // simply forward to built-in pipe, but take into account the current language\n        const builtinDatePipe = new DatePipe(this.translate.currentLang || 'en');\n        try {\n            return builtinDatePipe.transform(value, pattern);\n        } catch (error) {\n            console.error(error);\n            return new DatePipe('en').transform(value, pattern);\n        }\n    }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export abstract class TimeInterval {\n\n}\n\nexport class Timespan extends TimeInterval {\n\n    public from: number;\n\n    public to: number;\n\n    constructor(\n        from: number,\n        to?: number\n    ) {\n        super();\n        this.from = from;\n        if (to) {\n            this.to = to;\n        } else {\n            this.to = from;\n        }\n    }\n\n}\n\nexport class BufferedTime extends TimeInterval {\n    public timestamp: Date;\n    public bufferInterval: number;\n\n    constructor(\n        timestamp: Date,\n        bufferInterval: number\n    ) {\n        super();\n        this.timestamp = timestamp;\n        this.bufferInterval = bufferInterval;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport moment from 'moment';\n\nimport { Timespan } from '../model/internal/timeInterval';\n\nexport enum DefinedTimespan {\n    LASTHOUR = 'last_hour',\n    TODAY = 'today',\n    YESTERDAY = 'yesterday',\n    TODAY_YESTERDAY = 'today_yesterday',\n    CURRENT_WEEK = 'current_week',\n    LAST_WEEK = 'last_week',\n    CURRENT_MONTH = 'current_month',\n    LAST_MONTH = 'last_month',\n    CURRENT_YEAR = 'current_year',\n    LAST_YEAR = 'last_year'\n}\n\n@Injectable()\nexport class DefinedTimespanService {\n\n    private intervals: Map<DefinedTimespan, () => Timespan> = new Map();\n\n    constructor() {\n        this.intervals.set(DefinedTimespan.LASTHOUR, () => {\n            const from = moment().subtract(1, 'hours').unix() * 1000;\n            const to = moment().unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.TODAY, () => {\n            const from = moment().startOf('day').unix() * 1000;\n            const to = moment().endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.YESTERDAY, () => {\n            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;\n            const to = moment().subtract(1, 'days').endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.TODAY_YESTERDAY, () => {\n            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;\n            const to = moment().endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_WEEK, () => {\n            const from = moment().startOf('isoWeek').unix() * 1000;\n            const to = moment().endOf('isoWeek').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_WEEK, () => {\n            const from = moment().subtract(1, 'weeks').startOf('isoWeek').unix() * 1000;\n            const to = moment().subtract(1, 'weeks').endOf('isoWeek').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_MONTH, () => {\n            const from = moment().startOf('month').unix() * 1000;\n            const to = moment().endOf('month').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_MONTH, () => {\n            const from = moment().subtract(1, 'months').startOf('month').unix() * 1000;\n            const to = moment().subtract(1, 'months').endOf('month').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_YEAR, () => {\n            const from = moment().startOf('year').unix() * 1000;\n            const to = moment().endOf('year').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_YEAR, () => {\n            const from = moment().subtract(1, 'years').startOf('year').unix() * 1000;\n            const to = moment().subtract(1, 'years').endOf('year').unix() * 1000;\n            return new Timespan(from, to);\n        });\n    }\n\n    public getInterval(intervalDescriber: DefinedTimespan): Timespan {\n        if (this.intervals.has(intervalDescriber)) {\n            return this.intervals.get(intervalDescriber)();\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { plainToClass } from 'class-transformer';\nimport moment from 'moment';\n\nimport { LocalStorage } from '../local-storage/local-storage.service';\nimport { BufferedTime, TimeInterval, Timespan } from '../model/internal/timeInterval';\n\n@Injectable()\nexport class Time {\n\n    constructor(\n        protected localStorage: LocalStorage\n    ) { }\n\n    public centerTimespan(timespan: Timespan, date: Date): Timespan {\n        const halfduration = this.getDuration(timespan).asMilliseconds() / 2;\n        const from = moment(date).subtract(halfduration).unix() * 1000;\n        const to = moment(date).add(halfduration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public stepBack(timespan: Timespan): Timespan {\n        const duration = this.getDuration(timespan);\n        const from = moment(timespan.from).subtract(duration).unix() * 1000;\n        const to = moment(timespan.to).subtract(duration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public stepForward(timespan: Timespan): Timespan {\n        const duration = this.getDuration(timespan);\n        const from = moment(timespan.from).add(duration).unix() * 1000;\n        const to = moment(timespan.to).add(duration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public overlaps(timeInterval: TimeInterval, from: number, to: number): boolean {\n        const timespan = this.createTimespanOfInterval(timeInterval);\n        if (timespan.from <= to && timespan.to >= from) {\n            return true;\n        }\n        return false;\n    }\n\n    public createTimespanOfInterval(timeInterval: TimeInterval): Timespan {\n        if (timeInterval instanceof Timespan) {\n            return timeInterval;\n        } else if (timeInterval instanceof BufferedTime) {\n            const duration = moment.duration(timeInterval.bufferInterval / 2);\n            const from = moment(timeInterval.timestamp).subtract(duration).unix() * 1000;\n            const to = moment(timeInterval.timestamp).add(duration).unix() * 1000;\n            return new Timespan(from, to);\n        } else {\n            console.error('Wrong time interval!');\n        }\n    }\n\n    public getBufferedTimespan(timespan: Timespan, factor: number): Timespan {\n        const durationMillis = this.getDuration(timespan).asMilliseconds();\n        const from = moment(timespan.from).subtract(durationMillis * factor).unix() * 1000;\n        const to = moment(timespan.to).add(durationMillis * factor).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public saveTimespan(param: string, timespan: Timespan) {\n        this.localStorage.save(param, timespan);\n    }\n\n    public loadTimespan(param: string): Timespan {\n        const json = this.localStorage.load(param);\n        if (json) {\n            return plainToClass<Timespan, object>(Timespan, json);\n        }\n        return null;\n    }\n\n    public initTimespan(): Timespan {\n        const now = new Date();\n        const start = moment(now).startOf('day').unix() * 1000;\n        const end = moment(now).endOf('day').unix() * 1000;\n        return new Timespan(start, end);\n    }\n\n    private getDuration(timespan: Timespan): moment.Duration {\n        const from = moment(timespan.from);\n        const to = moment(timespan.to);\n        return moment.duration(to.diff(from));\n    }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { ColorService } from './color/color.service';\nimport { DatasetApiMapping } from './dataset-api/api-mapping.service';\nimport { StatusIntervalResolverService } from './dataset-api/helper/status-interval-resolver.service';\nimport { InternalIdHandler } from './dataset-api/internal-id-handler.service';\nimport { LocalStorage } from './local-storage/local-storage.service';\nimport { NotifierService } from './notifier/notifier.service';\nimport { DateProxyPipe } from './pipes/dateproxy/dateproxy.pipe';\nimport { DefinedTimespanService } from './time/defined-timespan.service';\nimport { Time } from './time/time.service';\n\n@NgModule({\n  declarations: [\n    DateProxyPipe\n  ],\n  imports: [\n    HttpClientModule\n  ],\n  exports: [\n    DateProxyPipe\n  ],\n  providers: [\n    ColorService,\n    DatasetApiMapping,\n    DefinedTimespanService,\n    InternalIdHandler,\n    LocalStorage,\n    NotifierService,\n    StatusIntervalResolverService,\n    Time\n  ]\n})\nexport class HelgolandCoreModule { }\n","import moment from 'moment';\n\nimport { Timespan } from '../model/internal/timeInterval';\nimport { HttpHeaders } from '@angular/common/http';\n\nexport abstract class ApiInterface {\n\n    protected createRequestUrl(apiUrl: string, endpoint: string, id?: string) {\n        // TODO Check whether apiUrl ends with slash\n        let requestUrl = apiUrl + endpoint;\n        if (id) { requestUrl += '/' + id; }\n        return requestUrl;\n    }\n\n    protected createRequestTimespan(timespan: Timespan): string {\n        return encodeURI(moment(timespan.from).format() + '/' + moment(timespan.to).format());\n    }\n\n    protected createBasicAuthHeader(token: string): HttpHeaders {\n        const headers = new HttpHeaders();\n        if (token) { return headers.set('Authorization', token); }\n        return headers;\n    }\n\n}\n","import { DatasetOptions } from '../model/internal/options';\n\nexport abstract class DatasetService<T extends DatasetOptions | DatasetOptions[]> {\n\n    public datasetIds: string[] = [];\n\n    public datasetOptions: Map<string, T> = new Map();\n\n    public addDataset(internalId: string, options?: T) {\n        if (this.datasetIds.indexOf(internalId) < 0) {\n            this.datasetIds.push(internalId);\n            if (options) {\n                this.datasetOptions.set(internalId, options);\n            } else {\n                this.datasetOptions.set(internalId, this.createStyles(internalId));\n            }\n            this.saveState();\n        } else if (options instanceof Array) {\n            const temp = (this.datasetOptions.get(internalId) as DatasetOptions[]);\n            options.forEach((e) => temp.push(e));\n            this.saveState();\n        }\n    }\n\n    public removeAllDatasets() {\n        this.datasetIds.length = 0;\n        this.datasetOptions.clear();\n        this.saveState();\n    }\n\n    public removeDataset(internalId: string) {\n        const datasetIdx = this.datasetIds.indexOf(internalId);\n        if (datasetIdx > -1) {\n            this.datasetIds.splice(datasetIdx, 1);\n            this.datasetOptions.delete(internalId);\n        }\n        this.saveState();\n    }\n\n    public hasDatasets(): boolean {\n        return this.datasetIds.length > 0;\n    }\n\n    public updateDatasetOptions(options: T, internalId: string) {\n        this.datasetOptions.set(internalId, options);\n        this.saveState();\n    }\n\n    protected abstract createStyles(internalId: string): T;\n\n    protected abstract saveState(): void;\n\n    protected abstract loadState(): void;\n\n}\n","import { DatasetApiInterface } from '../dataset-api/api-interface';\nimport { BarRenderingHints, IDataset, LineRenderingHints } from '../model/dataset-api/dataset';\nimport { DatasetOptions } from '../model/internal/options';\nimport { DatasetService } from './dataset.service';\n\nexport abstract class RenderingHintsDatasetService<T extends DatasetOptions | DatasetOptions[]> extends DatasetService<T> {\n\n    constructor(\n        protected api: DatasetApiInterface\n    ) {\n        super();\n    }\n\n    public addDataset(internalId: string, options?: T) {\n        if (options) {\n            this.datasetIds.push(internalId);\n            this.datasetOptions.set(internalId, options);\n        } else if (this.datasetIds.indexOf(internalId) < 0) {\n            this.api.getSingleTimeseriesByInternalId(internalId).subscribe(\n                (timeseries) => this.addLoadedDataset(timeseries),\n                (error) => {\n                    this.api.getDatasetByInternalId(internalId).subscribe(\n                        (dataset) => this.addLoadedDataset(dataset),\n                    );\n                }\n            );\n        }\n    }\n\n    private addLoadedDataset(dataset: IDataset) {\n        this.datasetIds.push(dataset.internalId);\n        this.datasetOptions.set(dataset.internalId, this.createOptionsOfRenderingHints(dataset));\n    }\n\n    private createOptionsOfRenderingHints(dataset: IDataset): T {\n        const options = this.createStyles(dataset.internalId) as DatasetOptions;\n        if (dataset.renderingHints) {\n            if (dataset.renderingHints.properties && dataset.renderingHints.properties.color) {\n                options.color = dataset.renderingHints.properties.color;\n            }\n            switch (dataset.renderingHints.chartType) {\n                case 'line':\n                    this.handleLineRenderingHints(dataset.renderingHints as LineRenderingHints, options);\n                    break;\n                case 'bar':\n                    this.handleBarRenderingHints(dataset.renderingHints as BarRenderingHints, options);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return options as T;\n    }\n\n\n    private handleLineRenderingHints(lineHints: LineRenderingHints, options: DatasetOptions) {\n        if (lineHints.properties.width) {\n            options.lineWidth = Math.round(parseFloat(lineHints.properties.width));\n        }\n    }\n\n    private handleBarRenderingHints(barHints: BarRenderingHints, options: DatasetOptions) {\n        if (barHints.properties.width) {\n            options.lineWidth = Math.round(parseFloat(barHints.properties.width));\n        }\n    }\n}\n","import { HttpParameterCodec, HttpParams } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { ApiInterface } from '../abstract-services/api-interface';\nimport { Category } from '../model/dataset-api/category';\nimport { Data } from '../model/dataset-api/data';\nimport { Dataset, Timeseries, TimeseriesData, TimeseriesExtras } from '../model/dataset-api/dataset';\nimport { Feature } from '../model/dataset-api/feature';\nimport { Offering } from '../model/dataset-api/offering';\nimport { Phenomenon } from '../model/dataset-api/phenomenon';\nimport { Platform } from '../model/dataset-api/platform';\nimport { Procedure } from '../model/dataset-api/procedure';\nimport { Service } from '../model/dataset-api/service';\nimport { Station } from '../model/dataset-api/station';\nimport { DataParameterFilter, HttpRequestOptions, ParameterFilter } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { HttpService } from './http.service';\nimport { DatasetApiV2 } from './interfaces/api-v2.interface';\n\nexport class UriParameterCoder implements HttpParameterCodec {\n\n    public encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    public encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    public decodeKey(key: string): string {\n        return key;\n    }\n\n    public decodeValue(value: string): string {\n        return value;\n    }\n}\n\nexport abstract class DatasetApiInterface extends ApiInterface implements DatasetApiV2 {\n\n    constructor(\n        protected httpService: HttpService,\n        protected translate: TranslateService\n    ) { super(); }\n\n    public abstract getPlatforms(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform[]>;\n    public abstract getPlatform(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform>;\n    public abstract getDatasets(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset[]>;\n    public abstract getDataset(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset>;\n    public abstract getDatasetByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset>;\n    public abstract getData<T>(id: string, apiUrl: string, timespan: Timespan, params?: DataParameterFilter, options?: HttpRequestOptions): Observable<Data<T>>;\n    public abstract getServices(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service[]>;\n    public abstract getService(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service>;\n    public abstract getStations(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station[]>;\n    public abstract getStation(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station>;\n    public abstract getTimeseries(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries[]>;\n    public abstract getTimeseriesData(apiUrl: string, ids: string[], timespan: Timespan, options?: HttpRequestOptions): Observable<TimeseriesData[]>;\n    public abstract getSingleTimeseries(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries>;\n    public abstract getSingleTimeseriesByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries>;\n    public abstract getTimeseriesExtras(id: string, apiUrl: string): Observable<TimeseriesExtras>;\n    public abstract getTsData<T>(id: string, apiUrl: string, timespan: Timespan, params?: DataParameterFilter, options?: HttpRequestOptions): Observable<Data<T>>;\n    public abstract getCategories(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category[]>;\n    public abstract getCategory(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category>;\n    public abstract getPhenomena(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon[]>;\n    public abstract getPhenomenon(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon>;\n    public abstract getOfferings(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering[]>;\n    public abstract getOffering(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering>;\n    public abstract getFeatures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature[]>;\n    public abstract getFeature(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature>;\n    public abstract getProcedures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure[]>;\n    public abstract getProcedure(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure>;\n\n    protected requestApi<T>(\n        url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}\n    ): Observable<T> {\n        return this.httpService.client(options).get<T>(url,\n            {\n                params: this.prepareParams(params),\n                headers: this.createBasicAuthHeader(options.basicAuthToken)\n            }\n        );\n    }\n\n    protected prepareParams(params: ParameterFilter): HttpParams {\n        if (this.translate && this.translate.currentLang) {\n            params.locale = this.translate.currentLang;\n        }\n        let httpParams = new HttpParams({\n            encoder: new UriParameterCoder()\n        });\n        Object.getOwnPropertyNames(params)\n            .forEach((key) => httpParams = httpParams.set(key, params[key]));\n        return httpParams;\n    }\n}\n","import { DatasetTypes, PlatformTypes } from './enums';\nimport { Parameter } from './parameter';\nimport { Station } from './station';\n\nexport interface IDataset extends Parameter {\n    url: string;\n    uom: string;\n    internalId: string;\n    firstValue: FirstLastValue;\n    lastValue: FirstLastValue;\n    referenceValues: ReferenceValue[];\n    parameters: ParameterConstellation;\n    renderingHints: RenderingHints;\n}\n\nexport class ParameterConstellation {\n    public service: Parameter;\n    public offering: Parameter;\n    public feature: Parameter;\n    public procedure: Parameter;\n    public phenomenon: Parameter;\n    public category: Parameter;\n}\n\nexport class FirstLastValue {\n    public timestamp: number;\n    public value: number;\n}\n\nexport class ReferenceValue {\n    public referenceValueId: string;\n    public label: string;\n    public lastValue: FirstLastValue;\n    public color?: string;\n    public visible?: boolean;\n}\n\nexport interface RenderingHints {\n    chartType: string;\n    properties: {\n        color: string;\n    };\n}\n\nexport interface LineRenderingHints extends RenderingHints {\n    chartType: 'line';\n    properties: {\n        color: string;\n        width: string;\n        lineType: string;\n    };\n}\n\nexport interface BarRenderingHints {\n    chartType: 'bar';\n    properties: {\n        color: string;\n        width: string;\n        interval: string;\n    };\n}\n\nexport class DatasetParameterConstellation extends ParameterConstellation {\n    public platform: PlatformParameter;\n}\n\nexport class Dataset implements IDataset {\n    public id: string;\n    public label: string;\n    public url: string;\n    public uom: string;\n    public internalId: string;\n    public firstValue: FirstLastValue;\n    public lastValue: FirstLastValue;\n    public referenceValues: ReferenceValue[];\n    public datasetType: DatasetTypes;\n    public platformType: PlatformTypes;\n    public parameters: DatasetParameterConstellation;\n    public seriesParameters?: DatasetParameterConstellation;\n    public renderingHints: RenderingHints;\n}\n\nexport class Timeseries implements IDataset {\n    public id: string;\n    public label: string;\n    public url: string;\n    public uom: string;\n    public internalId: string;\n    public firstValue: FirstLastValue;\n    public lastValue: FirstLastValue;\n    public referenceValues: ReferenceValue[];\n    public station: Station;\n    public parameters: ParameterConstellation;\n    public statusIntervals?: StatusInterval[];\n    public hasData = false;\n    public renderingHints: RenderingHints;\n}\n\nexport interface TimeseriesExtras {\n    license?: string;\n    statusIntervals?: StatusInterval[];\n}\n\nexport interface StatusInterval {\n    lower: string;\n    upper: string;\n    name: string;\n    color: string;\n}\n\nexport interface PlatformParameter extends Parameter {\n    platformType: PlatformTypes;\n}\n\nexport class TimeseriesData {\n    public id: string;\n    public url: string;\n    public data: FirstLastValue[];\n}\n","import { HttpClient, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { HttpRequestOptions } from '../model/internal/http-requests';\n\nexport const HTTP_SERVICE_INTERCEPTORS = new InjectionToken<HttpServiceInterceptor>('HTTP_SERVICE_INTERCEPTORS');\n\nexport interface HttpServiceHandler {\n    handle(req: HttpRequest<any>, options: Partial<HttpRequestOptions>): Observable<HttpEvent<any>>;\n}\n\nexport interface HttpServiceInterceptor {\n    intercept(req: HttpRequest<any>, options: Partial<HttpRequestOptions>, next: HttpServiceHandler): Observable<HttpEvent<any>>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HttpService {\n\n    private handler: HttpServiceHandler;\n\n    constructor(\n        protected httpHandler: HttpHandler,\n        @Optional() @Inject(HTTP_SERVICE_INTERCEPTORS) interceptors: HttpServiceInterceptor[] | null\n    ) {\n        let handler: HttpServiceHandler = {\n            handle: (req, options) => httpHandler.handle(req)\n        };\n        if (interceptors) {\n            handler = interceptors.reduceRight((next, interceptor) => ({\n                handle: (req, options) => interceptor.intercept(req, options, next)\n            }), handler);\n        }\n        this.handler = handler;\n    }\n\n    public client(options: HttpRequestOptions = {}): HttpClient {\n        return new HttpClient({\n            handle: (req) => this.handler.handle(req, options)\n        });\n    }\n}\n","import 'rxjs/add/operator/map';\n\nimport { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { deserialize, deserializeArray } from 'class-transformer';\nimport { Observable, Observer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Category } from '../model/dataset-api/category';\nimport { Data } from '../model/dataset-api/data';\nimport { Dataset, Timeseries, TimeseriesData, TimeseriesExtras } from '../model/dataset-api/dataset';\nimport { Feature } from '../model/dataset-api/feature';\nimport { Offering } from '../model/dataset-api/offering';\nimport { Phenomenon } from '../model/dataset-api/phenomenon';\nimport { Platform } from '../model/dataset-api/platform';\nimport { Procedure } from '../model/dataset-api/procedure';\nimport { Service } from '../model/dataset-api/service';\nimport { Station } from '../model/dataset-api/station';\nimport { DataParameterFilter, HttpRequestOptions, ParameterFilter } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { DatasetApiInterface } from './api-interface';\nimport { HttpService } from './http.service';\nimport { InternalIdHandler } from './internal-id-handler.service';\n\n@Injectable()\nexport class DatasetImplApiInterface extends DatasetApiInterface {\n\n    constructor(\n        protected httpservice: HttpService,\n        protected internalDatasetId: InternalIdHandler,\n        protected translate: TranslateService\n    ) {\n        super(httpservice, translate);\n    }\n\n    public getServices(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service[]> {\n        const url = this.createRequestUrl(apiUrl, 'services');\n        if (params) {\n            params.expanded = true;\n        } else {\n            params = { expanded: true };\n        }\n        return this.requestApi<Service[]>(url, params, options).pipe(\n            map((result) => {\n                result.forEach((entry) => entry.apiUrl = apiUrl);\n                return result;\n            }));\n    }\n\n    public getService(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Service> {\n        const url = this.createRequestUrl(apiUrl, 'services', id);\n        return this.requestApi<Service>(url, params, options).pipe(\n            map((result) => {\n                result.apiUrl = apiUrl;\n                return result;\n            }));\n    }\n\n    public getStations(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station[]> {\n        const url = this.createRequestUrl(apiUrl, 'stations');\n        return this.requestApi<Station[]>(url, params, options);\n    }\n\n    public getStation(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Station> {\n        const url = this.createRequestUrl(apiUrl, 'stations', id);\n        return this.requestApi<Station>(url, params, options);\n    }\n\n    public getTimeseries(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries[]> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries');\n        return new Observable<Timeseries[]>((observer: Observer<Timeseries[]>) => {\n            this.requestApiTexted(url, params, options).subscribe(\n                (result) => {\n                    const timeseriesList = deserializeArray<Timeseries>(Timeseries, result);\n                    timeseriesList.forEach((entry) => {\n                        entry.url = apiUrl;\n                        this.internalDatasetId.generateInternalId(entry);\n                    });\n                    observer.next(timeseriesList);\n                },\n                (error) => observer.error(error),\n                () => observer.complete()\n            );\n        });\n    }\n\n    public getTimeseriesData(apiUrl: string, ids: string[], timespan: Timespan, options?: HttpRequestOptions): Observable<TimeseriesData[]> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries/getData');\n        return new Observable<TimeseriesData[]>((observer: Observer<Object>) => {\n            this.requestApiTextedPost(url, {\n                timespan: this.createRequestTimespan(timespan),\n                timeseries: ids\n            }, options).subscribe(\n                (result) => {\n                    const timeseriesList: TimeseriesData[] = [];\n                    for (const id in result) {\n                        if (id) {\n                            timeseriesList.push(\n                                {\n                                    id: id,\n                                    url: apiUrl,\n                                    data: result[id].values\n                                }\n                            );\n                        }\n                    }\n                    observer.next(timeseriesList);\n                },\n                (error) => observer.error(error),\n                () => observer.complete()\n            );\n        });\n    }\n\n    public getSingleTimeseries(id: string, apiUrl: string, params?: ParameterFilter): Observable<Timeseries> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id);\n        return this.requestApiTexted(url, params).pipe(map((result) => {\n            const timeseries = deserialize<Timeseries>(Timeseries, result);\n            timeseries.url = apiUrl;\n            this.internalDatasetId.generateInternalId(timeseries);\n            return timeseries;\n        }));\n    }\n\n    public getSingleTimeseriesByInternalId(internalId: string, params?: ParameterFilter): Observable<Timeseries> {\n        const resolvedId = this.internalDatasetId.resolveInternalId(internalId);\n        return this.getSingleTimeseries(resolvedId.id, resolvedId.url, params);\n    }\n\n    public getTimeseriesExtras(id: string, apiUrl: string): Observable<TimeseriesExtras> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id);\n        return this.requestApi<TimeseriesExtras>(url + '/extras');\n    }\n\n    public getTsData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id) + '/getData';\n        params.timespan = this.createRequestTimespan(timespan);\n        return this.requestApi<Data<T>>(url, params, options).pipe(\n            map((res: any) => {\n                if (params.expanded) { res = res[id]; }\n                return res;\n            }));\n    }\n\n    public getCategories(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category[]> {\n        const url = this.createRequestUrl(apiUrl, 'categories');\n        return this.requestApi<Category[]>(url, params, options);\n    }\n\n    public getCategory(id: string, apiUrl: string, params?: ParameterFilter): Observable<Category> {\n        // const url = this.createRequestUrl(apiUrl, 'categories', id);\n        throw new Error('Not implemented');\n        // return this.requestApi(url, params)\n        //     .map(this.extractData);\n    }\n\n    public getPhenomena(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon[]> {\n        const url = this.createRequestUrl(apiUrl, 'phenomena');\n        return this.requestApi<Phenomenon[]>(url, params, options);\n    }\n\n    public getPhenomenon(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Phenomenon> {\n        const url = this.createRequestUrl(apiUrl, 'phenomena', id);\n        return this.requestApi<Phenomenon>(url, params, options);\n    }\n\n    public getOfferings(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering[]> {\n        const url = this.createRequestUrl(apiUrl, 'offerings');\n        return this.requestApi<Offering[]>(url, params, options);\n    }\n\n    public getOffering(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Offering> {\n        const url = this.createRequestUrl(apiUrl, 'offerings', id);\n        return this.requestApi<Offering>(url, params, options);\n    }\n\n    public getFeatures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature[]> {\n        const url = this.createRequestUrl(apiUrl, 'features');\n        return this.requestApi<Feature[]>(url, params, options);\n    }\n\n    public getFeature(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Feature> {\n        const url = this.createRequestUrl(apiUrl, 'features', id);\n        return this.requestApi<Feature>(url, params, options);\n    }\n\n    public getProcedures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure[]> {\n        const url = this.createRequestUrl(apiUrl, 'procedures');\n        return this.requestApi<Procedure[]>(url, params, options);\n    }\n\n    public getProcedure(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Procedure> {\n        const url = this.createRequestUrl(apiUrl, 'procedures', id);\n        return this.requestApi<Procedure>(url, params, options);\n    }\n\n    public getPlatforms(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform[]> {\n        const url = this.createRequestUrl(apiUrl, 'platforms');\n        return this.requestApi<Platform[]>(url, params, options);\n    }\n\n    public getPlatform(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Platform> {\n        const url = this.createRequestUrl(apiUrl, 'platforms', id);\n        return this.requestApi<Platform>(url, params, options);\n    }\n\n    public getDatasets(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset[]> {\n        const url = this.createRequestUrl(apiUrl, 'datasets');\n        return this.requestApi<Dataset[]>(url, params, options).pipe(\n            map((list) => list.map((entry) => this.prepareDataset(entry, apiUrl)))\n        );\n    }\n\n    public getDataset(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset> {\n        const url = this.createRequestUrl(apiUrl, 'datasets', id);\n        return this.requestApi<Dataset>(url, params, options).pipe(\n            map((res) => this.prepareDataset(res, apiUrl))\n        );\n    }\n\n    public getDatasetByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset> {\n        const resolvedId = this.internalDatasetId.resolveInternalId(internalId);\n        return this.getDataset(resolvedId.id, resolvedId.url, params, options);\n    }\n\n    public getData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const url = this.createRequestUrl(apiUrl, 'datasets', id) + '/data';\n        params.timespan = this.createRequestTimespan(timespan);\n        return this.requestApi<Data<T>>(url, params, options);\n    }\n\n    // public getGeometries(id: string, apiUrl: string, params?): Observable<> {\n    //     throw new Error('Not implemented');\n    // }\n\n    // protected createRequestTimespan(timespan: Timespan): string {\n    //     return encodeURI(moment(timespan.from).format() + '/' + moment(timespan.to).format());\n    // }\n\n    private requestApiTexted(url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}): Observable<string> {\n        return this.httpservice.client(options).get(url, {\n            params: this.prepareParams(params),\n            responseType: 'text'\n        });\n    }\n\n    private requestApiTextedPost(url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}): Observable<Object> {\n        return this.httpservice.client().post(url, params, {\n            responseType: 'json'\n        });\n    }\n\n    private prepareDataset(datasetObj: Dataset, apiUrl: string) {\n        const dataset = deserialize<Dataset>(Dataset, JSON.stringify(datasetObj));\n        dataset.url = apiUrl;\n        this.internalDatasetId.generateInternalId(dataset);\n        if (dataset.seriesParameters) {\n            dataset.parameters = dataset.seriesParameters;\n            delete dataset.seriesParameters;\n        }\n        return dataset;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport moment from 'moment';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Data } from '../model/dataset-api/data';\nimport { DataParameterFilter, HttpRequestOptions } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { DatasetImplApiInterface } from './dataset-impl-api-interface.service';\nimport { HttpService } from './http.service';\nimport { InternalIdHandler } from './internal-id-handler.service';\n\n@Injectable()\nexport class SplittedDataDatasetApiInterface extends DatasetImplApiInterface {\n\n    constructor(\n        protected httpservice: HttpService,\n        protected internalDatasetId: InternalIdHandler,\n        protected translate: TranslateService\n    ) {\n        super(httpservice, internalDatasetId, translate);\n    }\n\n    public getTsData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const maxTimeExtent = moment.duration(1, 'year').asMilliseconds();\n        if ((timespan.to - timespan.from) > maxTimeExtent) {\n            const requests: Array<Observable<Data<T>>> = [];\n            let start = moment(timespan.from).startOf('year');\n            let end = moment(timespan.from).endOf('year');\n            while (start.isBefore(moment(timespan.to))) {\n                const chunkSpan = new Timespan(start.unix() * 1000, end.unix() * 1000);\n                requests.push(super.getTsData<T>(id, apiUrl, chunkSpan, params, options));\n                start = end.add(1, 'millisecond');\n                end = moment(start).endOf('year');\n            }\n            return forkJoin(requests).pipe(map((entry) => {\n                return entry.reduce((previous, current) => {\n                    const next: Data<T> = {\n                        referenceValues: {},\n                        values: previous.values.concat(current.values)\n                    };\n                    for (const key in previous.referenceValues) {\n                        if (previous.referenceValues.hasOwnProperty(key)) {\n                            next.referenceValues[key] = previous.referenceValues[key].concat(current.referenceValues[key]);\n                        }\n                    }\n                    return next;\n                });\n            }));\n        } else {\n            return super.getTsData<T>(id, apiUrl, timespan, params, options);\n        }\n    }\n\n}\n","import { TranslateService } from '@ngx-translate/core';\n\nexport abstract class LanguageChangNotifier {\n\n    constructor(\n        protected translate: TranslateService\n    ) {\n        this.translate.onLangChange.subscribe(() => this.languageChanged());\n    }\n\n    protected abstract languageChanged(): void;\n\n}\n","import { Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { Language } from './model/language';\n\nexport abstract class LocalSelectorComponent implements OnChanges {\n\n    @Input()\n    public languageList: Language[];\n\n    public currentLang: Language;\n\n    constructor(\n        protected translate: TranslateService\n    ) { }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.languageList) {\n            this.setCurrentLang();\n        }\n    }\n\n    public setLanguage(lang: Language) {\n        this.translate.use(lang.code);\n        this.setCurrentLang();\n    }\n\n    private setCurrentLang() {\n        this.currentLang = this.languageList.find((e) => e.code === this.translate.currentLang);\n    }\n\n}\n","// tslint:disable-next-line:no-empty-interface\nexport interface IDataEntry { }\n\nexport interface Data<T extends IDataEntry> {\n    values: T[];\n    referenceValues: ReferenceValues<T>;\n    valueBeforeTimespan?: T;\n    valueAfterTimespan?: T;\n}\n\nexport class ReferenceValues<T extends IDataEntry> {\n    [key: string]: T[];\n}\n\nexport interface TimeValueEntry extends IDataEntry {\n    timestamp: number;\n    value: number;\n}\n\nexport interface LocatedTimeValueEntry extends TimeValueEntry {\n    geometry: GeoJSON.Point;\n}\n\nexport interface ProfileDataEntry extends IDataEntry {\n    timestamp: number;\n    value: Array<{ value: number, vertical: number }>;\n    verticalUnit: string;\n}\n\nexport interface LocatedProfileDataEntry extends ProfileDataEntry {\n    timestamp: number;\n    value: Array<{ value: number, vertical: number }>;\n    verticalUnit: string;\n    geometry: GeoJSON.GeoJsonObject;\n}\n","import { ParameterConstellation, Timeseries } from './dataset';\nimport { Parameter } from './parameter';\n\nexport class Station {\n    public id: string;\n    public geometry: GeoJSON.GeometryObject;\n    public properties: StationProperties;\n}\n\nexport interface StationProperties extends Parameter {\n    timeseries: TimeseriesCollection | Timeseries;\n}\n\nexport class TimeseriesCollection {\n    [key: string]: ParameterConstellation;\n}\n","export enum PlatformTypes {\n    stationary = 'stationary',\n    mobile = 'mobile',\n    mobileInsitu = 'mobile_insitu'\n}\n\nexport enum ValueTypes {\n    quantity = 'quantity',\n    quantityProfile = 'quantity-profile'\n}\n\nexport enum DatasetTypes {\n    measurement\n}\n","import { ParameterFilter } from './../internal/http-requests';\n\nexport class Filter {\n    public url: string;\n    public service: string;\n    public itemId: string;\n    public filter: ParameterFilter;\n}\n","/**\n * Options for each dataset.\n *\n * @export\n */\nexport class DatasetOptions {\n\n    /**\n     * internal dataset id\n     *\n     * @memberof DatasetOptions\n     */\n    public internalId: string;\n\n    /**\n     * color of the dataset\n     *\n     * @memberof DatasetOptions\n     */\n    public color: string;\n\n    /**\n     * show or hide in the graph\n     *\n     * @memberof DatasetOptions\n     */\n    public visible: boolean = true;\n\n    /**\n     * separate y axis of datasets with same unit\n     *\n     * @memberof DatasetOptions\n     */\n    public separateYAxis?: boolean = false;\n\n    /**\n     * align graph that zero y axis is visible\n     *\n     * @memberof DatasetOptions\n     */\n    public zeroBasedYAxis?: boolean = false;\n\n    /**\n     * auto zoom when range selection\n     *\n     * @memberof DatasetOptions\n     */\n    autoRangeSelection?: boolean = false;\n\n    /**\n     * marker to request dataset data generalized\n     *\n     * @memberof DatasetOptions\n     */\n    public generalize?: boolean = false;\n\n    /**\n     * list of visible reference values\n     *\n     * @memberof DatasetOptions\n     */\n    public showReferenceValues: ReferenceValueOption[] = [];\n\n    /**\n     * radius of graphpoint\n     *\n     * @memberof DatasetOptions\n     */\n    public pointRadius: number = 0;\n\n    /**\n     * width of graphline\n     *\n     * @memberof DatasetOptions\n     */\n    public lineWidth: number = 1;\n\n    /**\n     * min and max range of y axis\n     *\n     * @memberof DatasetOptions\n     */\n    public yAxisRange?: MinMaxRange;\n\n    constructor(\n        internalId: string,\n        color: string\n    ) {\n        this.internalId = internalId;\n        this.color = color;\n    }\n}\n\nexport class ReferenceValueOption {\n    public id: string;\n    public color: string;\n}\n\n/**\n * numbered range with a min and a max value\n *\n * @export\n */\nexport interface MinMaxRange {\n    min: number;\n    max: number;\n}\n\nexport class TimedDatasetOptions extends DatasetOptions {\n    public timestamp: number;\n\n    constructor(\n        internalId: string,\n        color: string,\n        timestamp: number\n    ) {\n        super(internalId, color);\n        this.timestamp = timestamp;\n    }\n}\n","export class IdCache<T> {\n\n    private cache: Map<string, T> = new Map();\n\n    public has(id: string): boolean {\n        return this.cache.has(id);\n    }\n\n    public get(id: string): T {\n        return this.cache.get(id);\n    }\n\n    public set(id: string, value: T) {\n        this.cache.set(id, value);\n    }\n\n}\n","export function Mixin(baseCtors: any[]) {\n    return (derivedCtor: any) => {\n        baseCtors.forEach((baseCtor) => {\n            Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            });\n        });\n    };\n}\n","import { EventEmitter } from '@angular/core';\n\nexport class HasLoadableContent {\n\n    public onContentLoading: EventEmitter<boolean>;\n\n    public isContentLoading(loading: boolean) {\n        this.onContentLoading.emit(loading);\n    }\n\n}\n","import { HostListener } from '@angular/core';\n\nexport abstract class ResizableComponent {\n\n    @HostListener('window:resize', ['$event'])\n    public onWindowResize(event: Event) {\n        this.onResize();\n    }\n\n    protected abstract onResize(): void;\n\n}\n","import {\n    DoCheck,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\n\nimport { DatasetApiInterface } from '../dataset-api/api-interface';\nimport { InternalIdHandler } from '../dataset-api/internal-id-handler.service';\nimport { DatasetOptions } from '../model/internal/options';\nimport { ResizableComponent } from '../model/internal/ResizableComponent';\nimport { TimeInterval, Timespan } from '../model/internal/timeInterval';\nimport { HasLoadableContent } from '../model/mixins/has-loadable-content';\nimport { Time } from '../time/time.service';\nimport { PresenterMessage } from './presenter-message';\n\nconst equal = require('deep-equal');\n\nexport interface PresenterOptions { }\n\n/**\n * Abstract superclass for all components, which will present datasets.\n */\nexport abstract class DatasetPresenterComponent<T extends DatasetOptions | DatasetOptions[], U extends PresenterOptions>\n    extends ResizableComponent implements OnChanges, DoCheck, OnDestroy, HasLoadableContent {\n\n    /**\n     * List of presented dataset ids.\n     */\n    @Input()\n    public datasetIds: string[] = [];\n\n    /**\n     * List of presented selected dataset ids.\n     */\n    @Input()\n    public selectedDatasetIds: string[] = [];\n\n    /**\n     * The time interval in which the data should presented.\n     */\n    @Input()\n    public timeInterval: TimeInterval;\n\n    /**\n     * The corresponding dataset options.\n     */\n    @Input()\n    public datasetOptions: Map<string, T>;\n    protected oldDatasetOptions: Map<string, T>;\n\n    /**\n     * Options for general presentation of the data.\n     */\n    @Input()\n    public presenterOptions: U;\n    protected oldPresenterOptions: U;\n\n    /**\n     * List of datasets for which a reload should be triggered, when the Array is set to new value.\n     */\n    @Input()\n    public reloadForDatasets: string[];\n\n    /**\n     * Event with a list of selected datasets.\n     */\n    @Output()\n    public onDatasetSelected: EventEmitter<string[]> = new EventEmitter();\n\n    /**\n     * Event when the timespan in the presentation is adjusted.\n     */\n    @Output()\n    public onTimespanChanged: EventEmitter<Timespan> = new EventEmitter();\n\n    /**\n     * Event, when there occured a message in the component.\n     */\n    @Output()\n    public onMessageThrown: EventEmitter<PresenterMessage> = new EventEmitter();\n\n    /**\n     * Event flag, while there is data loaded in the component.\n     */\n    @Output()\n    public onContentLoading: EventEmitter<boolean> = new EventEmitter();\n\n    public isContentLoading: (loading: boolean) => void;\n\n    protected timespan: Timespan;\n\n    private datasetIdsDiffer: IterableDiffer<string>;\n    private selectedDatasetIdsDiffer: IterableDiffer<string>;\n    private langChangeSubscription: Subscription;\n\n    constructor(\n        protected iterableDiffers: IterableDiffers,\n        protected api: DatasetApiInterface,\n        protected datasetIdResolver: InternalIdHandler,\n        protected timeSrvc: Time,\n        protected translateService: TranslateService\n    ) {\n        super();\n        this.datasetIdsDiffer = this.iterableDiffers.find([]).create();\n        this.selectedDatasetIdsDiffer = this.iterableDiffers.find([]).create();\n        this.langChangeSubscription = this.translateService.onLangChange.subscribe((langChangeEvent: LangChangeEvent) => this.onLanguageChanged(langChangeEvent));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeInterval && this.timeInterval) {\n            this.timespan = this.timeSrvc.createTimespanOfInterval(this.timeInterval);\n            this.timeIntervalChanges();\n        }\n        if (changes.reloadForDatasets && this.reloadForDatasets && this.reloadDataForDatasets.length > 0) {\n            this.reloadDataForDatasets(this.reloadForDatasets);\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.langChangeSubscription.unsubscribe();\n    }\n\n    public ngDoCheck(): void {\n        const datasetIdsChanges = this.datasetIdsDiffer.diff(this.datasetIds);\n        if (datasetIdsChanges) {\n            datasetIdsChanges.forEachAddedItem((addedItem) => {\n                this.addDatasetByInternalId(addedItem.item);\n            });\n            datasetIdsChanges.forEachRemovedItem((removedItem) => {\n                this.removeDataset(removedItem.item);\n            });\n        }\n\n        const selectedDatasetIdsChanges = this.selectedDatasetIdsDiffer.diff(this.selectedDatasetIds);\n        if (selectedDatasetIdsChanges) {\n            selectedDatasetIdsChanges.forEachAddedItem((addedItem) => {\n                this.setSelectedId(addedItem.item);\n            });\n            selectedDatasetIdsChanges.forEachRemovedItem((removedItem) => {\n                this.removeSelectedId(removedItem.item);\n            });\n        }\n\n        if (!equal(this.oldPresenterOptions, this.presenterOptions)) {\n            this.oldPresenterOptions = Object.assign({}, this.presenterOptions);\n            const options = Object.assign({}, this.presenterOptions);\n            this.presenterOptionsChanged(options);\n        }\n\n        if (this.datasetOptions) {\n            const firstChange = this.oldDatasetOptions === undefined;\n            if (firstChange) { this.oldDatasetOptions = new Map(); }\n            this.datasetOptions.forEach((value, key) => {\n                if (!equal(value, this.oldDatasetOptions.get(key))) {\n                    this.oldDatasetOptions.set(key, Object.assign({}, this.datasetOptions.get(key)));\n                    this.datasetOptionsChanged(key, value, firstChange);\n                }\n            });\n        }\n    }\n\n    public abstract reloadDataForDatasets(datasets: string[]): void;\n\n    protected addDatasetByInternalId(internalId: string) {\n        const internalIdObj = this.datasetIdResolver.resolveInternalId(internalId);\n        this.addDataset(internalIdObj.id, internalIdObj.url);\n    }\n\n    protected abstract onLanguageChanged(langChangeEvent: LangChangeEvent): void;\n\n    protected abstract timeIntervalChanges(): void;\n\n    protected abstract addDataset(id: string, url: string): void;\n\n    protected abstract removeDataset(internalId: string): void;\n\n    protected abstract setSelectedId(internalId: string): void;\n\n    protected abstract removeSelectedId(internalId: string): void;\n\n    protected abstract presenterOptionsChanged(options: U): void;\n\n    protected abstract datasetOptionsChanged(internalId: string, options: T, firstChange: boolean): void;\n\n}\n","export enum PresenterMessageType {\n    ERROR,\n    INFO\n}\n","import { Settings } from '../model/settings/settings';\n\nexport abstract class SettingsService<T extends Settings> {\n\n    private settings: T;\n\n    constructor() {\n        // Default empty settings\n        this.settings = {} as T;\n    }\n\n    public getSettings() {\n        return this.settings;\n    }\n\n    protected setSettings(settings: T) {\n        this.settings = settings;\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { forkJoin, Observable, Observer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * This class checks URLs if they are reachable by a simple get request. If they gets anything back, everything is ok, otherwise\n * the corresponding method gives back the URLs which are not reachable.\n */\n@Injectable()\nexport class StatusCheckService {\n\n  private urls: string[] = [];\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  /**\n   * Checks all internal registered URLs if they are reachable. Gives back every URL, which was not reachable\n   */\n  public checkAll(): Observable<string[]> {\n    return this.doCheck(this.urls);\n  }\n\n  /**\n   * Checks the given URL.\n   * @returns Observable with the URL if not reachable.\n   */\n  public checkUrl(url: string): Observable<string> {\n    return this.doCheckUrl(url);\n  }\n\n  /**\n   * Checks the given URLs.\n   * @returns Observable of all not reachable URLs.\n   */\n  public checkUrls(urls: string[]): Observable<string[]> {\n    return this.doCheck(urls);\n  }\n\n  /**\n   * Adds the URL to the internal collection.\n   */\n  public addUrl(url: string) {\n    const index = this.urls.indexOf(url);\n    if (index === -1) { this.urls.push(url); }\n  }\n\n  /**\n   * Removes the URL of the internal collection.\n   */\n  public removeUrl(url: string) {\n    const index = this.urls.indexOf(url);\n    if (index > -1) { this.urls.splice(index, 1); }\n  }\n\n  private doCheckUrl(url: string): Observable<string> {\n    return new Observable((observer: Observer<string>) => {\n      this.httpClient.get(url).subscribe(\n        (res) => {\n          observer.next(null);\n          observer.complete();\n        },\n        (error) => {\n          observer.next(url);\n          observer.complete();\n        }\n      );\n    });\n  }\n\n  private doCheck(urls: string[]): Observable<string[]> {\n    const requests: Array<Observable<string>> = [];\n    urls.forEach((url) => requests.push(this.doCheckUrl(url)));\n    return forkJoin(requests).pipe(\n      map((checkedUrls) => {\n        return checkedUrls.filter((entry) => {\n          if (entry) {\n            return entry;\n          }\n        });\n      })\n    );\n  }\n\n}\n"],"names":["Injectable","Observable","HttpClient","DatePipe","Pipe","TranslateService","tslib_1.__extends","plainToClass","NgModule","HttpClientModule","HttpHeaders","HttpParams","InjectionToken","HttpHandler","Optional","Inject","map","deserializeArray","deserialize","forkJoin","Input","HostListener","EventEmitter","Output"],"mappings":"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"}
