{"version":3,"sources":["ng://@helgoland/core/lib/color/color.service.ts","ng://@helgoland/core/lib/dataset-api/api-mapping.service.ts","ng://@helgoland/core/lib/dataset-api/helper/status-interval-resolver.service.ts","ng://@helgoland/core/lib/dataset-api/internal-id-handler.service.ts","ng://@helgoland/core/lib/local-storage/local-storage.service.ts","ng://@helgoland/core/lib/notifier/notifier.service.ts","ng://@helgoland/core/lib/pipes/dateproxy/dateproxy.pipe.ts","null","ng://@helgoland/core/lib/model/internal/timeInterval.ts","ng://@helgoland/core/lib/time/defined-timespan.service.ts","ng://@helgoland/core/lib/time/time.service.ts","ng://@helgoland/core/lib/core.module.ts","ng://@helgoland/core/lib/abstract-services/api-interface.ts","ng://@helgoland/core/lib/abstract-services/dataset.service.ts","ng://@helgoland/core/lib/abstract-services/rendering-hints-dataset.service.ts","ng://@helgoland/core/lib/dataset-api/api-interface.ts","ng://@helgoland/core/lib/model/dataset-api/dataset.ts","ng://@helgoland/core/lib/dataset-api/http.service.ts","ng://@helgoland/core/lib/dataset-api/dataset-impl-api-interface.service.ts","ng://@helgoland/core/lib/dataset-api/splitted-data-api-interface.service.ts","ng://@helgoland/core/lib/language/language-changer.ts","ng://@helgoland/core/lib/language/locale-selector.ts","ng://@helgoland/core/lib/model/dataset-api/data.ts","ng://@helgoland/core/lib/model/dataset-api/station.ts","ng://@helgoland/core/lib/model/dataset-api/enums.ts","ng://@helgoland/core/lib/model/internal/filter.ts","ng://@helgoland/core/lib/model/internal/options.ts","ng://@helgoland/core/lib/model/internal/id-cache.ts","ng://@helgoland/core/lib/model/mixins/has-loadable-content.ts","ng://@helgoland/core/lib/model/internal/ResizableComponent.ts","ng://@helgoland/core/lib/presenting/dataset-presenter.component.ts","ng://@helgoland/core/lib/presenting/presenter-message-type.ts","ng://@helgoland/core/lib/settings/settings.service.ts","ng://@helgoland/core/lib/status-check/status-check.service.ts","ng://@helgoland/core/lib/model/mixins/Mixin.decorator.ts"],"names":["ColorService","prototype","getColor","this","getRandomColor","convertHexToRGBA","hex","opacity","replace","parseInt","substring","color","i","Math","floor","random","Injectable","V1","V2","DatasetApiMapping","http","Map","getApiVersion","apiUrl","Observable","observer","_this","cache","has","confirmVersion","get","subscribe","result","version","DatasetApiVersion","forEach","entry","id","set","next","complete","HttpClient","StatusIntervalResolverService","getMatchingInterval","value","statusIntervals","find","interval","upper","parseFloat","Number","MAX_VALUE","lower","MIN_VALUE","InternalIdHandler","generateInternalId","dataset","internalId","url","resolveInternalId","split","length","console","error","LocalStorage","localStorageEnabled","save","key","object","localStorage","setItem","JSON","stringify","load","getItem","parse","loadArray","loadTextual","ID","NotifierService","document","getElementById","node","createElement","className","textNode","createTextNode","appendChild","body","notify","text","clearTimeout","notifierTimeout","notifierElement","innerHTML","setTimeout","DateProxyPipe","translate","transform","pattern","builtinDatePipe","DatePipe","currentLang","Pipe","args","name","pure","TranslateService","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","TimeInterval","Timespan","_super","from","to","call","tslib_1.__extends","BufferedTime","timestamp","bufferInterval","LASTHOUR","TODAY","YESTERDAY","TODAY_YESTERDAY","CURRENT_WEEK","LAST_WEEK","CURRENT_MONTH","LAST_MONTH","CURRENT_YEAR","LAST_YEAR","DefinedTimespanService","intervals","DefinedTimespan","moment","subtract","unix","startOf","endOf","getInterval","intervalDescriber","Time","centerTimespan","timespan","date","halfduration","getDuration","asMilliseconds","add","stepBack","duration","stepForward","overlaps","timeInterval","createTimespanOfInterval","getBufferedTimespan","factor","durationMillis","saveTimespan","param","loadTimespan","json","plainToClass","initTimespan","now","Date","start","end","diff","HelgolandCoreModule","NgModule","declarations","imports","HttpClientModule","exports","providers","ApiInterface","createRequestUrl","endpoint","requestUrl","createRequestTimespan","encodeURI","format","createBasicAuthHeader","token","headers","HttpHeaders","DatasetService","addDataset","options","datasetIds","indexOf","push","datasetOptions","createStyles","saveState","temp_1","e","removeAllDatasets","clear","removeDataset","datasetIdx","splice","delete","hasDatasets","updateDatasetOptions","RenderingHintsDatasetService","api","getSingleTimeseriesByInternalId","timeseries","addLoadedDataset","getDatasetByInternalId","createOptionsOfRenderingHints","renderingHints","properties","chartType","handleLineRenderingHints","handleBarRenderingHints","lineHints","width","lineWidth","round","barHints","UriParameterCoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","DatasetApiInterface","httpService","requestApi","params","client","prepareParams","basicAuthToken","httpParams","HttpParams","encoder","getOwnPropertyNames","ParameterConstellation","FirstLastValue","ReferenceValue","DatasetParameterConstellation","Dataset","Timeseries","TimeseriesData","HTTP_SERVICE_INTERCEPTORS","InjectionToken","HttpService","httpHandler","interceptors","handler","handle","req","reduceRight","interceptor","intercept","providedIn","HttpHandler","Optional","type","Inject","DatasetImplApiInterface","httpservice","internalDatasetId","getServices","expanded","pipe","map","getService","getStations","getStation","getTimeseries","requestApiTexted","timeseriesList","deserializeArray","getTimeseriesData","ids","requestApiTextedPost","data","values","getSingleTimeseries","deserialize","resolvedId","getTimeseriesExtras","getTsData","res","getCategories","getCategory","Error","getPhenomena","getPhenomenon","getOfferings","getOffering","getFeatures","getFeature","getProcedures","getProcedure","getPlatforms","getPlatform","getDatasets","list","prepareDataset","getDataset","getData","responseType","post","datasetObj","seriesParameters","parameters","SplittedDataDatasetApiInterface","maxTimeExtent","requests","isBefore","chunkSpan","forkJoin","reduce","previous","current","referenceValues","concat","LanguageChangNotifier","onLangChange","languageChanged","LocalSelectorComponent","ngOnChanges","changes","setCurrentLang","setLanguage","lang","use","code","languageList","Input","ReferenceValues","Station","TimeseriesCollection","measurement","Filter","DatasetOptions","ReferenceValueOption","TimedDatasetOptions","IdCache","HasLoadableContent","isContentLoading","loading","onContentLoading","emit","ResizableComponent","onWindowResize","event","onResize","HostListener","equal","require","DatasetPresenterComponent","iterableDiffers","datasetIdResolver","timeSrvc","translateService","EventEmitter","datasetIdsDiffer","selectedDatasetIdsDiffer","langChangeSubscription","langChangeEvent","onLanguageChanged","timeIntervalChanges","reloadForDatasets","reloadDataForDatasets","ngOnDestroy","unsubscribe","ngDoCheck","datasetIdsChanges","forEachAddedItem","addedItem","addDatasetByInternalId","item","forEachRemovedItem","removedItem","selectedDatasetIdsChanges","selectedDatasetIds","setSelectedId","removeSelectedId","oldPresenterOptions","presenterOptions","assign","presenterOptionsChanged","firstChange_1","oldDatasetOptions","undefined","datasetOptionsChanged","internalIdObj","Output","ERROR","INFO","SettingsService","settings","getSettings","setSettings","StatusCheckService","httpClient","checkAll","doCheck","urls","checkUrl","doCheckUrl","checkUrls","addUrl","removeUrl","index","checkedUrls","filter","stationary","mobile","mobileInsitu","quantity","quantityProfile","baseCtors","derivedCtor","baseCtor"],"mappings":"+2BAAA,IAAAA,EAAA,gCAQWA,EAAAC,UAAAC,oBACH,OAAOC,KAAKC,kBAMTJ,EAAAC,UAAAI,0BAAiBC,EAAaC,GAKjC,OAJAD,EAAMA,EAAIE,QAAQ,IAAK,IAIhB,QAHGC,SAASH,EAAII,UAAU,EAAG,GAAI,IAGnB,IAFXD,SAASH,EAAII,UAAU,EAAG,GAAI,IAET,IADrBD,SAASH,EAAII,UAAU,EAAG,GAAI,IACC,IAAMH,EAAU,IAAM,KAG3DP,EAAAC,UAAAG,0BAGJ,IAFA,IACIO,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAErC,OAAOJ,uBA3BdK,EAAAA,eAFD,MCKIC,GAAA,EACAC,GAAA,OADAD,IAAE,SACFC,IAAE,sBAQF,SAAAC,EACcC,GAAAjB,KAAAiB,KAAAA,aAHkC,IAAIC,WAM7CF,EAAAlB,UAAAqB,uBAAcC,cACjB,OAAO,IAAIC,EAAAA,WAA8B,SAACC,GAClCC,EAAKC,MAAMC,IAAIL,GACfG,EAAKG,eAAeJ,EAAUC,EAAKC,MAAMG,IAAIP,IAE7CG,EAAKN,KAAKU,IAAWP,GAAQQ,UAAU,SAACC,GACpC,IAAIC,EAAUC,EAAkBjB,GAChCe,EAAOG,QAAQ,SAACC,GACK,cAAbA,EAAMC,KACNJ,EAAUC,EAAkBhB,MAGpCQ,EAAKC,MAAMW,IAAIf,EAAQU,GACvBP,EAAKG,eAAeJ,EAAUQ,QAMtCd,EAAAlB,UAAA4B,wBAAeJ,EAAuCQ,GAC1DR,EAASc,KAAKN,GACdR,EAASe,gCA9BhBxB,EAAAA,sDATQyB,EAAAA,mBCATC,EAAA,WAOE,SAAAA,YAEOA,EAAAzC,UAAA0C,6BAAoBC,EAAeC,GACxC,GAAID,GAASC,EACX,OAAOA,EAAgBC,KAAK,SAACC,GAC3B,IAAMC,EAAQD,EAASC,MAAQC,WAAWF,EAASC,OAASE,OAAOC,UAEnE,IADcJ,EAASK,MAAQH,WAAWF,EAASK,OAASF,OAAOG,YACtDT,GAASA,EAAQI,EAAS,OAAO,yBAVrDhC,EAAAA,qDAJD,qCCuBSsC,EAAArD,UAAAsD,4BAAmBC,GACxBA,EAAQC,WAAaD,EAAQE,IAlBH,KAkBiCF,EAAQnB,IAQ9DiB,EAAArD,UAAA0D,2BAAkBF,GACvB,IAAMG,EAAQH,EAAWG,MA3BC,MA4B1B,GAAqB,IAAjBA,EAAMC,OAGR,MAAO,CACLH,IAAKE,EAAM,GACXvB,GAAIuB,EAAM,IAJZE,QAAQC,MAAM,cAAgBN,EAAa,2CAnBhDzC,EAAAA,+BCJG,SAAAgD,8BAF8B,EAGD,oBAArB,UACA7D,KAAK8D,qBAAsB,UAY5BD,EAAA/D,UAAAiE,cAAKC,EAAaC,GACrB,QAAIjE,KAAK8D,sBACLI,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,KAClC,IAYRJ,EAAA/D,UAAAwE,cAAQN,GACX,GAAIhE,KAAK8D,oBAAqB,CAC1B,IAAMjC,EAASqC,aAAaK,QAAQP,GACpC,OAAInC,EACOuC,KAAKI,MAAM3C,GAEf,OAWRgC,EAAA/D,UAAA2E,mBAAaT,GAChB,GAAIhE,KAAK8D,oBAAqB,CAC1B,IAAMjC,EAASqC,aAAaK,QAAQP,GACpC,OAAInC,EACOuC,KAAKI,MAAM3C,GAEf,OAWRgC,EAAA/D,UAAA4E,qBAAYV,GACf,GAAIhE,KAAK8D,oBAAqB,CAC1B,IAAMjC,EAASqC,aAAaK,QAAQP,GACpC,GAAInC,EAAU,OAAOA,EAEzB,OAAO,0BAzEdhB,EAAAA,wDCLK8D,EAAK,kCAQT,SAAAC,IAEE,IADwBC,SAASC,eAAeH,GAC1B,CACpB,IAAMI,EAAOF,SAASG,cAAc,OACpCD,EAAK7C,GAAKyC,EACVI,EAAKE,UAAY,OACjB,IAAMC,EAAWL,SAASM,eAAe,IACzCJ,EAAKK,YAAYF,GACjBL,SAASQ,KAAKD,YAAYL,WAIvBH,EAAA9E,UAAAwF,gBAAOC,GACZC,aAAaxF,KAAKyF,iBAClB,IAAMC,EAAkBb,SAASC,eAAeH,GAChDe,EAAgBC,UAAYJ,EAC5BG,EAAgBT,UAAYS,EAAgBT,UAAU5E,QAAQ,OAAQ,QACtEL,KAAKyF,gBAAkBG,WAAW,WAChCF,EAAgBT,UAAYS,EAAgBT,UAAU5E,QAAQ,OAAQ,SAzBzD,0BAElBQ,EAAAA,wDCLDgF,EAAA,WAUI,SAAAA,EACcC,GAAA9F,KAAA8F,UAAAA,SAGPD,EAAA/F,UAAAiG,mBAAUtD,EAAYuD,QAAA,IAAAA,IAAAA,EAAA,cAEzB,IAAMC,EAAkB,IAAIC,EAAAA,SAASlG,KAAK8F,UAAUK,aAAe,MACnE,IACI,OAAOF,EAAgBF,UAAUtD,EAAOuD,GAC1C,MAAOpC,GAEL,OADAD,QAAQC,MAAMA,GACP,IAAIsC,EAAAA,SAAS,MAAMH,UAAUtD,EAAOuD,yBAjBtDI,EAAAA,KAAIC,KAAA,CAAC,CACFC,KAAM,WACNC,MAAM,+CAJDC,EAAAA,sBAFT,GCgBIC,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAAO,EAA0BR,EAAGC,GAEzB,SAAAQ,IAAgBnH,KAAKoH,YAAcV,EADnCD,EAAcC,EAAGC,GAEjBD,EAAE5G,UAAkB,OAAN6G,EAAaC,OAAOS,OAAOV,IAAMQ,EAAGrH,UAAY6G,EAAE7G,UAAW,IAAIqH,GC1BnF,IAAAG,eAIAC,EAAA,SAAAC,GAMI,SAAAD,EACIE,EACAC,GAFJ,IAAAnG,EAIIiG,EAAAG,KAAA3H,OAAOA,YACPuB,EAAKkG,KAAOA,EAERlG,EAAKmG,GADLA,GAGUD,WAfQG,EAAAA,EAAAA,KAA9B,CAA8BN,GAqB9BO,EAAA,SAAAL,GAII,SAAAK,EACIC,EACAC,GAFJ,IAAAxG,EAIIiG,EAAAG,KAAA3H,OAAOA,YACPuB,EAAKuG,UAAYA,EACjBvG,EAAKwG,eAAiBA,WAVIH,EAAAA,EAAAA,KAAlC,CAAkCN,MCnB9BU,SAAW,YACXC,MAAQ,QACRC,UAAY,YACZC,gBAAkB,kBAClBC,aAAe,eACfC,UAAY,YACZC,cAAgB,gBAChBC,WAAa,aACbC,aAAe,eACfC,UAAY,0BAQZ,SAAAC,mBAF0D,IAAIxH,IAG1DlB,KAAK2I,UAAUxG,IAAIyG,EAAgBZ,SAAU,WACzC,IAAMP,EAA8C,IAAvCoB,IAASC,SAAS,EAAG,SAASC,OACrCrB,EAAuB,IAAlBmB,IAASE,OACpB,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBX,MAAO,WACtC,IAAMR,EAAwC,IAAjCoB,IAASG,QAAQ,OAAOD,OAC/BrB,EAAoC,IAA/BmB,IAASI,MAAM,OAAOF,OACjC,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBV,UAAW,WAC1C,IAAMT,EAA4D,IAArDoB,IAASC,SAAS,EAAG,QAAQE,QAAQ,OAAOD,OACnDrB,EAAwD,IAAnDmB,IAASC,SAAS,EAAG,QAAQG,MAAM,OAAOF,OACrD,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBT,gBAAiB,WAChD,IAAMV,EAA4D,IAArDoB,IAASC,SAAS,EAAG,QAAQE,QAAQ,OAAOD,OACnDrB,EAAoC,IAA/BmB,IAASI,MAAM,OAAOF,OACjC,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBR,aAAc,WAC7C,IAAMX,EAA4C,IAArCoB,IAASG,QAAQ,WAAWD,OACnCrB,EAAwC,IAAnCmB,IAASI,MAAM,WAAWF,OACrC,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBP,UAAW,WAC1C,IAAMZ,EAAiE,IAA1DoB,IAASC,SAAS,EAAG,SAASE,QAAQ,WAAWD,OACxDrB,EAA6D,IAAxDmB,IAASC,SAAS,EAAG,SAASG,MAAM,WAAWF,OAC1D,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBN,cAAe,WAC9C,IAAMb,EAA0C,IAAnCoB,IAASG,QAAQ,SAASD,OACjCrB,EAAsC,IAAjCmB,IAASI,MAAM,SAASF,OACnC,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBL,WAAY,WAC3C,IAAMd,EAAgE,IAAzDoB,IAASC,SAAS,EAAG,UAAUE,QAAQ,SAASD,OACvDrB,EAA4D,IAAvDmB,IAASC,SAAS,EAAG,UAAUG,MAAM,SAASF,OACzD,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBJ,aAAc,WAC7C,IAAMf,EAAyC,IAAlCoB,IAASG,QAAQ,QAAQD,OAChCrB,EAAqC,IAAhCmB,IAASI,MAAM,QAAQF,OAClC,OAAO,IAAIxB,EAASE,EAAMC,KAE9B1H,KAAK2I,UAAUxG,IAAIyG,EAAgBH,UAAW,WAC1C,IAAMhB,EAA8D,IAAvDoB,IAASC,SAAS,EAAG,SAASE,QAAQ,QAAQD,OACrDrB,EAA0D,IAArDmB,IAASC,SAAS,EAAG,SAASG,MAAM,QAAQF,OACvD,OAAO,IAAIxB,EAASE,EAAMC,YAI3BgB,EAAA5I,UAAAoJ,qBAAYC,GACf,GAAInJ,KAAK2I,UAAUlH,IAAI0H,GACnB,OAAOnJ,KAAK2I,UAAUhH,IAAIwH,EAAnBnJ,wBA5DlBa,EAAAA,wDClBDuI,EAAA,WAUI,SAAAA,EACclF,GAAAlE,KAAAkE,aAAAA,SAGPkF,EAAAtJ,UAAAuJ,wBAAeC,EAAoBC,GACtC,IAAMC,EAAexJ,KAAKyJ,YAAYH,GAAUI,iBAAmB,EAC7DjC,EAAoD,IAA7CoB,EAAOU,GAAMT,SAASU,GAAcT,OAC3CrB,EAA6C,IAAxCmB,EAAOU,GAAMI,IAAIH,GAAcT,OAC1C,OAAO,IAAIxB,EAASE,EAAMC,IAGvB0B,EAAAtJ,UAAA8J,kBAASN,GACZ,IAAMO,EAAW7J,KAAKyJ,YAAYH,GAC5B7B,EAAyD,IAAlDoB,EAAOS,EAAS7B,MAAMqB,SAASe,GAAUd,OAChDrB,EAAqD,IAAhDmB,EAAOS,EAAS5B,IAAIoB,SAASe,GAAUd,OAClD,OAAO,IAAIxB,EAASE,EAAMC,IAGvB0B,EAAAtJ,UAAAgK,qBAAYR,GACf,IAAMO,EAAW7J,KAAKyJ,YAAYH,GAC5B7B,EAAoD,IAA7CoB,EAAOS,EAAS7B,MAAMkC,IAAIE,GAAUd,OAC3CrB,EAAgD,IAA3CmB,EAAOS,EAAS5B,IAAIiC,IAAIE,GAAUd,OAC7C,OAAO,IAAIxB,EAASE,EAAMC,IAGvB0B,EAAAtJ,UAAAiK,kBAASC,EAA4BvC,EAAcC,GACtD,IAAM4B,EAAWtJ,KAAKiK,yBAAyBD,GAC/C,OAAIV,EAAS7B,MAAQC,GAAM4B,EAAS5B,IAAMD,GAMvC2B,EAAAtJ,UAAAmK,kCAAyBD,GAC5B,GAAIA,aAAwBzC,EACxB,OAAOyC,EACJ,GAAIA,aAAwBnC,EAAc,CAC7C,IAAMgC,EAAWhB,EAAOgB,SAASG,EAAajC,eAAiB,GACzDN,EAAkE,IAA3DoB,EAAOmB,EAAalC,WAAWgB,SAASe,GAAUd,OACzDrB,EAA2D,IAAtDmB,EAAOmB,EAAalC,WAAW6B,IAAIE,GAAUd,OACxD,OAAO,IAAIxB,EAASE,EAAMC,GAE1B/D,QAAQC,MAAM,yBAIfwF,EAAAtJ,UAAAoK,6BAAoBZ,EAAoBa,GAC3C,IAAMC,EAAiBpK,KAAKyJ,YAAYH,GAAUI,iBAC5CjC,EAAwE,IAAjEoB,EAAOS,EAAS7B,MAAMqB,SAASsB,EAAiBD,GAAQpB,OAC/DrB,EAA+D,IAA1DmB,EAAOS,EAAS5B,IAAIiC,IAAIS,EAAiBD,GAAQpB,OAC5D,OAAO,IAAIxB,EAASE,EAAMC,IAGvB0B,EAAAtJ,UAAAuK,sBAAaC,EAAehB,GAC/BtJ,KAAKkE,aAAaH,KAAKuG,EAAOhB,IAG3BF,EAAAtJ,UAAAyK,sBAAaD,GAChB,IAAME,EAAOxK,KAAKkE,aAAaI,KAAKgG,GACpC,OAAIE,EACOC,EAAAA,aAA+BlD,EAAUiD,GAE7C,MAGJpB,EAAAtJ,UAAA4K,wBACH,IAAMC,EAAM,IAAIC,KACVC,EAA4C,IAApChC,EAAO8B,GAAK3B,QAAQ,OAAOD,OACnC+B,EAAwC,IAAlCjC,EAAO8B,GAAK1B,MAAM,OAAOF,OACrC,OAAO,IAAIxB,EAASsD,EAAOC,IAGvB1B,EAAAtJ,UAAA2J,qBAAYH,GAChB,IAAM7B,EAAOoB,EAAOS,EAAS7B,MACvBC,EAAKmB,EAAOS,EAAS5B,IAC3B,OAAOmB,EAAOgB,SAASnC,EAAGqD,KAAKtD,yBA9EtC5G,EAAAA,sDAHQgD,OAJT,GCAAmH,EAAA,oDAaCC,EAAAA,SAAQ5E,KAAA,CAAC,CACR6E,aAAc,CACZrF,GAEFsF,QAAS,CACPC,EAAAA,kBAEFC,QAAS,CACPxF,GAEFyF,UAAW,CACTzL,EACAmB,EACA0H,EACAvF,EACAU,EACAe,EACArC,EACA6G,SA/BJ,GCKAmC,EAAA,gCAEcA,EAAAzL,UAAA0L,iBAAV,SAA2BpK,EAAgBqK,EAAkBvJ,GAEzD,IAAIwJ,EAAatK,EAASqK,EAE1B,OADIvJ,IAAMwJ,GAAc,IAAMxJ,GACvBwJ,GAGDH,EAAAzL,UAAA6L,sBAAV,SAAgCrC,GAC5B,OAAOsC,UAAU/C,EAAOS,EAAS7B,MAAMoE,SAAW,IAAMhD,EAAOS,EAAS5B,IAAImE,WAGtEN,EAAAzL,UAAAgM,sBAAV,SAAgCC,GAC5B,IAAMC,EAAU,IAAIC,EAAAA,YACpB,OAAIF,EAAgBC,EAAQ7J,IAAI,gBAAiB4J,GAC1CC,KAhBf,GCHAE,EAAA,wCAEkC,uBAEU,IAAIhL,WAErCgL,EAAApM,UAAAqM,oBAAW7I,EAAoB8I,GAClC,GAAIpM,KAAKqM,WAAWC,QAAQhJ,GAAc,EACtCtD,KAAKqM,WAAWE,KAAKjJ,GACjB8I,EACApM,KAAKwM,eAAerK,IAAImB,EAAY8I,GAEpCpM,KAAKwM,eAAerK,IAAImB,EAAYtD,KAAKyM,aAAanJ,IAE1DtD,KAAK0M,iBACF,GAAIN,aAAmBrF,MAAO,CACjC,IAAM4F,EAAQ3M,KAAKwM,eAAe7K,IAAI2B,GACtC8I,EAAQpK,QAAQ,SAAC4K,GAAM,OAAAD,EAAKJ,KAAKK,KACjC5M,KAAK0M,cAINR,EAAApM,UAAA+M,6BACH7M,KAAKqM,WAAW3I,OAAS,EACzB1D,KAAKwM,eAAeM,QACpB9M,KAAK0M,aAGFR,EAAApM,UAAAiN,uBAAczJ,GACjB,IAAM0J,EAAahN,KAAKqM,WAAWC,QAAQhJ,IACzB,EAAd0J,IACAhN,KAAKqM,WAAWY,OAAOD,EAAY,GACnChN,KAAKwM,eAAeU,UAAO5J,IAE/BtD,KAAK0M,aAGFR,EAAApM,UAAAqN,uBACH,OAAgC,EAAzBnN,KAAKqM,WAAW3I,QAGpBwI,EAAApM,UAAAsN,8BAAqBhB,EAAY9I,GACpCtD,KAAKwM,eAAerK,IAAImB,EAAY8I,GACpCpM,KAAK0M,eA3Cb,GCGAW,EAAA,SAAA7F,GAEI,SAAA6F,EACcC,GADd,IAAA/L,EAGIiG,EAAAG,KAAA3H,OAAOA,YAFGuB,EAAA+L,IAAAA,WAHsF1F,EAAAA,EAAAA,GAQ7FyF,EAAAvN,UAAAqM,oBAAW7I,EAAoB8I,cAC9BA,GACApM,KAAKqM,WAAWE,KAAKjJ,GACrBtD,KAAKwM,eAAerK,IAAImB,EAAY8I,IAC7BpM,KAAKqM,WAAWC,QAAQhJ,GAAc,GAC7CtD,KAAKsN,IAAIC,gCAAgCjK,GAAY1B,UACjD,SAAC4L,GAAe,OAAAjM,EAAKkM,iBAAiBD,IACtC,SAAC5J,GACGrC,EAAK+L,IAAII,uBAAuBpK,GAAY1B,UACxC,SAACyB,GAAY,OAAA9B,EAAKkM,iBAAiBpK,QAO/CgK,EAAAvN,UAAA2N,0BAAiBpK,GACrBrD,KAAKqM,WAAWE,KAAKlJ,EAAQC,YAC7BtD,KAAKwM,eAAerK,IAAIkB,EAAQC,WAAYtD,KAAK2N,8BAA8BtK,KAG3EgK,EAAAvN,UAAA6N,uCAA8BtK,GAClC,IAAM+I,EAAUpM,KAAKyM,aAAapJ,EAAQC,YAC1C,GAAID,EAAQuK,eAIR,OAHIvK,EAAQuK,eAAeC,YAAcxK,EAAQuK,eAAeC,WAAWrN,QACvE4L,EAAQ5L,MAAQ6C,EAAQuK,eAAeC,WAAWrN,OAE9C6C,EAAQuK,eAAeE,WAC3B,IAAK,OACD9N,KAAK+N,yBAAyB1K,EAA4C,eAAE+I,GAC5E,MACJ,IAAK,MACDpM,KAAKgO,wBAAwB3K,EAA2C,eAAE+I,GAMtF,OAAA,GAIIiB,EAAAvN,UAAAiO,kCAAyBE,EAA+B7B,GACxD6B,EAAUJ,WAAWK,QACrB9B,EAAQ+B,UAAYzN,KAAK0N,MAAMtL,WAAWmL,EAAUJ,WAAWK,UAI/Db,EAAAvN,UAAAkO,iCAAwBK,EAA6BjC,GACrDiC,EAASR,WAAWK,QACpB9B,EAAQ+B,UAAYzN,KAAK0N,MAAMtL,WAAWuL,EAASR,WAAWK,YA1D1E,CAAwGhC,GCexGoC,EAAA,gCAEWA,EAAAxO,UAAAyO,mBAAUvK,GACb,OAAOwK,mBAAmBxK,IAGvBsK,EAAAxO,UAAA2O,qBAAYhM,GACf,OAAO+L,mBAAmB/L,IAGvB6L,EAAAxO,UAAA4O,mBAAU1K,GACb,OAAOA,GAGJsK,EAAAxO,UAAA6O,qBAAYlM,GACf,OAAOA,KAff,GAmBAmM,EAAA,SAAApH,GAEI,SAAAoH,EACcC,EACA/I,GAFd,IAAAvE,EAGIiG,EAAAG,KAAA3H,OAAOA,YAFGuB,EAAAsN,YAAAA,EACAtN,EAAAuE,UAAAA,WAJgC8B,EAAAA,EAAAA,GAkCpCgH,EAAA9O,UAAAgP,WAAV,SACIvL,EAAawL,EAA8B3C,GAE3C,YAFa,IAAA2C,IAAAA,EAAA,SAA8B,IAAA3C,IAAAA,EAAA,IAEpCpM,KAAK6O,YAAYG,OAAO5C,GAASzK,IAAO4B,EAC3C,CACIwL,OAAQ/O,KAAKiP,cAAcF,GAC3B/C,QAAShM,KAAK8L,sBAAsBM,EAAQ8C,mBAK9CN,EAAA9O,UAAAmP,cAAV,SAAwBF,GAChB/O,KAAK8F,WAAa9F,KAAK8F,UAAUK,cACjC4I,EAAM,OAAU/O,KAAK8F,UAAUK,aAEnC,IAAIgJ,EAAa,IAAIC,EAAAA,WAAW,CAC5BC,QAAS,IAAIf,IAIjB,OAFA1H,OAAO0I,oBAAoBP,GACtB/M,QAAQ,SAACgC,GAAQ,OAAAmL,EAAaA,EAAWhN,IAAI6B,EAAK+K,EAAO/K,MACvDmL,KAtDf,CAAkD5D,GCxBlDgE,eASAC,eAKAC,eAiCAC,EAAA,SAAAlI,sEAAmDI,EAAAA,EAAAA,KAAnD,CAAmD2H,GAInDI,eAgBAC,2BAYqB,GAoBrBC,eC5GaC,EAA4B,IAAIC,EAAAA,eAAuC,0CAiBhF,SAAAC,EACcC,EACqCC,GADrClQ,KAAAiQ,YAAAA,EAGV,IAAIE,EAA8B,CAC9BC,OAAQ,SAACC,EAAKjE,GAAY,OAAA6D,EAAYG,OAAOC,KAE7CH,IACAC,EAAUD,EAAaI,YAAY,SAAClO,EAAMmO,GAAgB,MAAA,CACtDH,OAAQ,SAACC,EAAKjE,GAAY,OAAAmE,EAAYC,UAAUH,EAAKjE,EAAShK,MAC9D+N,IAERnQ,KAAKmQ,QAAUA,SAGZH,EAAAlQ,UAAAkP,gBAAO5C,cACV,YADU,IAAAA,IAAAA,EAAA,IACH,IAAI9J,EAAAA,WAAW,CAClB8N,OAAQ,SAACC,GAAQ,OAAA9O,EAAK4O,QAAQC,OAAOC,EAAKjE,2BAxBrDvL,EAAAA,WAAUwF,KAAA,CAAC,CACRoK,WAAY,oDAjBgBC,EAAAA,+CAyBvBC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMxK,KAAA,CAACyJ,qKCExB,SAAAgB,EACcC,EACAC,EACAlL,GAHd,IAAAvE,EAKIiG,EAAAG,KAAA3H,KAAM+Q,EAAajL,IAAU9F,YAJnBuB,EAAAwP,YAAAA,EACAxP,EAAAyP,kBAAAA,EACAzP,EAAAuE,UAAAA,WAL2B8B,EAAAA,EAAAA,GAUlCkJ,EAAAhR,UAAAmR,qBAAY7P,EAAgB2N,EAA0B3C,GACzD,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,YAM1C,OALI2N,EACAA,EAAOmC,UAAW,EAElBnC,EAAS,CAAEmC,UAAU,GAElBlR,KAAK8O,WAAsBvL,EAAKwL,EAAQ3C,GAAS+E,KACpDC,EAAAA,IAAI,SAACvP,GAED,OADAA,EAAOG,QAAQ,SAACC,GAAU,OAAAA,EAAMb,OAASA,IAClCS,MAIZiP,EAAAhR,UAAAuR,oBACHnP,EACAd,EACA2N,EACA3C,GAEA,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,WAAYc,GACtD,OAAOlC,KAAK8O,WAAoBvL,EAAKwL,EAAQ3C,GAAS+E,KAClDC,EAAAA,IAAI,SAACvP,GAED,OADAA,EAAOT,OAASA,EACTS,MAIZiP,EAAAhR,UAAAwR,qBAAYlQ,EAAgB2N,EAA0B3C,GACzD,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,YAC1C,OAAOpB,KAAK8O,WAAsBvL,EAAKwL,EAAQ3C,IAG5C0E,EAAAhR,UAAAyR,oBACHrP,EACAd,EACA2N,EACA3C,GAEA,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,WAAYc,GACtD,OAAOlC,KAAK8O,WAAoBvL,EAAKwL,EAAQ3C,IAG1C0E,EAAAhR,UAAA0R,uBAAcpQ,EAAgB2N,EAA0B3C,cACrD7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,cAC1C,OAAO,IAAIC,EAAAA,WAAyB,SAACC,GACjCC,EAAKkQ,iBAAiBlO,EAAKwL,EAAQ3C,GAASxK,UACxC,SAACC,GACG,IAAM6P,EAAiBC,EAAAA,iBAA6B/B,EAAY/N,GAChE6P,EAAe1P,QAAQ,SAACC,GACpBA,EAAMsB,IAAMnC,EACZG,EAAKyP,kBAAkB5N,mBAAmBnB,KAE9CX,EAASc,KAAKsP,IAElB,SAAC9N,GAAU,OAAAtC,EAASsC,MAAMA,IAC1B,WAAM,OAAAtC,EAASe,gBAKpByO,EAAAhR,UAAA8R,2BAAkBxQ,EAAgByQ,EAAevI,EAAoB8C,cAClE7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,sBAC1C,OAAO,IAAIC,EAAAA,WAA6B,SAACC,GACrCC,EAAKuQ,qBAAqBvO,EAAK,CAC3B+F,SAAU/H,EAAKoK,sBAAsBrC,GACrCkE,WAAYqE,GACbzF,GAASxK,UACR,SAACC,GACG,IAAM6P,EAAmC,GACzC,IAAK,IAAMxP,KAAML,EACTK,GACAwP,EAAenF,KACX,CACIrK,GAAIA,EACJqB,IAAKnC,EACL2Q,KAAMlQ,EAAOK,GAAI8P,SAKjC1Q,EAASc,KAAKsP,IAElB,SAAC9N,GAAU,OAAAtC,EAASsC,MAAMA,IAC1B,WAAM,OAAAtC,EAASe,gBAKpByO,EAAAhR,UAAAmS,6BAAoB/P,EAAYd,EAAgB2N,cAC7CxL,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,aAAcc,GACxD,OAAOlC,KAAKyR,iBAAiBlO,EAAKwL,GAAQoC,KAAKC,EAAAA,IAAI,SAACvP,GAChD,IAAM2L,EAAa0E,EAAAA,YAAwBtC,EAAY/N,GAGvD,OAFA2L,EAAWjK,IAAMnC,EACjBG,EAAKyP,kBAAkB5N,mBAAmBoK,GACnCA,MAIRsD,EAAAhR,UAAAyN,yCAAgCjK,EAAoByL,GACvD,IAAMoD,EAAanS,KAAKgR,kBAAkBxN,kBAAkBF,GAC5D,OAAOtD,KAAKiS,oBAAoBE,EAAWjQ,GAAIiQ,EAAW5O,IAAKwL,IAG5D+B,EAAAhR,UAAAsS,6BAAoBlQ,EAAYd,GACnC,IAAMmC,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,aAAcc,GACxD,OAAOlC,KAAK8O,WAA6BvL,EAAM,YAG5CuN,EAAAhR,UAAAuS,mBACHnQ,EACAd,EACAkI,EACAyF,EACA3C,QADA,IAAA2C,IAAAA,EAAA,IAGA,IAAMxL,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,aAAcc,GAAM,WAE9D,OADA6M,EAAOzF,SAAWtJ,KAAK2L,sBAAsBrC,GACtCtJ,KAAK8O,WAAoBvL,EAAKwL,EAAQ3C,GAAS+E,KAClDC,EAAAA,IAAI,SAACkB,GAED,OADIvD,EAAOmC,WAAYoB,EAAMA,EAAIpQ,IAC1BoQ,MAIZxB,EAAAhR,UAAAyS,uBAAcnR,EAAgB2N,EAA0B3C,GAC3D,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,cAC1C,OAAOpB,KAAK8O,WAAuBvL,EAAKwL,EAAQ3C,IAG7C0E,EAAAhR,UAAA0S,qBAAYtQ,EAAYd,EAAgB2N,GAE3C,MAAM,IAAI0D,MAAM,oBAKb3B,EAAAhR,UAAA4S,sBAAatR,EAAgB2N,EAA0B3C,GAC1D,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,aAC1C,OAAOpB,KAAK8O,WAAyBvL,EAAKwL,EAAQ3C,IAG/C0E,EAAAhR,UAAA6S,uBACHzQ,EACAd,EACA2N,EACA3C,GAEA,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,YAAac,GACvD,OAAOlC,KAAK8O,WAAuBvL,EAAKwL,EAAQ3C,IAG7C0E,EAAAhR,UAAA8S,sBAAaxR,EAAgB2N,EAA0B3C,GAC1D,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,aAC1C,OAAOpB,KAAK8O,WAAuBvL,EAAKwL,EAAQ3C,IAG7C0E,EAAAhR,UAAA+S,qBACH3Q,EACAd,EACA2N,EACA3C,GAEA,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,YAAac,GACvD,OAAOlC,KAAK8O,WAAqBvL,EAAKwL,EAAQ3C,IAG3C0E,EAAAhR,UAAAgT,qBAAY1R,EAAgB2N,EAA0B3C,GACzD,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,YAC1C,OAAOpB,KAAK8O,WAAsBvL,EAAKwL,EAAQ3C,IAG5C0E,EAAAhR,UAAAiT,oBACH7Q,EACAd,EACA2N,EACA3C,GAEA,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,WAAYc,GACtD,OAAOlC,KAAK8O,WAAoBvL,EAAKwL,EAAQ3C,IAG1C0E,EAAAhR,UAAAkT,uBAAc5R,EAAgB2N,EAA0B3C,GAC3D,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,cAC1C,OAAOpB,KAAK8O,WAAwBvL,EAAKwL,EAAQ3C,IAG9C0E,EAAAhR,UAAAmT,sBACH/Q,EACAd,EACA2N,EACA3C,GAEA,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,aAAcc,GACxD,OAAOlC,KAAK8O,WAAsBvL,EAAKwL,EAAQ3C,IAG5C0E,EAAAhR,UAAAoT,sBAAa9R,EAAgB2N,EAA0B3C,GAC1D,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,aAC1C,OAAOpB,KAAK8O,WAAuBvL,EAAKwL,EAAQ3C,IAG7C0E,EAAAhR,UAAAqT,qBACHjR,EACAd,EACA2N,EACA3C,GAEA,IAAM7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,YAAac,GACvD,OAAOlC,KAAK8O,WAAqBvL,EAAKwL,EAAQ3C,IAG3C0E,EAAAhR,UAAAsT,qBAAYhS,EAAgB2N,EAA0B3C,cACnD7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,YAC1C,OAAOpB,KAAK8O,WAAsBvL,EAAKwL,EAAQ3C,GAAS+E,KACpDC,EAAAA,IAAI,SAACiC,GAAS,OAAAA,EAAKjC,IAAI,SAACnP,GAAU,OAAAV,EAAK+R,eAAerR,EAAOb,SAI9D0P,EAAAhR,UAAAyT,oBAAWrR,EAAYd,EAAgB2N,EAA0B3C,cAC9D7I,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,WAAYc,GACtD,OAAOlC,KAAK8O,WAAoBvL,EAAKwL,EAAQ3C,GAAS+E,KAClDC,EAAAA,IAAI,SAACkB,GAAQ,OAAA/Q,EAAK+R,eAAehB,EAAKlR,OAIvC0P,EAAAhR,UAAA4N,gCAAuBpK,EAAoByL,EAA0B3C,GACxE,IAAM+F,EAAanS,KAAKgR,kBAAkBxN,kBAAkBF,GAC5D,OAAOtD,KAAKuT,WAAWpB,EAAWjQ,GAAIiQ,EAAW5O,IAAKwL,EAAQ3C,IAG3D0E,EAAAhR,UAAA0T,iBACHtR,EACAd,EACAkI,EACAyF,EACA3C,QADA,IAAA2C,IAAAA,EAAA,IAGA,IAAMxL,EAAMvD,KAAKwL,iBAAiBpK,EAAQ,WAAYc,GAAM,QAE5D,OADA6M,EAAOzF,SAAWtJ,KAAK2L,sBAAsBrC,GACtCtJ,KAAK8O,WAAoBvL,EAAKwL,EAAQ3C,IAWzC0E,EAAAhR,UAAA2R,0BAAiBlO,EAAawL,EAA8B3C,GAChE,YADkC,IAAA2C,IAAAA,EAAA,SAA8B,IAAA3C,IAAAA,EAAA,IACzDpM,KAAK+Q,YAAY/B,OAAO5C,GAASzK,IAAI4B,EAAK,CAC7CwL,OAAQ/O,KAAKiP,cAAcF,GAC3B0E,aAAc,UAId3C,EAAAhR,UAAAgS,8BAAqBvO,EAAawL,EAA8B3C,GACpE,YADsC,IAAA2C,IAAAA,EAAA,SAA8B,IAAA3C,IAAAA,EAAA,IAC7DpM,KAAK+Q,YAAY/B,SAAS0E,KAAKnQ,EAAKwL,EAAQ,CAC/C0E,aAAc,UAId3C,EAAAhR,UAAAwT,wBAAeK,EAAqBvS,GACxC,IAAMiC,EAAU6O,EAAAA,YAAqBvC,EAASvL,KAAKC,UAAUsP,IAO7D,OANAtQ,EAAQE,IAAMnC,EACdpB,KAAKgR,kBAAkB5N,mBAAmBC,GACtCA,EAAQuQ,mBACRvQ,EAAQwQ,WAAaxQ,EAAQuQ,wBACtBvQ,EAAQuQ,kBAEZvQ,uBA3RdxC,EAAAA,sDAHQmP,SACA7M,SAnBAqD,EAAAA,uBAsBoCoI,iBCTzC,SAAAkF,EACc/C,EACAC,EACAlL,GAHd,IAAAvE,EAKIiG,EAAAG,KAAA3H,KAAM+Q,EAAaC,EAAmBlL,IAAU9F,YAJtCuB,EAAAwP,YAAAA,EACAxP,EAAAyP,kBAAAA,EACAzP,EAAAuE,UAAAA,WALmC8B,EAAAA,EAAAA,GAU1CkM,EAAAhU,UAAAuS,mBACHnQ,EACAd,EACAkI,EACAyF,EACA3C,QADA,IAAA2C,IAAAA,EAAA,IAGA,IAAMgF,EAAgBlL,EAAOgB,SAAS,EAAG,QAAQH,iBACjD,GAAKJ,EAAS5B,GAAK4B,EAAS7B,KAAQsM,EAAe,CAI/C,IAHA,IAAMC,EAAuC,GACzCnJ,EAAQhC,EAAOS,EAAS7B,MAAMuB,QAAQ,QACtC8B,EAAMjC,EAAOS,EAAS7B,MAAMwB,MAAM,QAC/B4B,EAAMoJ,SAASpL,EAAOS,EAAS5B,MAAM,CACxC,IAAMwM,EAAY,IAAI3M,EAAwB,IAAfsD,EAAM9B,OAA4B,IAAb+B,EAAI/B,QACxDiL,EAASzH,KAAK/E,EAAA1H,UAAMuS,UAAS1K,KAAA3H,KAAIkC,EAAId,EAAQ8S,EAAWnF,EAAQ3C,IAChEvB,EAAQC,EAAInB,IAAI,EAAG,eACnBmB,EAAMjC,EAAOgC,GAAO5B,MAAM,QAE9B,OAAOkL,EAAAA,SAASH,GAAU7C,KAAKC,EAAAA,IAAI,SAACnP,GAChC,OAAOA,EAAMmS,OAAO,SAACC,EAAUC,GAC3B,IAAMlS,EAAgB,CAClBmS,gBAAiB,GACjBvC,OAAQqC,EAASrC,OAAOwC,OAAOF,EAAQtC,SAE3C,IAAK,IAAMhO,KAAOqQ,EAASE,gBACnBF,EAASE,gBAAgBtN,eAAejD,KACxC5B,EAAKmS,gBAAgBvQ,GAAOqQ,EAASE,gBAAgBvQ,GAAKwQ,OAAOF,EAAQC,gBAAgBvQ,KAGjG,OAAO5B,OAIf,OAAOoF,EAAA1H,UAAMuS,UAAS1K,KAAA3H,KAAIkC,EAAId,EAAQkI,EAAUyF,EAAQ3C,wBA5CnEvL,EAAAA,sDAHQmP,SACA7M,SAVAqD,EAAAA,uBAa4CsK,GCZrD2D,EAEI,SACc3O,GADd,IAAAvE,EAAAvB,KACcA,KAAA8F,UAAAA,EAEV9F,KAAK8F,UAAU4O,aAAa9S,UAAU,WAAM,OAAAL,EAAKoT,kCCKrD,SAAAC,EACc9O,GAAA9F,KAAA8F,UAAAA,SAGP8O,EAAA9U,UAAA+U,qBAAYC,GACXA,EAAO,cACP9U,KAAK+U,kBAINH,EAAA9U,UAAAkV,qBAAYC,GACfjV,KAAK8F,UAAUoP,IAAID,EAAKE,MACxBnV,KAAK+U,kBAGDH,EAAA9U,UAAAiV,qCACJ/U,KAAKmG,YAAcnG,KAAKoV,aAAazS,KAAK,SAACiK,GAAM,OAAAA,EAAEuI,OAAS5T,EAAKuE,UAAUK,qDArB9EkP,EAAAA,cCGLC,eCPAC,eAUAC,kBCDIC,YAAA,OAAAA,aAAW,cCVf,IAAAC,eCGAC,EA+EI,SACIrS,EACA9C,iBA5DsB,sBAOO,uBAOC,2BAOH,mBAOD,2BAOuB,oBAOxB,iBAOF,EAavBR,KAAKsD,WAAaA,EAClBtD,KAAKQ,MAAQA,GAIrBoV,eAeAC,GAAA,SAAArO,GAGI,SAAAqO,EACIvS,EACA9C,EACAsH,GAHJ,IAAAvG,EAKIiG,EAAAG,KAAA3H,KAAMsD,EAAY9C,IAAMR,YACxBuB,EAAKuG,UAAYA,WATgBF,EAAAA,EAAAA,KAAzC,CAAyC+N,GC5GzCG,GAAA,mCAEoC,IAAI5U,WAE7B4U,EAAAhW,UAAA2B,aAAIS,GACP,OAAOlC,KAAKwB,MAAMC,IAAIS,IAGnB4T,EAAAhW,UAAA6B,aAAIO,GACP,OAAOlC,KAAKwB,MAAMG,IAAIO,IAGnB4T,EAAAhW,UAAAqC,aAAID,EAAYO,GACnBzC,KAAKwB,MAAMW,IAAID,EAAIO,MAb3B,GCEA,IAAAsT,GAAA,gCAIWA,EAAAjW,UAAAkW,0BAAiBC,GACpBjW,KAAKkW,iBAAiBC,KAAKF,MALnC,sCCGWG,EAAAtW,UAAAuW,eADP,SACsBC,GAClBtW,KAAKuW,oDAFRC,EAAAA,aAAYnQ,KAAA,CAAC,gBAAiB,CAAC,mBCmB9BoQ,GAAQC,QAAQ,6BAgFlB,SAAAC,EACcC,EACAtJ,EACAuJ,EACAC,EACAC,GALd,IAAAxV,EAOIiG,EAAAG,KAAA3H,OAAOA,YANGuB,EAAAqV,gBAAAA,EACArV,EAAA+L,IAAAA,EACA/L,EAAAsV,kBAAAA,EACAtV,EAAAuV,SAAAA,EACAvV,EAAAwV,iBAAAA,eAvEgB,wBAMQ,uBAgCa,IAAIC,EAAAA,iCAMJ,IAAIA,EAAAA,+BAME,IAAIA,EAAAA,gCAMZ,IAAIA,EAAAA,aAkBjDzV,EAAK0V,iBAAmB1V,EAAKqV,gBAAgBjU,KAAK,IAAI0E,SACtD9F,EAAK2V,yBAA2B3V,EAAKqV,gBAAgBjU,KAAK,IAAI0E,SAC9D9F,EAAK4V,uBAAyB5V,EAAKwV,iBAAiBrC,aAAa9S,UAAU,SAACwV,GAAqC,OAAA7V,EAAK8V,kBAAkBD,cAlFpIxP,EAAAA,EAAAA,GAqFD+O,EAAA7W,UAAA+U,qBAAYC,GACXA,EAAO,cAAiB9U,KAAKgK,eAC7BhK,KAAKsJ,SAAWtJ,KAAK8W,SAAS7M,yBAAyBjK,KAAKgK,cAC5DhK,KAAKsX,uBAELxC,EAAO,mBAAsB9U,KAAKuX,mBAAyD,EAApCvX,KAAKwX,sBAAsB9T,QAClF1D,KAAKwX,sBAAsBxX,KAAKuX,oBAIjCZ,EAAA7W,UAAA2X,uBACHzX,KAAKmX,uBAAuBO,eAGzBf,EAAA7W,UAAA6X,gCACGC,EAAoB5X,KAAKiX,iBAAiBlM,KAAK/K,KAAKqM,YACtDuL,IACAA,EAAkBC,iBAAiB,SAACC,GAChCvW,EAAKwW,uBAAuBD,EAAUE,QAE1CJ,EAAkBK,mBAAmB,SAACC,GAClC3W,EAAKwL,cAAcmL,EAAYF,SAIvC,IAAMG,EAA4BnY,KAAKkX,yBAAyBnM,KAAK/K,KAAKoY,oBAU1E,GATID,IACAA,EAA0BN,iBAAiB,SAACC,GACxCvW,EAAK8W,cAAcP,EAAUE,QAEjCG,EAA0BF,mBAAmB,SAACC,GAC1C3W,EAAK+W,iBAAiBJ,EAAYF,UAIrCvB,GAAMzW,KAAKuY,oBAAqBvY,KAAKwY,kBAAmB,CACzDxY,KAAKuY,oBAAsB3R,OAAO6R,OAAO,GAAIzY,KAAKwY,kBAClD,IAAMpM,EAAUxF,OAAO6R,OAAO,GAAIzY,KAAKwY,kBACvCxY,KAAK0Y,wBAAwBtM,GAGjC,GAAIpM,KAAKwM,eAAgB,CACrB,IAAMmM,EAAc3Y,KAAK4Y,oBAAsBC,UAC3CF,IAAe3Y,KAAK4Y,kBAAoB,IAAI1X,KAChDlB,KAAKwM,eAAexK,QAAQ,SAACS,EAAOuB,GAC3ByS,GAAMhU,EAAOlB,EAAKqX,kBAAkBjX,IAAIqC,MACzCzC,EAAKqX,kBAAkBzW,IAAI6B,EAAK4C,OAAO6R,OAAO,GAAIlX,EAAKiL,eAAe7K,IAAIqC,KAC1EzC,EAAKuX,sBAAsB9U,EAAKvB,EAAOkW,QAQ7ChC,EAAA7W,UAAAiY,uBAAV,SAAiCzU,GAC7B,IAAMyV,EAAgB/Y,KAAK6W,kBAAkBrT,kBAAkBF,GAC/DtD,KAAKmM,WAAW4M,EAAc7W,GAAI6W,EAAcxV,0CAzInD8R,EAAAA,kCAMAA,EAAAA,4BAMAA,EAAAA,8BAMAA,EAAAA,gCAOAA,EAAAA,iCAOAA,EAAAA,iCAMA2D,EAAAA,kCAMAA,EAAAA,gCAMAA,EAAAA,iCAMAA,EAAAA,aA7DO5C,QC9BR6C,MAAA,EACAC,KAAA,SADAD,OAAK,cACLC,MAAI,OCAR,IAAAC,GAAA,WAII,SAAAA,IAEInZ,KAAKoZ,SAAQ,UAGVD,EAAArZ,UAAAuZ,uBACH,OAAOrZ,KAAKoZ,UAGND,EAAArZ,UAAAwZ,YAAV,SAAsBF,GAClBpZ,KAAKoZ,SAAWA,KAdxB,iBCYE,SAAAG,EACUC,GAAAxZ,KAAAwZ,WAAAA,YAHe,UASlBD,EAAAzZ,UAAA2Z,oBACL,OAAOzZ,KAAK0Z,QAAQ1Z,KAAK2Z,OAOpBJ,EAAAzZ,UAAA8Z,kBAASrW,GACd,OAAOvD,KAAK6Z,WAAWtW,IAOlBgW,EAAAzZ,UAAAga,mBAAUH,GACf,OAAO3Z,KAAK0Z,QAAQC,IAMfJ,EAAAzZ,UAAAia,gBAAOxW,IAEG,IADDvD,KAAK2Z,KAAKrN,QAAQ/I,IACZvD,KAAK2Z,KAAKpN,KAAKhJ,IAM9BgW,EAAAzZ,UAAAka,mBAAUzW,GACf,IAAM0W,EAAQja,KAAK2Z,KAAKrN,QAAQ/I,IACnB,EAAT0W,GAAcja,KAAK2Z,KAAK1M,OAAOgN,EAAO,IAGpCV,EAAAzZ,UAAA+Z,oBAAWtW,cACjB,OAAO,IAAIlC,EAAAA,WAAW,SAACC,GACrBC,EAAKiY,WAAW7X,IAAI4B,GAAK3B,UACvB,SAAC0Q,GACChR,EAASc,KAAK,MACdd,EAASe,YAEX,SAACuB,GACCtC,EAASc,KAAKmB,GACdjC,EAASe,gBAMTkX,EAAAzZ,UAAA4Z,iBAAQC,cACR3F,EAAsC,GAE5C,OADA2F,EAAK3X,QAAQ,SAACuB,GAAQ,OAAAyQ,EAASzH,KAAKhL,EAAKsY,WAAWtW,MAC7C4Q,EAAAA,SAASH,GAAU7C,KACxBC,EAAAA,IAAI,SAAC8I,GACH,OAAOA,EAAYC,OAAO,SAAClY,GACzB,GAAIA,EACF,OAAOA,4BAtElBpB,EAAAA,sDATQyB,EAAAA,kqBTCL8X,WAAa,aACbC,OAAS,SACTC,aAAe,+BAIfC,SAAW,WACXC,gBAAkB,yLURtB,SAAsBC,GAClB,OAAO,SAACC,GACJD,EAAUzY,QAAQ,SAAC2Y,GACf/T,OAAO0I,oBAAoBqL,EAAS7a,WAAWkC,QAAQ,SAACsE,GACpDoU,EAAY5a,UAAUwG,GAAQqU,EAAS7a,UAAUwG","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ColorService {\n\n    /**\n     * Creates a random color and return it as a hex string.\n     */\n    public getColor(): string {\n        return this.getRandomColor();\n    }\n\n    /**\n     * Converts a hex string and opacity in percent to RGBA color as string.\n     */\n    public convertHexToRGBA(hex: string, opacity: number): string {\n        hex = hex.replace('#', '');\n        const r = parseInt(hex.substring(0, 2), 16);\n        const g = parseInt(hex.substring(2, 4), 16);\n        const b = parseInt(hex.substring(4, 6), 16);\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';\n    }\n\n    private getRandomColor(): string {\n        const letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nexport enum DatasetApiVersion {\n    V1,\n    V2\n}\n\n@Injectable()\nexport class DatasetApiMapping {\n\n    private cache: Map<string, DatasetApiVersion> = new Map<string, DatasetApiVersion>();\n\n    constructor(\n        protected http: HttpClient\n    ) { }\n\n    public getApiVersion(apiUrl: string): Observable<DatasetApiVersion> {\n        return new Observable<DatasetApiVersion>((observer: Observer<DatasetApiVersion>) => {\n            if (this.cache.has(apiUrl)) {\n                this.confirmVersion(observer, this.cache.get(apiUrl));\n            } else {\n                this.http.get<any[]>(apiUrl).subscribe((result) => {\n                    let version = DatasetApiVersion.V1;\n                    result.forEach((entry) => {\n                        if (entry.id === 'platforms') {\n                            version = DatasetApiVersion.V2;\n                        }\n                    });\n                    this.cache.set(apiUrl, version);\n                    this.confirmVersion(observer, version);\n                });\n            }\n        });\n    }\n\n    private confirmVersion(observer: Observer<DatasetApiVersion>, version: DatasetApiVersion) {\n        observer.next(version);\n        observer.complete();\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StatusInterval } from '../../model/dataset-api/dataset';\n\n@Injectable()\nexport class StatusIntervalResolverService {\n\n  constructor() { }\n\n  public getMatchingInterval(value: number, statusIntervals: StatusInterval[]): StatusInterval {\n    if (value && statusIntervals) {\n      return statusIntervals.find((interval) => {\n        const upper = interval.upper ? parseFloat(interval.upper) : Number.MAX_VALUE;\n        const lower = interval.lower ? parseFloat(interval.lower) : Number.MIN_VALUE;\n        if (lower <= value && value < upper) { return true; }\n      });\n    }\n  }\n\n}\n","import 'rxjs/operator/map';\n\nimport { Injectable } from '@angular/core';\n\nimport { IDataset } from '../model/dataset-api/dataset';\n\nconst INTERNAL_ID_SEPERATOR = '__';\n\nexport interface InternalDatasetId {\n  id: string;\n  url: string;\n}\n\n/**\n * Service to generate or resolve internal dataset IDs\n */\n@Injectable()\nexport class InternalIdHandler {\n\n  /**\n   * Generates an internal id for the given dataset.\n   * @param dataset The dataset for which the internal id will be generated and saved.\n   */\n  public generateInternalId(dataset: IDataset) {\n    dataset.internalId = dataset.url + INTERNAL_ID_SEPERATOR + dataset.id;\n  }\n\n  /**\n   * Resolves the internal ID to the url and the API specific dataset id.\n   * @param internalId The internal id as string\n   * @returns Construct of url and API id\n   */\n  public resolveInternalId(internalId: string): InternalDatasetId {\n    const split = internalId.split(INTERNAL_ID_SEPERATOR);\n    if (split.length !== 2) {\n      console.error('InternalID ' + internalId + ' is not resolvable');\n    } else {\n      return {\n        url: split[0],\n        id: split[1]\n      };\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * LocalStorage save objects with a given key\n *\n * @export\n */\n@Injectable()\nexport class LocalStorage {\n\n    private localStorageEnabled = false;\n\n    constructor() {\n        if (typeof (Storage) !== 'undefined') {\n            this.localStorageEnabled = true;\n        }\n    }\n\n    /**\n     * Saves the object with the key in the local storage\n     *\n     * @param key\n     * @param object\n     * @returns successfull saving\n     * @memberof LocalStorage\n     */\n    public save(key: string, object: any): boolean {\n        if (this.localStorageEnabled) {\n            localStorage.setItem(key, JSON.stringify(object));\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * loads the object with for the key\n     *\n     * @param key\n     * @returns the object if exists, else null\n     * @memberof LocalStorage\n     */\n    public load<T>(key: string): T {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) {\n                return JSON.parse(result);\n            }\n            return null;\n        }\n    }\n\n    /**\n     * loads an array of objects for the key\n     *\n     * @param key\n     * @returns the array of objects if exists, else null\n     * @memberof LocalStorage\n     */\n    public loadArray<T>(key: string): T[] {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) {\n                return JSON.parse(result);\n            }\n            return null;\n        }\n    }\n\n    /**\n     * load a textual string for the given key\n     *\n     * @param key\n     * @returns the string if exists, else null\n     * @memberof LocalStorage\n     */\n    public loadTextual(key: string): string {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nconst ID = 'helgoland-notifier';\nconst TIME_IN_MS = 3000;\n\n@Injectable()\nexport class NotifierService {\n\n  private notifierTimeout: any;\n\n  constructor() {\n    const notifierElement = document.getElementById(ID);\n    if (!notifierElement) {\n      const node = document.createElement('div');\n      node.id = ID;\n      node.className = 'hide';\n      const textNode = document.createTextNode('');\n      node.appendChild(textNode);\n      document.body.appendChild(node);\n    }\n  }\n\n  public notify(text: string) {\n    clearTimeout(this.notifierTimeout);\n    const notifierElement = document.getElementById(ID);\n    notifierElement.innerHTML = text;\n    notifierElement.className = notifierElement.className.replace('hide', 'show');\n    this.notifierTimeout = setTimeout(() => {\n      notifierElement.className = notifierElement.className.replace('show', 'hide');\n    }, TIME_IN_MS);\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Pipe({\n    name: 'dateI18n',\n    pure: false\n})\nexport class DateProxyPipe implements PipeTransform {\n\n    constructor(\n        protected translate: TranslateService\n    ) { }\n\n    public transform(value: any, pattern: string = 'mediumDate'): any {\n        // simply forward to built-in pipe, but take into account the current language\n        const builtinDatePipe = new DatePipe(this.translate.currentLang || 'en');\n        try {\n            return builtinDatePipe.transform(value, pattern);\n        } catch (error) {\n            console.error(error);\n            return new DatePipe('en').transform(value, pattern);\n        }\n    }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export abstract class TimeInterval {\n\n}\n\nexport class Timespan extends TimeInterval {\n\n    public from: number;\n\n    public to: number;\n\n    constructor(\n        from: number,\n        to?: number\n    ) {\n        super();\n        this.from = from;\n        if (to) {\n            this.to = to;\n        } else {\n            this.to = from;\n        }\n    }\n\n}\n\nexport class BufferedTime extends TimeInterval {\n    public timestamp: Date;\n    public bufferInterval: number;\n\n    constructor(\n        timestamp: Date,\n        bufferInterval: number\n    ) {\n        super();\n        this.timestamp = timestamp;\n        this.bufferInterval = bufferInterval;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport moment from 'moment';\n\nimport { Timespan } from '../model/internal/timeInterval';\n\nexport enum DefinedTimespan {\n    LASTHOUR = 'last_hour',\n    TODAY = 'today',\n    YESTERDAY = 'yesterday',\n    TODAY_YESTERDAY = 'today_yesterday',\n    CURRENT_WEEK = 'current_week',\n    LAST_WEEK = 'last_week',\n    CURRENT_MONTH = 'current_month',\n    LAST_MONTH = 'last_month',\n    CURRENT_YEAR = 'current_year',\n    LAST_YEAR = 'last_year'\n}\n\n@Injectable()\nexport class DefinedTimespanService {\n\n    private intervals: Map<DefinedTimespan, () => Timespan> = new Map();\n\n    constructor() {\n        this.intervals.set(DefinedTimespan.LASTHOUR, () => {\n            const from = moment().subtract(1, 'hours').unix() * 1000;\n            const to = moment().unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.TODAY, () => {\n            const from = moment().startOf('day').unix() * 1000;\n            const to = moment().endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.YESTERDAY, () => {\n            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;\n            const to = moment().subtract(1, 'days').endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.TODAY_YESTERDAY, () => {\n            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;\n            const to = moment().endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_WEEK, () => {\n            const from = moment().startOf('isoWeek').unix() * 1000;\n            const to = moment().endOf('isoWeek').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_WEEK, () => {\n            const from = moment().subtract(1, 'weeks').startOf('isoWeek').unix() * 1000;\n            const to = moment().subtract(1, 'weeks').endOf('isoWeek').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_MONTH, () => {\n            const from = moment().startOf('month').unix() * 1000;\n            const to = moment().endOf('month').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_MONTH, () => {\n            const from = moment().subtract(1, 'months').startOf('month').unix() * 1000;\n            const to = moment().subtract(1, 'months').endOf('month').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_YEAR, () => {\n            const from = moment().startOf('year').unix() * 1000;\n            const to = moment().endOf('year').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_YEAR, () => {\n            const from = moment().subtract(1, 'years').startOf('year').unix() * 1000;\n            const to = moment().subtract(1, 'years').endOf('year').unix() * 1000;\n            return new Timespan(from, to);\n        });\n    }\n\n    public getInterval(intervalDescriber: DefinedTimespan): Timespan {\n        if (this.intervals.has(intervalDescriber)) {\n            return this.intervals.get(intervalDescriber)();\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { plainToClass } from 'class-transformer';\nimport moment from 'moment';\n\nimport { LocalStorage } from '../local-storage/local-storage.service';\nimport { BufferedTime, TimeInterval, Timespan } from '../model/internal/timeInterval';\n\n@Injectable()\nexport class Time {\n\n    constructor(\n        protected localStorage: LocalStorage\n    ) { }\n\n    public centerTimespan(timespan: Timespan, date: Date): Timespan {\n        const halfduration = this.getDuration(timespan).asMilliseconds() / 2;\n        const from = moment(date).subtract(halfduration).unix() * 1000;\n        const to = moment(date).add(halfduration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public stepBack(timespan: Timespan): Timespan {\n        const duration = this.getDuration(timespan);\n        const from = moment(timespan.from).subtract(duration).unix() * 1000;\n        const to = moment(timespan.to).subtract(duration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public stepForward(timespan: Timespan): Timespan {\n        const duration = this.getDuration(timespan);\n        const from = moment(timespan.from).add(duration).unix() * 1000;\n        const to = moment(timespan.to).add(duration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public overlaps(timeInterval: TimeInterval, from: number, to: number): boolean {\n        const timespan = this.createTimespanOfInterval(timeInterval);\n        if (timespan.from <= to && timespan.to >= from) {\n            return true;\n        }\n        return false;\n    }\n\n    public createTimespanOfInterval(timeInterval: TimeInterval): Timespan {\n        if (timeInterval instanceof Timespan) {\n            return timeInterval;\n        } else if (timeInterval instanceof BufferedTime) {\n            const duration = moment.duration(timeInterval.bufferInterval / 2);\n            const from = moment(timeInterval.timestamp).subtract(duration).unix() * 1000;\n            const to = moment(timeInterval.timestamp).add(duration).unix() * 1000;\n            return new Timespan(from, to);\n        } else {\n            console.error('Wrong time interval!');\n        }\n    }\n\n    public getBufferedTimespan(timespan: Timespan, factor: number): Timespan {\n        const durationMillis = this.getDuration(timespan).asMilliseconds();\n        const from = moment(timespan.from).subtract(durationMillis * factor).unix() * 1000;\n        const to = moment(timespan.to).add(durationMillis * factor).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public saveTimespan(param: string, timespan: Timespan) {\n        this.localStorage.save(param, timespan);\n    }\n\n    public loadTimespan(param: string): Timespan {\n        const json = this.localStorage.load(param);\n        if (json) {\n            return plainToClass<Timespan, object>(Timespan, json);\n        }\n        return null;\n    }\n\n    public initTimespan(): Timespan {\n        const now = new Date();\n        const start = moment(now).startOf('day').unix() * 1000;\n        const end = moment(now).endOf('day').unix() * 1000;\n        return new Timespan(start, end);\n    }\n\n    private getDuration(timespan: Timespan): moment.Duration {\n        const from = moment(timespan.from);\n        const to = moment(timespan.to);\n        return moment.duration(to.diff(from));\n    }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { ColorService } from './color/color.service';\nimport { DatasetApiMapping } from './dataset-api/api-mapping.service';\nimport { StatusIntervalResolverService } from './dataset-api/helper/status-interval-resolver.service';\nimport { InternalIdHandler } from './dataset-api/internal-id-handler.service';\nimport { LocalStorage } from './local-storage/local-storage.service';\nimport { NotifierService } from './notifier/notifier.service';\nimport { DateProxyPipe } from './pipes/dateproxy/dateproxy.pipe';\nimport { DefinedTimespanService } from './time/defined-timespan.service';\nimport { Time } from './time/time.service';\n\n@NgModule({\n  declarations: [\n    DateProxyPipe\n  ],\n  imports: [\n    HttpClientModule\n  ],\n  exports: [\n    DateProxyPipe\n  ],\n  providers: [\n    ColorService,\n    DatasetApiMapping,\n    DefinedTimespanService,\n    InternalIdHandler,\n    LocalStorage,\n    NotifierService,\n    StatusIntervalResolverService,\n    Time\n  ]\n})\nexport class HelgolandCoreModule { }\n","import moment from 'moment';\n\nimport { Timespan } from '../model/internal/timeInterval';\nimport { HttpHeaders } from '@angular/common/http';\n\nexport abstract class ApiInterface {\n\n    protected createRequestUrl(apiUrl: string, endpoint: string, id?: string) {\n        // TODO Check whether apiUrl ends with slash\n        let requestUrl = apiUrl + endpoint;\n        if (id) { requestUrl += '/' + id; }\n        return requestUrl;\n    }\n\n    protected createRequestTimespan(timespan: Timespan): string {\n        return encodeURI(moment(timespan.from).format() + '/' + moment(timespan.to).format());\n    }\n\n    protected createBasicAuthHeader(token: string): HttpHeaders {\n        const headers = new HttpHeaders();\n        if (token) { return headers.set('Authorization', token); }\n        return headers;\n    }\n\n}\n","import { DatasetOptions } from '../model/internal/options';\n\nexport abstract class DatasetService<T extends DatasetOptions | DatasetOptions[]> {\n\n    public datasetIds: string[] = [];\n\n    public datasetOptions: Map<string, T> = new Map();\n\n    public addDataset(internalId: string, options?: T) {\n        if (this.datasetIds.indexOf(internalId) < 0) {\n            this.datasetIds.push(internalId);\n            if (options) {\n                this.datasetOptions.set(internalId, options);\n            } else {\n                this.datasetOptions.set(internalId, this.createStyles(internalId));\n            }\n            this.saveState();\n        } else if (options instanceof Array) {\n            const temp = (this.datasetOptions.get(internalId) as DatasetOptions[]);\n            options.forEach((e) => temp.push(e));\n            this.saveState();\n        }\n    }\n\n    public removeAllDatasets() {\n        this.datasetIds.length = 0;\n        this.datasetOptions.clear();\n        this.saveState();\n    }\n\n    public removeDataset(internalId: string) {\n        const datasetIdx = this.datasetIds.indexOf(internalId);\n        if (datasetIdx > -1) {\n            this.datasetIds.splice(datasetIdx, 1);\n            this.datasetOptions.delete(internalId);\n        }\n        this.saveState();\n    }\n\n    public hasDatasets(): boolean {\n        return this.datasetIds.length > 0;\n    }\n\n    public updateDatasetOptions(options: T, internalId: string) {\n        this.datasetOptions.set(internalId, options);\n        this.saveState();\n    }\n\n    protected abstract createStyles(internalId: string): T;\n\n    protected abstract saveState(): void;\n\n    protected abstract loadState(): void;\n\n}\n","import { DatasetApiInterface } from '../dataset-api/api-interface';\nimport { BarRenderingHints, IDataset, LineRenderingHints } from '../model/dataset-api/dataset';\nimport { DatasetOptions } from '../model/internal/options';\nimport { DatasetService } from './dataset.service';\n\nexport abstract class RenderingHintsDatasetService<T extends DatasetOptions | DatasetOptions[]> extends DatasetService<T> {\n\n    constructor(\n        protected api: DatasetApiInterface\n    ) {\n        super();\n    }\n\n    public addDataset(internalId: string, options?: T) {\n        if (options) {\n            this.datasetIds.push(internalId);\n            this.datasetOptions.set(internalId, options);\n        } else if (this.datasetIds.indexOf(internalId) < 0) {\n            this.api.getSingleTimeseriesByInternalId(internalId).subscribe(\n                (timeseries) => this.addLoadedDataset(timeseries),\n                (error) => {\n                    this.api.getDatasetByInternalId(internalId).subscribe(\n                        (dataset) => this.addLoadedDataset(dataset),\n                    );\n                }\n            );\n        }\n    }\n\n    private addLoadedDataset(dataset: IDataset) {\n        this.datasetIds.push(dataset.internalId);\n        this.datasetOptions.set(dataset.internalId, this.createOptionsOfRenderingHints(dataset));\n    }\n\n    private createOptionsOfRenderingHints(dataset: IDataset): T {\n        const options = this.createStyles(dataset.internalId) as DatasetOptions;\n        if (dataset.renderingHints) {\n            if (dataset.renderingHints.properties && dataset.renderingHints.properties.color) {\n                options.color = dataset.renderingHints.properties.color;\n            }\n            switch (dataset.renderingHints.chartType) {\n                case 'line':\n                    this.handleLineRenderingHints(dataset.renderingHints as LineRenderingHints, options);\n                    break;\n                case 'bar':\n                    this.handleBarRenderingHints(dataset.renderingHints as BarRenderingHints, options);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return options as T;\n    }\n\n\n    private handleLineRenderingHints(lineHints: LineRenderingHints, options: DatasetOptions) {\n        if (lineHints.properties.width) {\n            options.lineWidth = Math.round(parseFloat(lineHints.properties.width));\n        }\n    }\n\n    private handleBarRenderingHints(barHints: BarRenderingHints, options: DatasetOptions) {\n        if (barHints.properties.width) {\n            options.lineWidth = Math.round(parseFloat(barHints.properties.width));\n        }\n    }\n}\n","import { HttpParameterCodec, HttpParams } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { ApiInterface } from '../abstract-services/api-interface';\nimport { Category } from '../model/dataset-api/category';\nimport { Data } from '../model/dataset-api/data';\nimport { Dataset, Timeseries, TimeseriesData, TimeseriesExtras } from '../model/dataset-api/dataset';\nimport { Feature } from '../model/dataset-api/feature';\nimport { Offering } from '../model/dataset-api/offering';\nimport { Phenomenon } from '../model/dataset-api/phenomenon';\nimport { Platform } from '../model/dataset-api/platform';\nimport { Procedure } from '../model/dataset-api/procedure';\nimport { Service } from '../model/dataset-api/service';\nimport { Station } from '../model/dataset-api/station';\nimport { DataParameterFilter, HttpRequestOptions, ParameterFilter } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { HttpService } from './http.service';\nimport { DatasetApiV2 } from './interfaces/api-v2.interface';\n\nexport class UriParameterCoder implements HttpParameterCodec {\n\n    public encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    public encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    public decodeKey(key: string): string {\n        return key;\n    }\n\n    public decodeValue(value: string): string {\n        return value;\n    }\n}\n\nexport abstract class DatasetApiInterface extends ApiInterface implements DatasetApiV2 {\n\n    constructor(\n        protected httpService: HttpService,\n        protected translate: TranslateService\n    ) { super(); }\n\n    public abstract getPlatforms(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform[]>;\n    public abstract getPlatform(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform>;\n    public abstract getDatasets(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset[]>;\n    public abstract getDataset(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset>;\n    public abstract getDatasetByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset>;\n    public abstract getData<T>(id: string, apiUrl: string, timespan: Timespan, params?: DataParameterFilter, options?: HttpRequestOptions): Observable<Data<T>>;\n    public abstract getServices(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service[]>;\n    public abstract getService(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service>;\n    public abstract getStations(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station[]>;\n    public abstract getStation(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station>;\n    public abstract getTimeseries(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries[]>;\n    public abstract getTimeseriesData(apiUrl: string, ids: string[], timespan: Timespan, options?: HttpRequestOptions): Observable<TimeseriesData[]>;\n    public abstract getSingleTimeseries(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries>;\n    public abstract getSingleTimeseriesByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries>;\n    public abstract getTimeseriesExtras(id: string, apiUrl: string): Observable<TimeseriesExtras>;\n    public abstract getTsData<T>(id: string, apiUrl: string, timespan: Timespan, params?: DataParameterFilter, options?: HttpRequestOptions): Observable<Data<T>>;\n    public abstract getCategories(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category[]>;\n    public abstract getCategory(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category>;\n    public abstract getPhenomena(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon[]>;\n    public abstract getPhenomenon(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon>;\n    public abstract getOfferings(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering[]>;\n    public abstract getOffering(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering>;\n    public abstract getFeatures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature[]>;\n    public abstract getFeature(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature>;\n    public abstract getProcedures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure[]>;\n    public abstract getProcedure(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure>;\n\n    protected requestApi<T>(\n        url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}\n    ): Observable<T> {\n        return this.httpService.client(options).get<T>(url,\n            {\n                params: this.prepareParams(params),\n                headers: this.createBasicAuthHeader(options.basicAuthToken)\n            }\n        );\n    }\n\n    protected prepareParams(params: ParameterFilter): HttpParams {\n        if (this.translate && this.translate.currentLang) {\n            params.locale = this.translate.currentLang;\n        }\n        let httpParams = new HttpParams({\n            encoder: new UriParameterCoder()\n        });\n        Object.getOwnPropertyNames(params)\n            .forEach((key) => httpParams = httpParams.set(key, params[key]));\n        return httpParams;\n    }\n}\n","import { DatasetTypes, PlatformTypes } from './enums';\nimport { Parameter } from './parameter';\nimport { Station } from './station';\n\nexport interface IDataset extends Parameter {\n    url: string;\n    uom: string;\n    internalId: string;\n    firstValue: FirstLastValue;\n    lastValue: FirstLastValue;\n    referenceValues: ReferenceValue[];\n    parameters: ParameterConstellation;\n    renderingHints: RenderingHints;\n}\n\nexport class ParameterConstellation {\n    public service: Parameter;\n    public offering: Parameter;\n    public feature: Parameter;\n    public procedure: Parameter;\n    public phenomenon: Parameter;\n    public category: Parameter;\n}\n\nexport class FirstLastValue {\n    public timestamp: number;\n    public value: number;\n}\n\nexport class ReferenceValue {\n    public referenceValueId: string;\n    public label: string;\n    public lastValue: FirstLastValue;\n    public color?: string;\n    public visible?: boolean;\n}\n\nexport interface RenderingHints {\n    chartType: string;\n    properties: {\n        color: string;\n    };\n}\n\nexport interface LineRenderingHints extends RenderingHints {\n    chartType: 'line';\n    properties: {\n        color: string;\n        width: string;\n        lineType: string;\n    };\n}\n\nexport interface BarRenderingHints {\n    chartType: 'bar';\n    properties: {\n        color: string;\n        width: string;\n        interval: string;\n    };\n}\n\nexport class DatasetParameterConstellation extends ParameterConstellation {\n    public platform: PlatformParameter;\n}\n\nexport class Dataset implements IDataset {\n    public id: string;\n    public label: string;\n    public url: string;\n    public uom: string;\n    public internalId: string;\n    public firstValue: FirstLastValue;\n    public lastValue: FirstLastValue;\n    public referenceValues: ReferenceValue[];\n    public datasetType: DatasetTypes;\n    public platformType: PlatformTypes;\n    public parameters: DatasetParameterConstellation;\n    public seriesParameters?: DatasetParameterConstellation;\n    public renderingHints: RenderingHints;\n}\n\nexport class Timeseries implements IDataset {\n    public id: string;\n    public label: string;\n    public url: string;\n    public uom: string;\n    public internalId: string;\n    public firstValue: FirstLastValue;\n    public lastValue: FirstLastValue;\n    public referenceValues: ReferenceValue[];\n    public station: Station;\n    public parameters: ParameterConstellation;\n    public statusIntervals?: StatusInterval[];\n    public hasData = false;\n    public renderingHints: RenderingHints;\n}\n\nexport interface TimeseriesExtras {\n    license?: string;\n    statusIntervals?: StatusInterval[];\n}\n\nexport interface StatusInterval {\n    lower: string;\n    upper: string;\n    name: string;\n    color: string;\n}\n\nexport interface PlatformParameter extends Parameter {\n    platformType: PlatformTypes;\n}\n\nexport class TimeseriesData {\n    public id: string;\n    public url: string;\n    public data: FirstLastValue[];\n}\n","import { HttpClient, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { HttpRequestOptions } from '../model/internal/http-requests';\n\nexport const HTTP_SERVICE_INTERCEPTORS = new InjectionToken<HttpServiceInterceptor>('HTTP_SERVICE_INTERCEPTORS');\n\nexport interface HttpServiceHandler {\n    handle(req: HttpRequest<any>, options: Partial<HttpRequestOptions>): Observable<HttpEvent<any>>;\n}\n\nexport interface HttpServiceInterceptor {\n    intercept(req: HttpRequest<any>, options: Partial<HttpRequestOptions>, next: HttpServiceHandler): Observable<HttpEvent<any>>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HttpService {\n\n    private handler: HttpServiceHandler;\n\n    constructor(\n        protected httpHandler: HttpHandler,\n        @Optional() @Inject(HTTP_SERVICE_INTERCEPTORS) interceptors: HttpServiceInterceptor[] | null\n    ) {\n        let handler: HttpServiceHandler = {\n            handle: (req, options) => httpHandler.handle(req)\n        };\n        if (interceptors) {\n            handler = interceptors.reduceRight((next, interceptor) => ({\n                handle: (req, options) => interceptor.intercept(req, options, next)\n            }), handler);\n        }\n        this.handler = handler;\n    }\n\n    public client(options: HttpRequestOptions = {}): HttpClient {\n        return new HttpClient({\n            handle: (req) => this.handler.handle(req, options)\n        });\n    }\n}\n","import 'rxjs/add/operator/map';\n\nimport { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { deserialize, deserializeArray } from 'class-transformer';\nimport { Observable, Observer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Category } from '../model/dataset-api/category';\nimport { Data } from '../model/dataset-api/data';\nimport { Dataset, Timeseries, TimeseriesData, TimeseriesExtras } from '../model/dataset-api/dataset';\nimport { Feature } from '../model/dataset-api/feature';\nimport { Offering } from '../model/dataset-api/offering';\nimport { Phenomenon } from '../model/dataset-api/phenomenon';\nimport { Platform } from '../model/dataset-api/platform';\nimport { Procedure } from '../model/dataset-api/procedure';\nimport { Service } from '../model/dataset-api/service';\nimport { Station } from '../model/dataset-api/station';\nimport { DataParameterFilter, HttpRequestOptions, ParameterFilter } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { DatasetApiInterface } from './api-interface';\nimport { HttpService } from './http.service';\nimport { InternalIdHandler } from './internal-id-handler.service';\n\n@Injectable()\nexport class DatasetImplApiInterface extends DatasetApiInterface {\n\n    constructor(\n        protected httpservice: HttpService,\n        protected internalDatasetId: InternalIdHandler,\n        protected translate: TranslateService\n    ) {\n        super(httpservice, translate);\n    }\n\n    public getServices(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service[]> {\n        const url = this.createRequestUrl(apiUrl, 'services');\n        if (params) {\n            params.expanded = true;\n        } else {\n            params = { expanded: true };\n        }\n        return this.requestApi<Service[]>(url, params, options).pipe(\n            map((result) => {\n                result.forEach((entry) => entry.apiUrl = apiUrl);\n                return result;\n            }));\n    }\n\n    public getService(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Service> {\n        const url = this.createRequestUrl(apiUrl, 'services', id);\n        return this.requestApi<Service>(url, params, options).pipe(\n            map((result) => {\n                result.apiUrl = apiUrl;\n                return result;\n            }));\n    }\n\n    public getStations(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station[]> {\n        const url = this.createRequestUrl(apiUrl, 'stations');\n        return this.requestApi<Station[]>(url, params, options);\n    }\n\n    public getStation(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Station> {\n        const url = this.createRequestUrl(apiUrl, 'stations', id);\n        return this.requestApi<Station>(url, params, options);\n    }\n\n    public getTimeseries(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries[]> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries');\n        return new Observable<Timeseries[]>((observer: Observer<Timeseries[]>) => {\n            this.requestApiTexted(url, params, options).subscribe(\n                (result) => {\n                    const timeseriesList = deserializeArray<Timeseries>(Timeseries, result);\n                    timeseriesList.forEach((entry) => {\n                        entry.url = apiUrl;\n                        this.internalDatasetId.generateInternalId(entry);\n                    });\n                    observer.next(timeseriesList);\n                },\n                (error) => observer.error(error),\n                () => observer.complete()\n            );\n        });\n    }\n\n    public getTimeseriesData(apiUrl: string, ids: string[], timespan: Timespan, options?: HttpRequestOptions): Observable<TimeseriesData[]> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries/getData');\n        return new Observable<TimeseriesData[]>((observer: Observer<Object>) => {\n            this.requestApiTextedPost(url, {\n                timespan: this.createRequestTimespan(timespan),\n                timeseries: ids\n            }, options).subscribe(\n                (result) => {\n                    const timeseriesList: TimeseriesData[] = [];\n                    for (const id in result) {\n                        if (id) {\n                            timeseriesList.push(\n                                {\n                                    id: id,\n                                    url: apiUrl,\n                                    data: result[id].values\n                                }\n                            );\n                        }\n                    }\n                    observer.next(timeseriesList);\n                },\n                (error) => observer.error(error),\n                () => observer.complete()\n            );\n        });\n    }\n\n    public getSingleTimeseries(id: string, apiUrl: string, params?: ParameterFilter): Observable<Timeseries> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id);\n        return this.requestApiTexted(url, params).pipe(map((result) => {\n            const timeseries = deserialize<Timeseries>(Timeseries, result);\n            timeseries.url = apiUrl;\n            this.internalDatasetId.generateInternalId(timeseries);\n            return timeseries;\n        }));\n    }\n\n    public getSingleTimeseriesByInternalId(internalId: string, params?: ParameterFilter): Observable<Timeseries> {\n        const resolvedId = this.internalDatasetId.resolveInternalId(internalId);\n        return this.getSingleTimeseries(resolvedId.id, resolvedId.url, params);\n    }\n\n    public getTimeseriesExtras(id: string, apiUrl: string): Observable<TimeseriesExtras> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id);\n        return this.requestApi<TimeseriesExtras>(url + '/extras');\n    }\n\n    public getTsData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id) + '/getData';\n        params.timespan = this.createRequestTimespan(timespan);\n        return this.requestApi<Data<T>>(url, params, options).pipe(\n            map((res: any) => {\n                if (params.expanded) { res = res[id]; }\n                return res;\n            }));\n    }\n\n    public getCategories(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category[]> {\n        const url = this.createRequestUrl(apiUrl, 'categories');\n        return this.requestApi<Category[]>(url, params, options);\n    }\n\n    public getCategory(id: string, apiUrl: string, params?: ParameterFilter): Observable<Category> {\n        // const url = this.createRequestUrl(apiUrl, 'categories', id);\n        throw new Error('Not implemented');\n        // return this.requestApi(url, params)\n        //     .map(this.extractData);\n    }\n\n    public getPhenomena(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon[]> {\n        const url = this.createRequestUrl(apiUrl, 'phenomena');\n        return this.requestApi<Phenomenon[]>(url, params, options);\n    }\n\n    public getPhenomenon(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Phenomenon> {\n        const url = this.createRequestUrl(apiUrl, 'phenomena', id);\n        return this.requestApi<Phenomenon>(url, params, options);\n    }\n\n    public getOfferings(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering[]> {\n        const url = this.createRequestUrl(apiUrl, 'offerings');\n        return this.requestApi<Offering[]>(url, params, options);\n    }\n\n    public getOffering(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Offering> {\n        const url = this.createRequestUrl(apiUrl, 'offerings', id);\n        return this.requestApi<Offering>(url, params, options);\n    }\n\n    public getFeatures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature[]> {\n        const url = this.createRequestUrl(apiUrl, 'features');\n        return this.requestApi<Feature[]>(url, params, options);\n    }\n\n    public getFeature(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Feature> {\n        const url = this.createRequestUrl(apiUrl, 'features', id);\n        return this.requestApi<Feature>(url, params, options);\n    }\n\n    public getProcedures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure[]> {\n        const url = this.createRequestUrl(apiUrl, 'procedures');\n        return this.requestApi<Procedure[]>(url, params, options);\n    }\n\n    public getProcedure(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Procedure> {\n        const url = this.createRequestUrl(apiUrl, 'procedures', id);\n        return this.requestApi<Procedure>(url, params, options);\n    }\n\n    public getPlatforms(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform[]> {\n        const url = this.createRequestUrl(apiUrl, 'platforms');\n        return this.requestApi<Platform[]>(url, params, options);\n    }\n\n    public getPlatform(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Platform> {\n        const url = this.createRequestUrl(apiUrl, 'platforms', id);\n        return this.requestApi<Platform>(url, params, options);\n    }\n\n    public getDatasets(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset[]> {\n        const url = this.createRequestUrl(apiUrl, 'datasets');\n        return this.requestApi<Dataset[]>(url, params, options).pipe(\n            map((list) => list.map((entry) => this.prepareDataset(entry, apiUrl)))\n        );\n    }\n\n    public getDataset(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset> {\n        const url = this.createRequestUrl(apiUrl, 'datasets', id);\n        return this.requestApi<Dataset>(url, params, options).pipe(\n            map((res) => this.prepareDataset(res, apiUrl))\n        );\n    }\n\n    public getDatasetByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset> {\n        const resolvedId = this.internalDatasetId.resolveInternalId(internalId);\n        return this.getDataset(resolvedId.id, resolvedId.url, params, options);\n    }\n\n    public getData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const url = this.createRequestUrl(apiUrl, 'datasets', id) + '/data';\n        params.timespan = this.createRequestTimespan(timespan);\n        return this.requestApi<Data<T>>(url, params, options);\n    }\n\n    // public getGeometries(id: string, apiUrl: string, params?): Observable<> {\n    //     throw new Error('Not implemented');\n    // }\n\n    // protected createRequestTimespan(timespan: Timespan): string {\n    //     return encodeURI(moment(timespan.from).format() + '/' + moment(timespan.to).format());\n    // }\n\n    private requestApiTexted(url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}): Observable<string> {\n        return this.httpservice.client(options).get(url, {\n            params: this.prepareParams(params),\n            responseType: 'text'\n        });\n    }\n\n    private requestApiTextedPost(url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}): Observable<Object> {\n        return this.httpservice.client().post(url, params, {\n            responseType: 'json'\n        });\n    }\n\n    private prepareDataset(datasetObj: Dataset, apiUrl: string) {\n        const dataset = deserialize<Dataset>(Dataset, JSON.stringify(datasetObj));\n        dataset.url = apiUrl;\n        this.internalDatasetId.generateInternalId(dataset);\n        if (dataset.seriesParameters) {\n            dataset.parameters = dataset.seriesParameters;\n            delete dataset.seriesParameters;\n        }\n        return dataset;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport moment from 'moment';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Data } from '../model/dataset-api/data';\nimport { DataParameterFilter, HttpRequestOptions } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { DatasetImplApiInterface } from './dataset-impl-api-interface.service';\nimport { HttpService } from './http.service';\nimport { InternalIdHandler } from './internal-id-handler.service';\n\n@Injectable()\nexport class SplittedDataDatasetApiInterface extends DatasetImplApiInterface {\n\n    constructor(\n        protected httpservice: HttpService,\n        protected internalDatasetId: InternalIdHandler,\n        protected translate: TranslateService\n    ) {\n        super(httpservice, internalDatasetId, translate);\n    }\n\n    public getTsData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const maxTimeExtent = moment.duration(1, 'year').asMilliseconds();\n        if ((timespan.to - timespan.from) > maxTimeExtent) {\n            const requests: Array<Observable<Data<T>>> = [];\n            let start = moment(timespan.from).startOf('year');\n            let end = moment(timespan.from).endOf('year');\n            while (start.isBefore(moment(timespan.to))) {\n                const chunkSpan = new Timespan(start.unix() * 1000, end.unix() * 1000);\n                requests.push(super.getTsData<T>(id, apiUrl, chunkSpan, params, options));\n                start = end.add(1, 'millisecond');\n                end = moment(start).endOf('year');\n            }\n            return forkJoin(requests).pipe(map((entry) => {\n                return entry.reduce((previous, current) => {\n                    const next: Data<T> = {\n                        referenceValues: {},\n                        values: previous.values.concat(current.values)\n                    };\n                    for (const key in previous.referenceValues) {\n                        if (previous.referenceValues.hasOwnProperty(key)) {\n                            next.referenceValues[key] = previous.referenceValues[key].concat(current.referenceValues[key]);\n                        }\n                    }\n                    return next;\n                });\n            }));\n        } else {\n            return super.getTsData<T>(id, apiUrl, timespan, params, options);\n        }\n    }\n\n}\n","import { TranslateService } from '@ngx-translate/core';\n\nexport abstract class LanguageChangNotifier {\n\n    constructor(\n        protected translate: TranslateService\n    ) {\n        this.translate.onLangChange.subscribe(() => this.languageChanged());\n    }\n\n    protected abstract languageChanged(): void;\n\n}\n","import { Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { Language } from './model/language';\n\nexport abstract class LocalSelectorComponent implements OnChanges {\n\n    @Input()\n    public languageList: Language[];\n\n    public currentLang: Language;\n\n    constructor(\n        protected translate: TranslateService\n    ) { }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.languageList) {\n            this.setCurrentLang();\n        }\n    }\n\n    public setLanguage(lang: Language) {\n        this.translate.use(lang.code);\n        this.setCurrentLang();\n    }\n\n    private setCurrentLang() {\n        this.currentLang = this.languageList.find((e) => e.code === this.translate.currentLang);\n    }\n\n}\n","// tslint:disable-next-line:no-empty-interface\nexport interface IDataEntry { }\n\nexport interface Data<T extends IDataEntry> {\n    values: T[];\n    referenceValues: ReferenceValues<T>;\n    valueBeforeTimespan?: T;\n    valueAfterTimespan?: T;\n}\n\nexport class ReferenceValues<T extends IDataEntry> {\n    [key: string]: T[];\n}\n\nexport interface TimeValueEntry extends IDataEntry {\n    timestamp: number;\n    value: number;\n}\n\nexport interface LocatedTimeValueEntry extends TimeValueEntry {\n    geometry: GeoJSON.Point;\n}\n\nexport interface ProfileDataEntry extends IDataEntry {\n    timestamp: number;\n    value: Array<{ value: number, vertical: number }>;\n    verticalUnit: string;\n}\n\nexport interface LocatedProfileDataEntry extends ProfileDataEntry {\n    timestamp: number;\n    value: Array<{ value: number, vertical: number }>;\n    verticalUnit: string;\n    geometry: GeoJSON.GeoJsonObject;\n}\n","import { ParameterConstellation, Timeseries } from './dataset';\nimport { Parameter } from './parameter';\n\nexport class Station {\n    public id: string;\n    public geometry: GeoJSON.GeometryObject;\n    public properties: StationProperties;\n}\n\nexport interface StationProperties extends Parameter {\n    timeseries: TimeseriesCollection | Timeseries;\n}\n\nexport class TimeseriesCollection {\n    [key: string]: ParameterConstellation;\n}\n","export enum PlatformTypes {\n    stationary = 'stationary',\n    mobile = 'mobile',\n    mobileInsitu = 'mobile_insitu'\n}\n\nexport enum ValueTypes {\n    quantity = 'quantity',\n    quantityProfile = 'quantity-profile'\n}\n\nexport enum DatasetTypes {\n    measurement\n}\n","import { ParameterFilter } from './../internal/http-requests';\n\nexport class Filter {\n    public url: string;\n    public service: string;\n    public itemId: string;\n    public filter: ParameterFilter;\n}\n","/**\n * Options for each dataset.\n *\n * @export\n */\nexport class DatasetOptions {\n\n    /**\n     * internal dataset id\n     *\n     * @memberof DatasetOptions\n     */\n    public internalId: string;\n\n    /**\n     * color of the dataset\n     *\n     * @memberof DatasetOptions\n     */\n    public color: string;\n\n    /**\n     * show or hide in the graph\n     *\n     * @memberof DatasetOptions\n     */\n    public visible: boolean = true;\n\n    /**\n     * separate y axis of datasets with same unit\n     *\n     * @memberof DatasetOptions\n     */\n    public separateYAxis?: boolean = false;\n\n    /**\n     * align graph that zero y axis is visible\n     *\n     * @memberof DatasetOptions\n     */\n    public zeroBasedYAxis?: boolean = false;\n\n    /**\n     * auto zoom when range selection\n     *\n     * @memberof DatasetOptions\n     */\n    autoRangeSelection?: boolean = false;\n\n    /**\n     * marker to request dataset data generalized\n     *\n     * @memberof DatasetOptions\n     */\n    public generalize?: boolean = false;\n\n    /**\n     * list of visible reference values\n     *\n     * @memberof DatasetOptions\n     */\n    public showReferenceValues: ReferenceValueOption[] = [];\n\n    /**\n     * radius of graphpoint\n     *\n     * @memberof DatasetOptions\n     */\n    public pointRadius: number = 0;\n\n    /**\n     * width of graphline\n     *\n     * @memberof DatasetOptions\n     */\n    public lineWidth: number = 1;\n\n    /**\n     * min and max range of y axis\n     *\n     * @memberof DatasetOptions\n     */\n    public yAxisRange?: MinMaxRange;\n\n    constructor(\n        internalId: string,\n        color: string\n    ) {\n        this.internalId = internalId;\n        this.color = color;\n    }\n}\n\nexport class ReferenceValueOption {\n    public id: string;\n    public color: string;\n}\n\n/**\n * numbered range with a min and a max value\n *\n * @export\n */\nexport interface MinMaxRange {\n    min: number;\n    max: number;\n}\n\nexport class TimedDatasetOptions extends DatasetOptions {\n    public timestamp: number;\n\n    constructor(\n        internalId: string,\n        color: string,\n        timestamp: number\n    ) {\n        super(internalId, color);\n        this.timestamp = timestamp;\n    }\n}\n","export class IdCache<T> {\n\n    private cache: Map<string, T> = new Map();\n\n    public has(id: string): boolean {\n        return this.cache.has(id);\n    }\n\n    public get(id: string): T {\n        return this.cache.get(id);\n    }\n\n    public set(id: string, value: T) {\n        this.cache.set(id, value);\n    }\n\n}\n","import { EventEmitter } from '@angular/core';\n\nexport class HasLoadableContent {\n\n    public onContentLoading: EventEmitter<boolean>;\n\n    public isContentLoading(loading: boolean) {\n        this.onContentLoading.emit(loading);\n    }\n\n}\n","import { HostListener } from '@angular/core';\n\nexport abstract class ResizableComponent {\n\n    @HostListener('window:resize', ['$event'])\n    public onWindowResize(event: Event) {\n        this.onResize();\n    }\n\n    protected abstract onResize(): void;\n\n}\n","import {\n    DoCheck,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\n\nimport { DatasetApiInterface } from '../dataset-api/api-interface';\nimport { InternalIdHandler } from '../dataset-api/internal-id-handler.service';\nimport { DatasetOptions } from '../model/internal/options';\nimport { ResizableComponent } from '../model/internal/ResizableComponent';\nimport { TimeInterval, Timespan } from '../model/internal/timeInterval';\nimport { HasLoadableContent } from '../model/mixins/has-loadable-content';\nimport { Time } from '../time/time.service';\nimport { PresenterMessage } from './presenter-message';\n\nconst equal = require('deep-equal');\n\nexport interface PresenterOptions { }\n\n/**\n * Abstract superclass for all components, which will present datasets.\n */\nexport abstract class DatasetPresenterComponent<T extends DatasetOptions | DatasetOptions[], U extends PresenterOptions>\n    extends ResizableComponent implements OnChanges, DoCheck, OnDestroy, HasLoadableContent {\n\n    /**\n     * List of presented dataset ids.\n     */\n    @Input()\n    public datasetIds: string[] = [];\n\n    /**\n     * List of presented selected dataset ids.\n     */\n    @Input()\n    public selectedDatasetIds: string[] = [];\n\n    /**\n     * The time interval in which the data should presented.\n     */\n    @Input()\n    public timeInterval: TimeInterval;\n\n    /**\n     * The corresponding dataset options.\n     */\n    @Input()\n    public datasetOptions: Map<string, T>;\n    protected oldDatasetOptions: Map<string, T>;\n\n    /**\n     * Options for general presentation of the data.\n     */\n    @Input()\n    public presenterOptions: U;\n    protected oldPresenterOptions: U;\n\n    /**\n     * List of datasets for which a reload should be triggered, when the Array is set to new value.\n     */\n    @Input()\n    public reloadForDatasets: string[];\n\n    /**\n     * Event with a list of selected datasets.\n     */\n    @Output()\n    public onDatasetSelected: EventEmitter<string[]> = new EventEmitter();\n\n    /**\n     * Event when the timespan in the presentation is adjusted.\n     */\n    @Output()\n    public onTimespanChanged: EventEmitter<Timespan> = new EventEmitter();\n\n    /**\n     * Event, when there occured a message in the component.\n     */\n    @Output()\n    public onMessageThrown: EventEmitter<PresenterMessage> = new EventEmitter();\n\n    /**\n     * Event flag, while there is data loaded in the component.\n     */\n    @Output()\n    public onContentLoading: EventEmitter<boolean> = new EventEmitter();\n\n    public isContentLoading: (loading: boolean) => void;\n\n    protected timespan: Timespan;\n\n    private datasetIdsDiffer: IterableDiffer<string>;\n    private selectedDatasetIdsDiffer: IterableDiffer<string>;\n    private langChangeSubscription: Subscription;\n\n    constructor(\n        protected iterableDiffers: IterableDiffers,\n        protected api: DatasetApiInterface,\n        protected datasetIdResolver: InternalIdHandler,\n        protected timeSrvc: Time,\n        protected translateService: TranslateService\n    ) {\n        super();\n        this.datasetIdsDiffer = this.iterableDiffers.find([]).create();\n        this.selectedDatasetIdsDiffer = this.iterableDiffers.find([]).create();\n        this.langChangeSubscription = this.translateService.onLangChange.subscribe((langChangeEvent: LangChangeEvent) => this.onLanguageChanged(langChangeEvent));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeInterval && this.timeInterval) {\n            this.timespan = this.timeSrvc.createTimespanOfInterval(this.timeInterval);\n            this.timeIntervalChanges();\n        }\n        if (changes.reloadForDatasets && this.reloadForDatasets && this.reloadDataForDatasets.length > 0) {\n            this.reloadDataForDatasets(this.reloadForDatasets);\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.langChangeSubscription.unsubscribe();\n    }\n\n    public ngDoCheck(): void {\n        const datasetIdsChanges = this.datasetIdsDiffer.diff(this.datasetIds);\n        if (datasetIdsChanges) {\n            datasetIdsChanges.forEachAddedItem((addedItem) => {\n                this.addDatasetByInternalId(addedItem.item);\n            });\n            datasetIdsChanges.forEachRemovedItem((removedItem) => {\n                this.removeDataset(removedItem.item);\n            });\n        }\n\n        const selectedDatasetIdsChanges = this.selectedDatasetIdsDiffer.diff(this.selectedDatasetIds);\n        if (selectedDatasetIdsChanges) {\n            selectedDatasetIdsChanges.forEachAddedItem((addedItem) => {\n                this.setSelectedId(addedItem.item);\n            });\n            selectedDatasetIdsChanges.forEachRemovedItem((removedItem) => {\n                this.removeSelectedId(removedItem.item);\n            });\n        }\n\n        if (!equal(this.oldPresenterOptions, this.presenterOptions)) {\n            this.oldPresenterOptions = Object.assign({}, this.presenterOptions);\n            const options = Object.assign({}, this.presenterOptions);\n            this.presenterOptionsChanged(options);\n        }\n\n        if (this.datasetOptions) {\n            const firstChange = this.oldDatasetOptions === undefined;\n            if (firstChange) { this.oldDatasetOptions = new Map(); }\n            this.datasetOptions.forEach((value, key) => {\n                if (!equal(value, this.oldDatasetOptions.get(key))) {\n                    this.oldDatasetOptions.set(key, Object.assign({}, this.datasetOptions.get(key)));\n                    this.datasetOptionsChanged(key, value, firstChange);\n                }\n            });\n        }\n    }\n\n    public abstract reloadDataForDatasets(datasets: string[]): void;\n\n    protected addDatasetByInternalId(internalId: string) {\n        const internalIdObj = this.datasetIdResolver.resolveInternalId(internalId);\n        this.addDataset(internalIdObj.id, internalIdObj.url);\n    }\n\n    protected abstract onLanguageChanged(langChangeEvent: LangChangeEvent): void;\n\n    protected abstract timeIntervalChanges(): void;\n\n    protected abstract addDataset(id: string, url: string): void;\n\n    protected abstract removeDataset(internalId: string): void;\n\n    protected abstract setSelectedId(internalId: string): void;\n\n    protected abstract removeSelectedId(internalId: string): void;\n\n    protected abstract presenterOptionsChanged(options: U): void;\n\n    protected abstract datasetOptionsChanged(internalId: string, options: T, firstChange: boolean): void;\n\n}\n","export enum PresenterMessageType {\n    ERROR,\n    INFO\n}\n","import { Settings } from '../model/settings/settings';\n\nexport abstract class SettingsService<T extends Settings> {\n\n    private settings: T;\n\n    constructor() {\n        // Default empty settings\n        this.settings = {} as T;\n    }\n\n    public getSettings() {\n        return this.settings;\n    }\n\n    protected setSettings(settings: T) {\n        this.settings = settings;\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { forkJoin, Observable, Observer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * This class checks URLs if they are reachable by a simple get request. If they gets anything back, everything is ok, otherwise\n * the corresponding method gives back the URLs which are not reachable.\n */\n@Injectable()\nexport class StatusCheckService {\n\n  private urls: string[] = [];\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  /**\n   * Checks all internal registered URLs if they are reachable. Gives back every URL, which was not reachable\n   */\n  public checkAll(): Observable<string[]> {\n    return this.doCheck(this.urls);\n  }\n\n  /**\n   * Checks the given URL.\n   * @returns Observable with the URL if not reachable.\n   */\n  public checkUrl(url: string): Observable<string> {\n    return this.doCheckUrl(url);\n  }\n\n  /**\n   * Checks the given URLs.\n   * @returns Observable of all not reachable URLs.\n   */\n  public checkUrls(urls: string[]): Observable<string[]> {\n    return this.doCheck(urls);\n  }\n\n  /**\n   * Adds the URL to the internal collection.\n   */\n  public addUrl(url: string) {\n    const index = this.urls.indexOf(url);\n    if (index === -1) { this.urls.push(url); }\n  }\n\n  /**\n   * Removes the URL of the internal collection.\n   */\n  public removeUrl(url: string) {\n    const index = this.urls.indexOf(url);\n    if (index > -1) { this.urls.splice(index, 1); }\n  }\n\n  private doCheckUrl(url: string): Observable<string> {\n    return new Observable((observer: Observer<string>) => {\n      this.httpClient.get(url).subscribe(\n        (res) => {\n          observer.next(null);\n          observer.complete();\n        },\n        (error) => {\n          observer.next(url);\n          observer.complete();\n        }\n      );\n    });\n  }\n\n  private doCheck(urls: string[]): Observable<string[]> {\n    const requests: Array<Observable<string>> = [];\n    urls.forEach((url) => requests.push(this.doCheckUrl(url)));\n    return forkJoin(requests).pipe(\n      map((checkedUrls) => {\n        return checkedUrls.filter((entry) => {\n          if (entry) {\n            return entry;\n          }\n        });\n      })\n    );\n  }\n\n}\n","export function Mixin(baseCtors: any[]) {\n    return (derivedCtor: any) => {\n        baseCtors.forEach((baseCtor) => {\n            Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            });\n        });\n    };\n}\n"]}