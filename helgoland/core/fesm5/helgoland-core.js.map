{"version":3,"file":"helgoland-core.js.map","sources":["ng://@helgoland/core/lib/color/color.service.ts","ng://@helgoland/core/lib/dataset-api/api-mapping.service.ts","ng://@helgoland/core/lib/dataset-api/helper/status-interval-resolver.service.ts","ng://@helgoland/core/lib/dataset-api/internal-id-handler.service.ts","ng://@helgoland/core/lib/local-storage/local-storage.service.ts","ng://@helgoland/core/lib/notifier/notifier.service.ts","ng://@helgoland/core/lib/pipes/dateproxy/dateproxy.pipe.ts","ng://@helgoland/core/lib/model/internal/timeInterval.ts","ng://@helgoland/core/lib/time/defined-timespan.service.ts","ng://@helgoland/core/lib/time/time.service.ts","ng://@helgoland/core/lib/core.module.ts","ng://@helgoland/core/lib/abstract-services/api-interface.ts","ng://@helgoland/core/lib/abstract-services/dataset.service.ts","ng://@helgoland/core/lib/abstract-services/rendering-hints-dataset.service.ts","ng://@helgoland/core/lib/dataset-api/api-interface.ts","ng://@helgoland/core/lib/model/dataset-api/dataset.ts","ng://@helgoland/core/lib/dataset-api/http.service.ts","ng://@helgoland/core/lib/dataset-api/dataset-impl-api-interface.service.ts","ng://@helgoland/core/lib/dataset-api/splitted-data-api-interface.service.ts","ng://@helgoland/core/lib/language/language-changer.ts","ng://@helgoland/core/lib/language/locale-selector.ts","ng://@helgoland/core/lib/model/dataset-api/data.ts","ng://@helgoland/core/lib/model/dataset-api/station.ts","ng://@helgoland/core/lib/model/dataset-api/enums.ts","ng://@helgoland/core/lib/model/internal/filter.ts","ng://@helgoland/core/lib/model/internal/options.ts","ng://@helgoland/core/lib/model/internal/id-cache.ts","ng://@helgoland/core/lib/model/mixins/Mixin.decorator.ts","ng://@helgoland/core/lib/model/mixins/has-loadable-content.ts","ng://@helgoland/core/lib/model/internal/ResizableComponent.ts","ng://@helgoland/core/lib/presenting/dataset-presenter.component.ts","ng://@helgoland/core/lib/presenting/presenter-message-type.ts","ng://@helgoland/core/lib/settings/settings.service.ts","ng://@helgoland/core/lib/status-check/status-check.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ColorService {\n\n    /**\n     * Creates a random color and return it as a hex string.\n     */\n    public getColor(): string {\n        return this.getRandomColor();\n    }\n\n    /**\n     * Converts a hex string and opacity in percent to RGBA color as string.\n     */\n    public convertHexToRGBA(hex: string, opacity: number): string {\n        hex = hex.replace('#', '');\n        const r = parseInt(hex.substring(0, 2), 16);\n        const g = parseInt(hex.substring(2, 4), 16);\n        const b = parseInt(hex.substring(4, 6), 16);\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';\n    }\n\n    private getRandomColor(): string {\n        const letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nexport enum DatasetApiVersion {\n    V1,\n    V2\n}\n\n@Injectable()\nexport class DatasetApiMapping {\n\n    private cache: Map<string, DatasetApiVersion> = new Map<string, DatasetApiVersion>();\n\n    constructor(\n        protected http: HttpClient\n    ) { }\n\n    public getApiVersion(apiUrl: string): Observable<DatasetApiVersion> {\n        return new Observable<DatasetApiVersion>((observer: Observer<DatasetApiVersion>) => {\n            if (this.cache.has(apiUrl)) {\n                this.confirmVersion(observer, this.cache.get(apiUrl));\n            } else {\n                this.http.get<any[]>(apiUrl).subscribe((result) => {\n                    let version = DatasetApiVersion.V1;\n                    result.forEach((entry) => {\n                        if (entry.id === 'platforms') {\n                            version = DatasetApiVersion.V2;\n                        }\n                    });\n                    this.cache.set(apiUrl, version);\n                    this.confirmVersion(observer, version);\n                });\n            }\n        });\n    }\n\n    private confirmVersion(observer: Observer<DatasetApiVersion>, version: DatasetApiVersion) {\n        observer.next(version);\n        observer.complete();\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StatusInterval } from '../../model/dataset-api/dataset';\n\n@Injectable()\nexport class StatusIntervalResolverService {\n\n  constructor() { }\n\n  public getMatchingInterval(value: number, statusIntervals: StatusInterval[]): StatusInterval {\n    if (value && statusIntervals) {\n      return statusIntervals.find((interval) => {\n        const upper = interval.upper ? parseFloat(interval.upper) : Number.MAX_VALUE;\n        const lower = interval.lower ? parseFloat(interval.lower) : Number.MIN_VALUE;\n        if (lower <= value && value < upper) { return true; }\n      });\n    }\n  }\n\n}\n","import 'rxjs/operator/map';\n\nimport { Injectable } from '@angular/core';\n\nimport { IDataset } from '../model/dataset-api/dataset';\n\nconst INTERNAL_ID_SEPERATOR = '__';\n\nexport interface InternalDatasetId {\n  id: string;\n  url: string;\n}\n\n/**\n * Service to generate or resolve internal dataset IDs\n */\n@Injectable()\nexport class InternalIdHandler {\n\n  /**\n   * Generates an internal id for the given dataset.\n   * @param dataset The dataset for which the internal id will be generated and saved.\n   */\n  public generateInternalId(dataset: IDataset) {\n    dataset.internalId = dataset.url + INTERNAL_ID_SEPERATOR + dataset.id;\n  }\n\n  /**\n   * Resolves the internal ID to the url and the API specific dataset id.\n   * @param internalId The internal id as string\n   * @returns Construct of url and API id\n   */\n  public resolveInternalId(internalId: string): InternalDatasetId {\n    const split = internalId.split(INTERNAL_ID_SEPERATOR);\n    if (split.length !== 2) {\n      console.error('InternalID ' + internalId + ' is not resolvable');\n    } else {\n      return {\n        url: split[0],\n        id: split[1]\n      };\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * LocalStorage save objects with a given key\n *\n * @export\n */\n@Injectable()\nexport class LocalStorage {\n\n    private localStorageEnabled = false;\n\n    constructor() {\n        if (typeof (Storage) !== 'undefined') {\n            this.localStorageEnabled = true;\n        }\n    }\n\n    /**\n     * Saves the object with the key in the local storage\n     *\n     * @param key\n     * @param object\n     * @returns successfull saving\n     * @memberof LocalStorage\n     */\n    public save(key: string, object: any): boolean {\n        if (this.localStorageEnabled) {\n            localStorage.setItem(key, JSON.stringify(object));\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * loads the object with for the key\n     *\n     * @param key\n     * @returns the object if exists, else null\n     * @memberof LocalStorage\n     */\n    public load<T>(key: string): T {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) {\n                return JSON.parse(result);\n            }\n            return null;\n        }\n    }\n\n    /**\n     * loads an array of objects for the key\n     *\n     * @param key\n     * @returns the array of objects if exists, else null\n     * @memberof LocalStorage\n     */\n    public loadArray<T>(key: string): T[] {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) {\n                return JSON.parse(result);\n            }\n            return null;\n        }\n    }\n\n    /**\n     * load a textual string for the given key\n     *\n     * @param key\n     * @returns the string if exists, else null\n     * @memberof LocalStorage\n     */\n    public loadTextual(key: string): string {\n        if (this.localStorageEnabled) {\n            const result = localStorage.getItem(key);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nconst ID = 'helgoland-notifier';\nconst TIME_IN_MS = 3000;\n\n@Injectable()\nexport class NotifierService {\n\n  private notifierTimeout: any;\n\n  constructor() {\n    const notifierElement = document.getElementById(ID);\n    if (!notifierElement) {\n      const node = document.createElement('div');\n      node.id = ID;\n      node.className = 'hide';\n      const textNode = document.createTextNode('');\n      node.appendChild(textNode);\n      document.body.appendChild(node);\n    }\n  }\n\n  public notify(text: string) {\n    clearTimeout(this.notifierTimeout);\n    const notifierElement = document.getElementById(ID);\n    notifierElement.innerHTML = text;\n    notifierElement.className = notifierElement.className.replace('hide', 'show');\n    this.notifierTimeout = setTimeout(() => {\n      notifierElement.className = notifierElement.className.replace('show', 'hide');\n    }, TIME_IN_MS);\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Pipe({\n    name: 'dateI18n',\n    pure: false\n})\nexport class DateProxyPipe implements PipeTransform {\n\n    constructor(\n        protected translate: TranslateService\n    ) { }\n\n    public transform(value: any, pattern: string = 'mediumDate'): any {\n        // simply forward to built-in pipe, but take into account the current language\n        const builtinDatePipe = new DatePipe(this.translate.currentLang || 'en');\n        try {\n            return builtinDatePipe.transform(value, pattern);\n        } catch (error) {\n            console.error(error);\n            return new DatePipe('en').transform(value, pattern);\n        }\n    }\n\n}\n","export abstract class TimeInterval {\n\n}\n\nexport class Timespan extends TimeInterval {\n\n    public from: number;\n\n    public to: number;\n\n    constructor(\n        from: number,\n        to?: number\n    ) {\n        super();\n        this.from = from;\n        if (to) {\n            this.to = to;\n        } else {\n            this.to = from;\n        }\n    }\n\n}\n\nexport class BufferedTime extends TimeInterval {\n    public timestamp: Date;\n    public bufferInterval: number;\n\n    constructor(\n        timestamp: Date,\n        bufferInterval: number\n    ) {\n        super();\n        this.timestamp = timestamp;\n        this.bufferInterval = bufferInterval;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport moment from 'moment';\n\nimport { Timespan } from '../model/internal/timeInterval';\n\nexport enum DefinedTimespan {\n    LASTHOUR = 'last_hour',\n    TODAY = 'today',\n    YESTERDAY = 'yesterday',\n    TODAY_YESTERDAY = 'today_yesterday',\n    CURRENT_WEEK = 'current_week',\n    LAST_WEEK = 'last_week',\n    CURRENT_MONTH = 'current_month',\n    LAST_MONTH = 'last_month',\n    CURRENT_YEAR = 'current_year',\n    LAST_YEAR = 'last_year'\n}\n\n@Injectable()\nexport class DefinedTimespanService {\n\n    private intervals: Map<DefinedTimespan, () => Timespan> = new Map();\n\n    constructor() {\n        this.intervals.set(DefinedTimespan.LASTHOUR, () => {\n            const from = moment().subtract(1, 'hours').unix() * 1000;\n            const to = moment().unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.TODAY, () => {\n            const from = moment().startOf('day').unix() * 1000;\n            const to = moment().endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.YESTERDAY, () => {\n            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;\n            const to = moment().subtract(1, 'days').endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.TODAY_YESTERDAY, () => {\n            const from = moment().subtract(1, 'days').startOf('day').unix() * 1000;\n            const to = moment().endOf('day').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_WEEK, () => {\n            const from = moment().startOf('isoWeek').unix() * 1000;\n            const to = moment().endOf('isoWeek').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_WEEK, () => {\n            const from = moment().subtract(1, 'weeks').startOf('isoWeek').unix() * 1000;\n            const to = moment().subtract(1, 'weeks').endOf('isoWeek').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_MONTH, () => {\n            const from = moment().startOf('month').unix() * 1000;\n            const to = moment().endOf('month').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_MONTH, () => {\n            const from = moment().subtract(1, 'months').startOf('month').unix() * 1000;\n            const to = moment().subtract(1, 'months').endOf('month').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.CURRENT_YEAR, () => {\n            const from = moment().startOf('year').unix() * 1000;\n            const to = moment().endOf('year').unix() * 1000;\n            return new Timespan(from, to);\n        });\n        this.intervals.set(DefinedTimespan.LAST_YEAR, () => {\n            const from = moment().subtract(1, 'years').startOf('year').unix() * 1000;\n            const to = moment().subtract(1, 'years').endOf('year').unix() * 1000;\n            return new Timespan(from, to);\n        });\n    }\n\n    public getInterval(intervalDescriber: DefinedTimespan): Timespan {\n        if (this.intervals.has(intervalDescriber)) {\n            return this.intervals.get(intervalDescriber)();\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { plainToClass } from 'class-transformer';\nimport moment from 'moment';\n\nimport { LocalStorage } from '../local-storage/local-storage.service';\nimport { BufferedTime, TimeInterval, Timespan } from '../model/internal/timeInterval';\n\n@Injectable()\nexport class Time {\n\n    constructor(\n        protected localStorage: LocalStorage\n    ) { }\n\n    public centerTimespan(timespan: Timespan, date: Date): Timespan {\n        const halfduration = this.getDuration(timespan).asMilliseconds() / 2;\n        const from = moment(date).subtract(halfduration).unix() * 1000;\n        const to = moment(date).add(halfduration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public stepBack(timespan: Timespan): Timespan {\n        const duration = this.getDuration(timespan);\n        const from = moment(timespan.from).subtract(duration).unix() * 1000;\n        const to = moment(timespan.to).subtract(duration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public stepForward(timespan: Timespan): Timespan {\n        const duration = this.getDuration(timespan);\n        const from = moment(timespan.from).add(duration).unix() * 1000;\n        const to = moment(timespan.to).add(duration).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public overlaps(timeInterval: TimeInterval, from: number, to: number): boolean {\n        const timespan = this.createTimespanOfInterval(timeInterval);\n        if (timespan.from <= to && timespan.to >= from) {\n            return true;\n        }\n        return false;\n    }\n\n    public createTimespanOfInterval(timeInterval: TimeInterval): Timespan {\n        if (timeInterval instanceof Timespan) {\n            return timeInterval;\n        } else if (timeInterval instanceof BufferedTime) {\n            const duration = moment.duration(timeInterval.bufferInterval / 2);\n            const from = moment(timeInterval.timestamp).subtract(duration).unix() * 1000;\n            const to = moment(timeInterval.timestamp).add(duration).unix() * 1000;\n            return new Timespan(from, to);\n        } else {\n            console.error('Wrong time interval!');\n        }\n    }\n\n    public getBufferedTimespan(timespan: Timespan, factor: number): Timespan {\n        const durationMillis = this.getDuration(timespan).asMilliseconds();\n        const from = moment(timespan.from).subtract(durationMillis * factor).unix() * 1000;\n        const to = moment(timespan.to).add(durationMillis * factor).unix() * 1000;\n        return new Timespan(from, to);\n    }\n\n    public saveTimespan(param: string, timespan: Timespan) {\n        this.localStorage.save(param, timespan);\n    }\n\n    public loadTimespan(param: string): Timespan {\n        const json = this.localStorage.load(param);\n        if (json) {\n            return plainToClass<Timespan, object>(Timespan, json);\n        }\n        return null;\n    }\n\n    public initTimespan(): Timespan {\n        const now = new Date();\n        const start = moment(now).startOf('day').unix() * 1000;\n        const end = moment(now).endOf('day').unix() * 1000;\n        return new Timespan(start, end);\n    }\n\n    private getDuration(timespan: Timespan): moment.Duration {\n        const from = moment(timespan.from);\n        const to = moment(timespan.to);\n        return moment.duration(to.diff(from));\n    }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { ColorService } from './color/color.service';\nimport { DatasetApiMapping } from './dataset-api/api-mapping.service';\nimport { StatusIntervalResolverService } from './dataset-api/helper/status-interval-resolver.service';\nimport { InternalIdHandler } from './dataset-api/internal-id-handler.service';\nimport { LocalStorage } from './local-storage/local-storage.service';\nimport { NotifierService } from './notifier/notifier.service';\nimport { DateProxyPipe } from './pipes/dateproxy/dateproxy.pipe';\nimport { DefinedTimespanService } from './time/defined-timespan.service';\nimport { Time } from './time/time.service';\n\n@NgModule({\n  declarations: [\n    DateProxyPipe\n  ],\n  imports: [\n    HttpClientModule\n  ],\n  exports: [\n    DateProxyPipe\n  ],\n  providers: [\n    ColorService,\n    DatasetApiMapping,\n    DefinedTimespanService,\n    InternalIdHandler,\n    LocalStorage,\n    NotifierService,\n    StatusIntervalResolverService,\n    Time\n  ]\n})\nexport class HelgolandCoreModule { }\n","import moment from 'moment';\n\nimport { Timespan } from '../model/internal/timeInterval';\nimport { HttpHeaders } from '@angular/common/http';\n\nexport abstract class ApiInterface {\n\n    protected createRequestUrl(apiUrl: string, endpoint: string, id?: string) {\n        // TODO Check whether apiUrl ends with slash\n        let requestUrl = apiUrl + endpoint;\n        if (id) { requestUrl += '/' + id; }\n        return requestUrl;\n    }\n\n    protected createRequestTimespan(timespan: Timespan): string {\n        return encodeURI(moment(timespan.from).format() + '/' + moment(timespan.to).format());\n    }\n\n    protected createBasicAuthHeader(token: string): HttpHeaders {\n        const headers = new HttpHeaders();\n        if (token) { return headers.set('Authorization', token); }\n        return headers;\n    }\n\n}\n","import { DatasetOptions } from '../model/internal/options';\n\nexport abstract class DatasetService<T extends DatasetOptions | DatasetOptions[]> {\n\n    public datasetIds: string[] = [];\n\n    public datasetOptions: Map<string, T> = new Map();\n\n    public addDataset(internalId: string, options?: T) {\n        if (this.datasetIds.indexOf(internalId) < 0) {\n            this.datasetIds.push(internalId);\n            if (options) {\n                this.datasetOptions.set(internalId, options);\n            } else {\n                this.datasetOptions.set(internalId, this.createStyles(internalId));\n            }\n            this.saveState();\n        } else if (options instanceof Array) {\n            const temp = (this.datasetOptions.get(internalId) as DatasetOptions[]);\n            options.forEach((e) => temp.push(e));\n            this.saveState();\n        }\n    }\n\n    public removeAllDatasets() {\n        this.datasetIds.length = 0;\n        this.datasetOptions.clear();\n        this.saveState();\n    }\n\n    public removeDataset(internalId: string) {\n        const datasetIdx = this.datasetIds.indexOf(internalId);\n        if (datasetIdx > -1) {\n            this.datasetIds.splice(datasetIdx, 1);\n            this.datasetOptions.delete(internalId);\n        }\n        this.saveState();\n    }\n\n    public hasDatasets(): boolean {\n        return this.datasetIds.length > 0;\n    }\n\n    public updateDatasetOptions(options: T, internalId: string) {\n        this.datasetOptions.set(internalId, options);\n        this.saveState();\n    }\n\n    protected abstract createStyles(internalId: string): T;\n\n    protected abstract saveState(): void;\n\n    protected abstract loadState(): void;\n\n}\n","import { DatasetApiInterface } from '../dataset-api/api-interface';\nimport { BarRenderingHints, IDataset, LineRenderingHints } from '../model/dataset-api/dataset';\nimport { DatasetOptions } from '../model/internal/options';\nimport { DatasetService } from './dataset.service';\n\nexport abstract class RenderingHintsDatasetService<T extends DatasetOptions | DatasetOptions[]> extends DatasetService<T> {\n\n    constructor(\n        protected api: DatasetApiInterface\n    ) {\n        super();\n    }\n\n    public addDataset(internalId: string, options?: T) {\n        if (options) {\n            this.datasetIds.push(internalId);\n            this.datasetOptions.set(internalId, options);\n        } else if (this.datasetIds.indexOf(internalId) < 0) {\n            this.api.getSingleTimeseriesByInternalId(internalId).subscribe(\n                (timeseries) => this.addLoadedDataset(timeseries),\n                (error) => {\n                    this.api.getDatasetByInternalId(internalId).subscribe(\n                        (dataset) => this.addLoadedDataset(dataset),\n                    );\n                }\n            );\n        }\n    }\n\n    private addLoadedDataset(dataset: IDataset) {\n        this.datasetIds.push(dataset.internalId);\n        this.datasetOptions.set(dataset.internalId, this.createOptionsOfRenderingHints(dataset));\n    }\n\n    private createOptionsOfRenderingHints(dataset: IDataset): T {\n        const options = this.createStyles(dataset.internalId) as DatasetOptions;\n        if (dataset.renderingHints) {\n            if (dataset.renderingHints.properties && dataset.renderingHints.properties.color) {\n                options.color = dataset.renderingHints.properties.color;\n            }\n            switch (dataset.renderingHints.chartType) {\n                case 'line':\n                    this.handleLineRenderingHints(dataset.renderingHints as LineRenderingHints, options);\n                    break;\n                case 'bar':\n                    this.handleBarRenderingHints(dataset.renderingHints as BarRenderingHints, options);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return options as T;\n    }\n\n\n    private handleLineRenderingHints(lineHints: LineRenderingHints, options: DatasetOptions) {\n        if (lineHints.properties.width) {\n            options.lineWidth = Math.round(parseFloat(lineHints.properties.width));\n        }\n    }\n\n    private handleBarRenderingHints(barHints: BarRenderingHints, options: DatasetOptions) {\n        if (barHints.properties.width) {\n            options.lineWidth = Math.round(parseFloat(barHints.properties.width));\n        }\n    }\n}\n","import { HttpParameterCodec, HttpParams } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { ApiInterface } from '../abstract-services/api-interface';\nimport { Category } from '../model/dataset-api/category';\nimport { Data } from '../model/dataset-api/data';\nimport { Dataset, Timeseries, TimeseriesData, TimeseriesExtras } from '../model/dataset-api/dataset';\nimport { Feature } from '../model/dataset-api/feature';\nimport { Offering } from '../model/dataset-api/offering';\nimport { Phenomenon } from '../model/dataset-api/phenomenon';\nimport { Platform } from '../model/dataset-api/platform';\nimport { Procedure } from '../model/dataset-api/procedure';\nimport { Service } from '../model/dataset-api/service';\nimport { Station } from '../model/dataset-api/station';\nimport { DataParameterFilter, HttpRequestOptions, ParameterFilter } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { HttpService } from './http.service';\nimport { DatasetApiV2 } from './interfaces/api-v2.interface';\n\nexport class UriParameterCoder implements HttpParameterCodec {\n\n    public encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    public encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    public decodeKey(key: string): string {\n        return key;\n    }\n\n    public decodeValue(value: string): string {\n        return value;\n    }\n}\n\nexport abstract class DatasetApiInterface extends ApiInterface implements DatasetApiV2 {\n\n    constructor(\n        protected httpService: HttpService,\n        protected translate: TranslateService\n    ) { super(); }\n\n    public abstract getPlatforms(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform[]>;\n    public abstract getPlatform(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform>;\n    public abstract getDatasets(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset[]>;\n    public abstract getDataset(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset>;\n    public abstract getDatasetByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset>;\n    public abstract getData<T>(id: string, apiUrl: string, timespan: Timespan, params?: DataParameterFilter, options?: HttpRequestOptions): Observable<Data<T>>;\n    public abstract getServices(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service[]>;\n    public abstract getService(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service>;\n    public abstract getStations(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station[]>;\n    public abstract getStation(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station>;\n    public abstract getTimeseries(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries[]>;\n    public abstract getTimeseriesData(apiUrl: string, ids: string[], timespan: Timespan, options?: HttpRequestOptions): Observable<TimeseriesData[]>;\n    public abstract getSingleTimeseries(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries>;\n    public abstract getSingleTimeseriesByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries>;\n    public abstract getTimeseriesExtras(id: string, apiUrl: string): Observable<TimeseriesExtras>;\n    public abstract getTsData<T>(id: string, apiUrl: string, timespan: Timespan, params?: DataParameterFilter, options?: HttpRequestOptions): Observable<Data<T>>;\n    public abstract getCategories(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category[]>;\n    public abstract getCategory(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category>;\n    public abstract getPhenomena(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon[]>;\n    public abstract getPhenomenon(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon>;\n    public abstract getOfferings(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering[]>;\n    public abstract getOffering(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering>;\n    public abstract getFeatures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature[]>;\n    public abstract getFeature(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature>;\n    public abstract getProcedures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure[]>;\n    public abstract getProcedure(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure>;\n\n    protected requestApi<T>(\n        url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}\n    ): Observable<T> {\n        return this.httpService.client(options).get<T>(url,\n            {\n                params: this.prepareParams(params),\n                headers: this.createBasicAuthHeader(options.basicAuthToken)\n            }\n        );\n    }\n\n    protected prepareParams(params: ParameterFilter): HttpParams {\n        if (this.translate && this.translate.currentLang) {\n            params.locale = this.translate.currentLang;\n        }\n        let httpParams = new HttpParams({\n            encoder: new UriParameterCoder()\n        });\n        Object.getOwnPropertyNames(params)\n            .forEach((key) => httpParams = httpParams.set(key, params[key]));\n        return httpParams;\n    }\n}\n","import { DatasetTypes, PlatformTypes } from './enums';\nimport { Parameter } from './parameter';\nimport { Station } from './station';\n\nexport interface IDataset extends Parameter {\n    url: string;\n    uom: string;\n    internalId: string;\n    firstValue: FirstLastValue;\n    lastValue: FirstLastValue;\n    referenceValues: ReferenceValue[];\n    parameters: ParameterConstellation;\n    renderingHints: RenderingHints;\n}\n\nexport class ParameterConstellation {\n    public service: Parameter;\n    public offering: Parameter;\n    public feature: Parameter;\n    public procedure: Parameter;\n    public phenomenon: Parameter;\n    public category: Parameter;\n}\n\nexport class FirstLastValue {\n    public timestamp: number;\n    public value: number;\n}\n\nexport class ReferenceValue {\n    public referenceValueId: string;\n    public label: string;\n    public lastValue: FirstLastValue;\n    public color?: string;\n    public visible?: boolean;\n}\n\nexport interface RenderingHints {\n    chartType: string;\n    properties: {\n        color: string;\n    };\n}\n\nexport interface LineRenderingHints extends RenderingHints {\n    chartType: 'line';\n    properties: {\n        color: string;\n        width: string;\n        lineType: string;\n    };\n}\n\nexport interface BarRenderingHints {\n    chartType: 'bar';\n    properties: {\n        color: string;\n        width: string;\n        interval: string;\n    };\n}\n\nexport class DatasetParameterConstellation extends ParameterConstellation {\n    public platform: PlatformParameter;\n}\n\nexport class Dataset implements IDataset {\n    public id: string;\n    public label: string;\n    public url: string;\n    public uom: string;\n    public internalId: string;\n    public firstValue: FirstLastValue;\n    public lastValue: FirstLastValue;\n    public referenceValues: ReferenceValue[];\n    public datasetType: DatasetTypes;\n    public platformType: PlatformTypes;\n    public parameters: DatasetParameterConstellation;\n    public seriesParameters?: DatasetParameterConstellation;\n    public renderingHints: RenderingHints;\n}\n\nexport class Timeseries implements IDataset {\n    public id: string;\n    public label: string;\n    public url: string;\n    public uom: string;\n    public internalId: string;\n    public firstValue: FirstLastValue;\n    public lastValue: FirstLastValue;\n    public referenceValues: ReferenceValue[];\n    public station: Station;\n    public parameters: ParameterConstellation;\n    public statusIntervals?: StatusInterval[];\n    public hasData = false;\n    public renderingHints: RenderingHints;\n}\n\nexport interface TimeseriesExtras {\n    license?: string;\n    statusIntervals?: StatusInterval[];\n}\n\nexport interface StatusInterval {\n    lower: string;\n    upper: string;\n    name: string;\n    color: string;\n}\n\nexport interface PlatformParameter extends Parameter {\n    platformType: PlatformTypes;\n}\n\nexport class TimeseriesData {\n    public id: string;\n    public url: string;\n    public data: FirstLastValue[];\n}\n","import { HttpClient, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { HttpRequestOptions } from '../model/internal/http-requests';\n\nexport const HTTP_SERVICE_INTERCEPTORS = new InjectionToken<HttpServiceInterceptor>('HTTP_SERVICE_INTERCEPTORS');\n\nexport interface HttpServiceHandler {\n    handle(req: HttpRequest<any>, options: Partial<HttpRequestOptions>): Observable<HttpEvent<any>>;\n}\n\nexport interface HttpServiceInterceptor {\n    intercept(req: HttpRequest<any>, options: Partial<HttpRequestOptions>, next: HttpServiceHandler): Observable<HttpEvent<any>>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HttpService {\n\n    private handler: HttpServiceHandler;\n\n    constructor(\n        protected httpHandler: HttpHandler,\n        @Optional() @Inject(HTTP_SERVICE_INTERCEPTORS) interceptors: HttpServiceInterceptor[] | null\n    ) {\n        let handler: HttpServiceHandler = {\n            handle: (req, options) => httpHandler.handle(req)\n        };\n        if (interceptors) {\n            handler = interceptors.reduceRight((next, interceptor) => ({\n                handle: (req, options) => interceptor.intercept(req, options, next)\n            }), handler);\n        }\n        this.handler = handler;\n    }\n\n    public client(options: HttpRequestOptions = {}): HttpClient {\n        return new HttpClient({\n            handle: (req) => this.handler.handle(req, options)\n        });\n    }\n}\n","import 'rxjs/add/operator/map';\n\nimport { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { deserialize, deserializeArray } from 'class-transformer';\nimport { Observable, Observer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Category } from '../model/dataset-api/category';\nimport { Data } from '../model/dataset-api/data';\nimport { Dataset, Timeseries, TimeseriesData, TimeseriesExtras } from '../model/dataset-api/dataset';\nimport { Feature } from '../model/dataset-api/feature';\nimport { Offering } from '../model/dataset-api/offering';\nimport { Phenomenon } from '../model/dataset-api/phenomenon';\nimport { Platform } from '../model/dataset-api/platform';\nimport { Procedure } from '../model/dataset-api/procedure';\nimport { Service } from '../model/dataset-api/service';\nimport { Station } from '../model/dataset-api/station';\nimport { DataParameterFilter, HttpRequestOptions, ParameterFilter } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { DatasetApiInterface } from './api-interface';\nimport { HttpService } from './http.service';\nimport { InternalIdHandler } from './internal-id-handler.service';\n\n@Injectable()\nexport class DatasetImplApiInterface extends DatasetApiInterface {\n\n    constructor(\n        protected httpservice: HttpService,\n        protected internalDatasetId: InternalIdHandler,\n        protected translate: TranslateService\n    ) {\n        super(httpservice, translate);\n    }\n\n    public getServices(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Service[]> {\n        const url = this.createRequestUrl(apiUrl, 'services');\n        if (params) {\n            params.expanded = true;\n        } else {\n            params = { expanded: true };\n        }\n        return this.requestApi<Service[]>(url, params, options).pipe(\n            map((result) => {\n                result.forEach((entry) => entry.apiUrl = apiUrl);\n                return result;\n            }));\n    }\n\n    public getService(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Service> {\n        const url = this.createRequestUrl(apiUrl, 'services', id);\n        return this.requestApi<Service>(url, params, options).pipe(\n            map((result) => {\n                result.apiUrl = apiUrl;\n                return result;\n            }));\n    }\n\n    public getStations(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Station[]> {\n        const url = this.createRequestUrl(apiUrl, 'stations');\n        return this.requestApi<Station[]>(url, params, options);\n    }\n\n    public getStation(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Station> {\n        const url = this.createRequestUrl(apiUrl, 'stations', id);\n        return this.requestApi<Station>(url, params, options);\n    }\n\n    public getTimeseries(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Timeseries[]> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries');\n        return new Observable<Timeseries[]>((observer: Observer<Timeseries[]>) => {\n            this.requestApiTexted(url, params, options).subscribe(\n                (result) => {\n                    const timeseriesList = deserializeArray<Timeseries>(Timeseries, result);\n                    timeseriesList.forEach((entry) => {\n                        entry.url = apiUrl;\n                        this.internalDatasetId.generateInternalId(entry);\n                    });\n                    observer.next(timeseriesList);\n                },\n                (error) => observer.error(error),\n                () => observer.complete()\n            );\n        });\n    }\n\n    public getTimeseriesData(apiUrl: string, ids: string[], timespan: Timespan, options?: HttpRequestOptions): Observable<TimeseriesData[]> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries/getData');\n        return new Observable<TimeseriesData[]>((observer: Observer<Object>) => {\n            this.requestApiTextedPost(url, {\n                timespan: this.createRequestTimespan(timespan),\n                timeseries: ids\n            }, options).subscribe(\n                (result) => {\n                    const timeseriesList: TimeseriesData[] = [];\n                    for (const id in result) {\n                        if (id) {\n                            timeseriesList.push(\n                                {\n                                    id: id,\n                                    url: apiUrl,\n                                    data: result[id].values\n                                }\n                            );\n                        }\n                    }\n                    observer.next(timeseriesList);\n                },\n                (error) => observer.error(error),\n                () => observer.complete()\n            );\n        });\n    }\n\n    public getSingleTimeseries(id: string, apiUrl: string, params?: ParameterFilter): Observable<Timeseries> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id);\n        return this.requestApiTexted(url, params).pipe(map((result) => {\n            const timeseries = deserialize<Timeseries>(Timeseries, result);\n            timeseries.url = apiUrl;\n            this.internalDatasetId.generateInternalId(timeseries);\n            return timeseries;\n        }));\n    }\n\n    public getSingleTimeseriesByInternalId(internalId: string, params?: ParameterFilter): Observable<Timeseries> {\n        const resolvedId = this.internalDatasetId.resolveInternalId(internalId);\n        return this.getSingleTimeseries(resolvedId.id, resolvedId.url, params);\n    }\n\n    public getTimeseriesExtras(id: string, apiUrl: string): Observable<TimeseriesExtras> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id);\n        return this.requestApi<TimeseriesExtras>(url + '/extras');\n    }\n\n    public getTsData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const url = this.createRequestUrl(apiUrl, 'timeseries', id) + '/getData';\n        params.timespan = this.createRequestTimespan(timespan);\n        return this.requestApi<Data<T>>(url, params, options).pipe(\n            map((res: any) => {\n                if (params.expanded) { res = res[id]; }\n                return res;\n            }));\n    }\n\n    public getCategories(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Category[]> {\n        const url = this.createRequestUrl(apiUrl, 'categories');\n        return this.requestApi<Category[]>(url, params, options);\n    }\n\n    public getCategory(id: string, apiUrl: string, params?: ParameterFilter): Observable<Category> {\n        // const url = this.createRequestUrl(apiUrl, 'categories', id);\n        throw new Error('Not implemented');\n        // return this.requestApi(url, params)\n        //     .map(this.extractData);\n    }\n\n    public getPhenomena(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Phenomenon[]> {\n        const url = this.createRequestUrl(apiUrl, 'phenomena');\n        return this.requestApi<Phenomenon[]>(url, params, options);\n    }\n\n    public getPhenomenon(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Phenomenon> {\n        const url = this.createRequestUrl(apiUrl, 'phenomena', id);\n        return this.requestApi<Phenomenon>(url, params, options);\n    }\n\n    public getOfferings(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Offering[]> {\n        const url = this.createRequestUrl(apiUrl, 'offerings');\n        return this.requestApi<Offering[]>(url, params, options);\n    }\n\n    public getOffering(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Offering> {\n        const url = this.createRequestUrl(apiUrl, 'offerings', id);\n        return this.requestApi<Offering>(url, params, options);\n    }\n\n    public getFeatures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Feature[]> {\n        const url = this.createRequestUrl(apiUrl, 'features');\n        return this.requestApi<Feature[]>(url, params, options);\n    }\n\n    public getFeature(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Feature> {\n        const url = this.createRequestUrl(apiUrl, 'features', id);\n        return this.requestApi<Feature>(url, params, options);\n    }\n\n    public getProcedures(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Procedure[]> {\n        const url = this.createRequestUrl(apiUrl, 'procedures');\n        return this.requestApi<Procedure[]>(url, params, options);\n    }\n\n    public getProcedure(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Procedure> {\n        const url = this.createRequestUrl(apiUrl, 'procedures', id);\n        return this.requestApi<Procedure>(url, params, options);\n    }\n\n    public getPlatforms(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Platform[]> {\n        const url = this.createRequestUrl(apiUrl, 'platforms');\n        return this.requestApi<Platform[]>(url, params, options);\n    }\n\n    public getPlatform(\n        id: string,\n        apiUrl: string,\n        params?: ParameterFilter,\n        options?: HttpRequestOptions\n    ): Observable<Platform> {\n        const url = this.createRequestUrl(apiUrl, 'platforms', id);\n        return this.requestApi<Platform>(url, params, options);\n    }\n\n    public getDatasets(apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset[]> {\n        const url = this.createRequestUrl(apiUrl, 'datasets');\n        return this.requestApi<Dataset[]>(url, params, options).pipe(\n            map((list) => list.map((entry) => this.prepareDataset(entry, apiUrl)))\n        );\n    }\n\n    public getDataset(id: string, apiUrl: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset> {\n        const url = this.createRequestUrl(apiUrl, 'datasets', id);\n        return this.requestApi<Dataset>(url, params, options).pipe(\n            map((res) => this.prepareDataset(res, apiUrl))\n        );\n    }\n\n    public getDatasetByInternalId(internalId: string, params?: ParameterFilter, options?: HttpRequestOptions): Observable<Dataset> {\n        const resolvedId = this.internalDatasetId.resolveInternalId(internalId);\n        return this.getDataset(resolvedId.id, resolvedId.url, params, options);\n    }\n\n    public getData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const url = this.createRequestUrl(apiUrl, 'datasets', id) + '/data';\n        params.timespan = this.createRequestTimespan(timespan);\n        return this.requestApi<Data<T>>(url, params, options);\n    }\n\n    // public getGeometries(id: string, apiUrl: string, params?): Observable<> {\n    //     throw new Error('Not implemented');\n    // }\n\n    // protected createRequestTimespan(timespan: Timespan): string {\n    //     return encodeURI(moment(timespan.from).format() + '/' + moment(timespan.to).format());\n    // }\n\n    private requestApiTexted(url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}): Observable<string> {\n        return this.httpservice.client(options).get(url, {\n            params: this.prepareParams(params),\n            responseType: 'text'\n        });\n    }\n\n    private requestApiTextedPost(url: string, params: ParameterFilter = {}, options: HttpRequestOptions = {}): Observable<Object> {\n        return this.httpservice.client().post(url, params, {\n            responseType: 'json'\n        });\n    }\n\n    private prepareDataset(datasetObj: Dataset, apiUrl: string) {\n        const dataset = deserialize<Dataset>(Dataset, JSON.stringify(datasetObj));\n        dataset.url = apiUrl;\n        this.internalDatasetId.generateInternalId(dataset);\n        if (dataset.seriesParameters) {\n            dataset.parameters = dataset.seriesParameters;\n            delete dataset.seriesParameters;\n        }\n        return dataset;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport moment from 'moment';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Data } from '../model/dataset-api/data';\nimport { DataParameterFilter, HttpRequestOptions } from '../model/internal/http-requests';\nimport { Timespan } from '../model/internal/timeInterval';\nimport { DatasetImplApiInterface } from './dataset-impl-api-interface.service';\nimport { HttpService } from './http.service';\nimport { InternalIdHandler } from './internal-id-handler.service';\n\n@Injectable()\nexport class SplittedDataDatasetApiInterface extends DatasetImplApiInterface {\n\n    constructor(\n        protected httpservice: HttpService,\n        protected internalDatasetId: InternalIdHandler,\n        protected translate: TranslateService\n    ) {\n        super(httpservice, internalDatasetId, translate);\n    }\n\n    public getTsData<T>(\n        id: string,\n        apiUrl: string,\n        timespan: Timespan,\n        params: DataParameterFilter = {},\n        options: HttpRequestOptions\n    ): Observable<Data<T>> {\n        const maxTimeExtent = moment.duration(1, 'year').asMilliseconds();\n        if ((timespan.to - timespan.from) > maxTimeExtent) {\n            const requests: Array<Observable<Data<T>>> = [];\n            let start = moment(timespan.from).startOf('year');\n            let end = moment(timespan.from).endOf('year');\n            while (start.isBefore(moment(timespan.to))) {\n                const chunkSpan = new Timespan(start.unix() * 1000, end.unix() * 1000);\n                requests.push(super.getTsData<T>(id, apiUrl, chunkSpan, params, options));\n                start = end.add(1, 'millisecond');\n                end = moment(start).endOf('year');\n            }\n            return forkJoin(requests).pipe(map((entry) => {\n                return entry.reduce((previous, current) => {\n                    const next: Data<T> = {\n                        referenceValues: {},\n                        values: previous.values.concat(current.values)\n                    };\n                    for (const key in previous.referenceValues) {\n                        if (previous.referenceValues.hasOwnProperty(key)) {\n                            next.referenceValues[key] = previous.referenceValues[key].concat(current.referenceValues[key]);\n                        }\n                    }\n                    return next;\n                });\n            }));\n        } else {\n            return super.getTsData<T>(id, apiUrl, timespan, params, options);\n        }\n    }\n\n}\n","import { TranslateService } from '@ngx-translate/core';\n\nexport abstract class LanguageChangNotifier {\n\n    constructor(\n        protected translate: TranslateService\n    ) {\n        this.translate.onLangChange.subscribe(() => this.languageChanged());\n    }\n\n    protected abstract languageChanged(): void;\n\n}\n","import { Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { Language } from './model/language';\n\nexport abstract class LocalSelectorComponent implements OnChanges {\n\n    @Input()\n    public languageList: Language[];\n\n    public currentLang: Language;\n\n    constructor(\n        protected translate: TranslateService\n    ) { }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.languageList) {\n            this.setCurrentLang();\n        }\n    }\n\n    public setLanguage(lang: Language) {\n        this.translate.use(lang.code);\n        this.setCurrentLang();\n    }\n\n    private setCurrentLang() {\n        this.currentLang = this.languageList.find((e) => e.code === this.translate.currentLang);\n    }\n\n}\n","// tslint:disable-next-line:no-empty-interface\nexport interface IDataEntry { }\n\nexport interface Data<T extends IDataEntry> {\n    values: T[];\n    referenceValues: ReferenceValues<T>;\n    valueBeforeTimespan?: T;\n    valueAfterTimespan?: T;\n}\n\nexport class ReferenceValues<T extends IDataEntry> {\n    [key: string]: T[];\n}\n\nexport interface TimeValueEntry extends IDataEntry {\n    timestamp: number;\n    value: number;\n}\n\nexport interface LocatedTimeValueEntry extends TimeValueEntry {\n    geometry: GeoJSON.Point;\n}\n\nexport interface ProfileDataEntry extends IDataEntry {\n    timestamp: number;\n    value: Array<{ value: number, vertical: number }>;\n    verticalUnit: string;\n}\n\nexport interface LocatedProfileDataEntry extends ProfileDataEntry {\n    timestamp: number;\n    value: Array<{ value: number, vertical: number }>;\n    verticalUnit: string;\n    geometry: GeoJSON.GeoJsonObject;\n}\n","import { ParameterConstellation, Timeseries } from './dataset';\nimport { Parameter } from './parameter';\n\nexport class Station {\n    public id: string;\n    public geometry: GeoJSON.GeometryObject;\n    public properties: StationProperties;\n}\n\nexport interface StationProperties extends Parameter {\n    timeseries: TimeseriesCollection | Timeseries;\n}\n\nexport class TimeseriesCollection {\n    [key: string]: ParameterConstellation;\n}\n","export enum PlatformTypes {\n    stationary = 'stationary',\n    mobile = 'mobile',\n    mobileInsitu = 'mobile_insitu'\n}\n\nexport enum ValueTypes {\n    quantity = 'quantity',\n    quantityProfile = 'quantity-profile'\n}\n\nexport enum DatasetTypes {\n    measurement\n}\n","import { ParameterFilter } from './../internal/http-requests';\n\nexport class Filter {\n    public url: string;\n    public service: string;\n    public itemId: string;\n    public filter: ParameterFilter;\n}\n","/**\n * Options for each dataset.\n *\n * @export\n */\nexport class DatasetOptions {\n\n    /**\n     * internal dataset id\n     *\n     * @memberof DatasetOptions\n     */\n    public internalId: string;\n\n    /**\n     * color of the dataset\n     *\n     * @memberof DatasetOptions\n     */\n    public color: string;\n\n    /**\n     * show or hide in the graph\n     *\n     * @memberof DatasetOptions\n     */\n    public visible: boolean = true;\n\n    /**\n     * separate y axis of datasets with same unit\n     *\n     * @memberof DatasetOptions\n     */\n    public separateYAxis?: boolean = false;\n\n    /**\n     * align graph that zero y axis is visible\n     *\n     * @memberof DatasetOptions\n     */\n    public zeroBasedYAxis?: boolean = false;\n\n    /**\n     * auto zoom when range selection\n     *\n     * @memberof DatasetOptions\n     */\n    autoRangeSelection?: boolean = false;\n\n    /**\n     * marker to request dataset data generalized\n     *\n     * @memberof DatasetOptions\n     */\n    public generalize?: boolean = false;\n\n    /**\n     * list of visible reference values\n     *\n     * @memberof DatasetOptions\n     */\n    public showReferenceValues: ReferenceValueOption[] = [];\n\n    /**\n     * radius of graphpoint\n     *\n     * @memberof DatasetOptions\n     */\n    public pointRadius: number = 0;\n\n    /**\n     * width of graphline\n     *\n     * @memberof DatasetOptions\n     */\n    public lineWidth: number = 1;\n\n    /**\n     * min and max range of y axis\n     *\n     * @memberof DatasetOptions\n     */\n    public yAxisRange?: MinMaxRange;\n\n    constructor(\n        internalId: string,\n        color: string\n    ) {\n        this.internalId = internalId;\n        this.color = color;\n    }\n}\n\nexport class ReferenceValueOption {\n    public id: string;\n    public color: string;\n}\n\n/**\n * numbered range with a min and a max value\n *\n * @export\n */\nexport interface MinMaxRange {\n    min: number;\n    max: number;\n}\n\nexport class TimedDatasetOptions extends DatasetOptions {\n    public timestamp: number;\n\n    constructor(\n        internalId: string,\n        color: string,\n        timestamp: number\n    ) {\n        super(internalId, color);\n        this.timestamp = timestamp;\n    }\n}\n","export class IdCache<T> {\n\n    private cache: Map<string, T> = new Map();\n\n    public has(id: string): boolean {\n        return this.cache.has(id);\n    }\n\n    public get(id: string): T {\n        return this.cache.get(id);\n    }\n\n    public set(id: string, value: T) {\n        this.cache.set(id, value);\n    }\n\n}\n","export function Mixin(baseCtors: any[]) {\n    return (derivedCtor: any) => {\n        baseCtors.forEach((baseCtor) => {\n            Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            });\n        });\n    };\n}\n","import { EventEmitter } from '@angular/core';\n\nexport class HasLoadableContent {\n\n    public onContentLoading: EventEmitter<boolean>;\n\n    public isContentLoading(loading: boolean) {\n        this.onContentLoading.emit(loading);\n    }\n\n}\n","import { HostListener } from '@angular/core';\n\nexport abstract class ResizableComponent {\n\n    @HostListener('window:resize', ['$event'])\n    public onWindowResize(event: Event) {\n        this.onResize();\n    }\n\n    protected abstract onResize(): void;\n\n}\n","import {\n    DoCheck,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\n\nimport { DatasetApiInterface } from '../dataset-api/api-interface';\nimport { InternalIdHandler } from '../dataset-api/internal-id-handler.service';\nimport { DatasetOptions } from '../model/internal/options';\nimport { ResizableComponent } from '../model/internal/ResizableComponent';\nimport { TimeInterval, Timespan } from '../model/internal/timeInterval';\nimport { HasLoadableContent } from '../model/mixins/has-loadable-content';\nimport { Time } from '../time/time.service';\nimport { PresenterMessage } from './presenter-message';\n\nconst equal = require('deep-equal');\n\nexport interface PresenterOptions { }\n\n/**\n * Abstract superclass for all components, which will present datasets.\n */\nexport abstract class DatasetPresenterComponent<T extends DatasetOptions | DatasetOptions[], U extends PresenterOptions>\n    extends ResizableComponent implements OnChanges, DoCheck, OnDestroy, HasLoadableContent {\n\n    /**\n     * List of presented dataset ids.\n     */\n    @Input()\n    public datasetIds: string[] = [];\n\n    /**\n     * List of presented selected dataset ids.\n     */\n    @Input()\n    public selectedDatasetIds: string[] = [];\n\n    /**\n     * The time interval in which the data should presented.\n     */\n    @Input()\n    public timeInterval: TimeInterval;\n\n    /**\n     * The corresponding dataset options.\n     */\n    @Input()\n    public datasetOptions: Map<string, T>;\n    protected oldDatasetOptions: Map<string, T>;\n\n    /**\n     * Options for general presentation of the data.\n     */\n    @Input()\n    public presenterOptions: U;\n    protected oldPresenterOptions: U;\n\n    /**\n     * List of datasets for which a reload should be triggered, when the Array is set to new value.\n     */\n    @Input()\n    public reloadForDatasets: string[];\n\n    /**\n     * Event with a list of selected datasets.\n     */\n    @Output()\n    public onDatasetSelected: EventEmitter<string[]> = new EventEmitter();\n\n    /**\n     * Event when the timespan in the presentation is adjusted.\n     */\n    @Output()\n    public onTimespanChanged: EventEmitter<Timespan> = new EventEmitter();\n\n    /**\n     * Event, when there occured a message in the component.\n     */\n    @Output()\n    public onMessageThrown: EventEmitter<PresenterMessage> = new EventEmitter();\n\n    /**\n     * Event flag, while there is data loaded in the component.\n     */\n    @Output()\n    public onContentLoading: EventEmitter<boolean> = new EventEmitter();\n\n    public isContentLoading: (loading: boolean) => void;\n\n    protected timespan: Timespan;\n\n    private datasetIdsDiffer: IterableDiffer<string>;\n    private selectedDatasetIdsDiffer: IterableDiffer<string>;\n    private langChangeSubscription: Subscription;\n\n    constructor(\n        protected iterableDiffers: IterableDiffers,\n        protected api: DatasetApiInterface,\n        protected datasetIdResolver: InternalIdHandler,\n        protected timeSrvc: Time,\n        protected translateService: TranslateService\n    ) {\n        super();\n        this.datasetIdsDiffer = this.iterableDiffers.find([]).create();\n        this.selectedDatasetIdsDiffer = this.iterableDiffers.find([]).create();\n        this.langChangeSubscription = this.translateService.onLangChange.subscribe((langChangeEvent: LangChangeEvent) => this.onLanguageChanged(langChangeEvent));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeInterval && this.timeInterval) {\n            this.timespan = this.timeSrvc.createTimespanOfInterval(this.timeInterval);\n            this.timeIntervalChanges();\n        }\n        if (changes.reloadForDatasets && this.reloadForDatasets && this.reloadDataForDatasets.length > 0) {\n            this.reloadDataForDatasets(this.reloadForDatasets);\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.langChangeSubscription.unsubscribe();\n    }\n\n    public ngDoCheck(): void {\n        const datasetIdsChanges = this.datasetIdsDiffer.diff(this.datasetIds);\n        if (datasetIdsChanges) {\n            datasetIdsChanges.forEachAddedItem((addedItem) => {\n                this.addDatasetByInternalId(addedItem.item);\n            });\n            datasetIdsChanges.forEachRemovedItem((removedItem) => {\n                this.removeDataset(removedItem.item);\n            });\n        }\n\n        const selectedDatasetIdsChanges = this.selectedDatasetIdsDiffer.diff(this.selectedDatasetIds);\n        if (selectedDatasetIdsChanges) {\n            selectedDatasetIdsChanges.forEachAddedItem((addedItem) => {\n                this.setSelectedId(addedItem.item);\n            });\n            selectedDatasetIdsChanges.forEachRemovedItem((removedItem) => {\n                this.removeSelectedId(removedItem.item);\n            });\n        }\n\n        if (!equal(this.oldPresenterOptions, this.presenterOptions)) {\n            this.oldPresenterOptions = Object.assign({}, this.presenterOptions);\n            const options = Object.assign({}, this.presenterOptions);\n            this.presenterOptionsChanged(options);\n        }\n\n        if (this.datasetOptions) {\n            const firstChange = this.oldDatasetOptions === undefined;\n            if (firstChange) { this.oldDatasetOptions = new Map(); }\n            this.datasetOptions.forEach((value, key) => {\n                if (!equal(value, this.oldDatasetOptions.get(key))) {\n                    this.oldDatasetOptions.set(key, Object.assign({}, this.datasetOptions.get(key)));\n                    this.datasetOptionsChanged(key, value, firstChange);\n                }\n            });\n        }\n    }\n\n    public abstract reloadDataForDatasets(datasets: string[]): void;\n\n    protected addDatasetByInternalId(internalId: string) {\n        const internalIdObj = this.datasetIdResolver.resolveInternalId(internalId);\n        this.addDataset(internalIdObj.id, internalIdObj.url);\n    }\n\n    protected abstract onLanguageChanged(langChangeEvent: LangChangeEvent): void;\n\n    protected abstract timeIntervalChanges(): void;\n\n    protected abstract addDataset(id: string, url: string): void;\n\n    protected abstract removeDataset(internalId: string): void;\n\n    protected abstract setSelectedId(internalId: string): void;\n\n    protected abstract removeSelectedId(internalId: string): void;\n\n    protected abstract presenterOptionsChanged(options: U): void;\n\n    protected abstract datasetOptionsChanged(internalId: string, options: T, firstChange: boolean): void;\n\n}\n","export enum PresenterMessageType {\n    ERROR,\n    INFO\n}\n","import { Settings } from '../model/settings/settings';\n\nexport abstract class SettingsService<T extends Settings> {\n\n    private settings: T;\n\n    constructor() {\n        // Default empty settings\n        this.settings = {} as T;\n    }\n\n    public getSettings() {\n        return this.settings;\n    }\n\n    protected setSettings(settings: T) {\n        this.settings = settings;\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { forkJoin, Observable, Observer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * This class checks URLs if they are reachable by a simple get request. If they gets anything back, everything is ok, otherwise\n * the corresponding method gives back the URLs which are not reachable.\n */\n@Injectable()\nexport class StatusCheckService {\n\n  private urls: string[] = [];\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  /**\n   * Checks all internal registered URLs if they are reachable. Gives back every URL, which was not reachable\n   */\n  public checkAll(): Observable<string[]> {\n    return this.doCheck(this.urls);\n  }\n\n  /**\n   * Checks the given URL.\n   * @returns Observable with the URL if not reachable.\n   */\n  public checkUrl(url: string): Observable<string> {\n    return this.doCheckUrl(url);\n  }\n\n  /**\n   * Checks the given URLs.\n   * @returns Observable of all not reachable URLs.\n   */\n  public checkUrls(urls: string[]): Observable<string[]> {\n    return this.doCheck(urls);\n  }\n\n  /**\n   * Adds the URL to the internal collection.\n   */\n  public addUrl(url: string) {\n    const index = this.urls.indexOf(url);\n    if (index === -1) { this.urls.push(url); }\n  }\n\n  /**\n   * Removes the URL of the internal collection.\n   */\n  public removeUrl(url: string) {\n    const index = this.urls.indexOf(url);\n    if (index > -1) { this.urls.splice(index, 1); }\n  }\n\n  private doCheckUrl(url: string): Observable<string> {\n    return new Observable((observer: Observer<string>) => {\n      this.httpClient.get(url).subscribe(\n        (res) => {\n          observer.next(null);\n          observer.complete();\n        },\n        (error) => {\n          observer.next(url);\n          observer.complete();\n        }\n      );\n    });\n  }\n\n  private doCheck(urls: string[]): Observable<string[]> {\n    const requests: Array<Observable<string>> = [];\n    urls.forEach((url) => requests.push(this.doCheckUrl(url)));\n    return forkJoin(requests).pipe(\n      map((checkedUrls) => {\n        return checkedUrls.filter((entry) => {\n          if (entry) {\n            return entry;\n          }\n        });\n      })\n    );\n  }\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
