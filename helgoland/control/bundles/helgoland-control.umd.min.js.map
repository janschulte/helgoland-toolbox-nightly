{"version":3,"sources":["ng://@helgoland/control/lib/bool-toggler/bool-toggler.component.ts","ng://@helgoland/control/lib/refresh-button/refresh-button.component.ts","ng://@helgoland/control/lib/string-toggler/string-toggler.component.ts","ng://@helgoland/control/lib/control.module.ts"],"names":["BoolTogglerComponent","EventEmitter","prototype","toggle","this","onToggled","emit","value","Component","args","selector","template","Input","Output","RefreshButtonComponent","settings","refreshInterval","getSettings","refreshDataInterval","ngOnInit","evaluteRefreshing","ngOnChanges","changes","toggled","refresh","startRefreshInterval","stopRefreshInterval","interval","setInterval","_this","clearInterval","refreshing","SettingsService","StringTogglerComponent","isToggled","option","COMPONENTS","NgModule","declarations","imports","CommonModule","exports","providers"],"mappings":"2ZAAA,IAAAA,EAAA,uCAoB8C,IAAIC,EAAAA,oBAEvCD,EAAAE,UAAAC,kBACHC,KAAKC,UAAUC,MAAMF,KAAKG,4BArBjCC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,mBACVC,SAAU,qOAMTC,EAAAA,oBAGAA,EAAAA,uBAGAA,EAAAA,yBAGAC,EAAAA,YAnBL,GCAAC,EAAA,WAuBE,SAAAA,EACYC,GAAAX,KAAAW,SAAAA,kBAL+B,IAAId,EAAAA,aAOxCG,KAAKY,kBACRZ,KAAKY,gBAAkBZ,KAAKW,SAASE,cAAcC,oBAC/Cd,KAAKW,SAASE,cAAcC,oBAAsB,WAInDJ,EAAAZ,UAAAiB,oBACLf,KAAKgB,qBAGAN,EAAAZ,UAAAmB,qBAAYC,GACbA,EAAO,SACTlB,KAAKgB,qBAIFN,EAAAZ,UAAAC,kBACLC,KAAKmB,SAAWnB,KAAKmB,QACjBnB,KAAKmB,SAAWnB,KAAKoB,UACzBpB,KAAKgB,qBAGCN,EAAAZ,UAAAkB,6BACFhB,KAAKmB,QACPnB,KAAKqB,uBAELrB,KAAKsB,uBAIDZ,EAAAZ,UAAAuB,2CACNrB,KAAKuB,SAAWC,YAAY,WAAM,OAAAC,EAAKL,WAAkC,IAAvBpB,KAAKY,kBAGjDF,EAAAZ,UAAAwB,+BACNI,cAAc1B,KAAKuB,WAGbb,EAAAZ,UAAAsB,mBACNpB,KAAK2B,WAAWzB,MAAK,wBA9DxBE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAU,qQAJOqB,EAAAA,4DAWhBpB,EAAAA,uBAGAA,EAAAA,0BAGAC,EAAAA,YAlBH,GCAAoB,EAAA,uCAuB6C,IAAIhC,EAAAA,oBAItCgC,EAAA/B,UAAAmB,qBAAYC,GACXA,EAAO,QACPlB,KAAK8B,UAAY9B,KAAK+B,SAAW/B,KAAKG,QAIvC0B,EAAA/B,UAAAC,kBACHC,KAAKC,UAAUC,KAAKF,KAAK+B,6BAhChC3B,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,qBACVC,SAAU,yOAMTC,EAAAA,sBAGAA,EAAAA,oBAGAA,EAAAA,uBAGAA,EAAAA,yBAGAC,EAAAA,YAtBL,GCOMuB,EAAa,CACjBpC,EACAiC,EACAnB,yDAGDuB,EAAAA,SAAQ5B,KAAA,CAAC,CACR6B,aAAc,CACZF,GAEFG,QAAS,CACPC,EAAAA,cAEFC,QAAS,CACPL,GAEFM,UAAW","sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'n52-bool-toggler',\n    template: `<button type=\"button\" class=\"btn\" (click)=\"toggle()\" [ngClass]=\"value ? 'btn-primary' : 'btn-light'\" title=\"{{tooltip}}\">\n    <i class=\"fa fa-{{icon}}\" aria-hidden=\"true\"></i>\n</button>`\n})\nexport class BoolTogglerComponent {\n\n    @Input()\n    public value: boolean;\n\n    @Input()\n    public icon: string;\n\n    @Input()\n    public tooltip: string;\n\n    @Output()\n    public onToggled: EventEmitter<boolean> = new EventEmitter();\n\n    public toggle() {\n        this.onToggled.emit(!this.value);\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Settings, SettingsService } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-refresh-button',\n  template: `<button type=\"button\" class=\"btn\" (click)=\"toggle()\" [ngClass]=\"toggled ? 'btn-primary' : 'btn-light'\">\n    <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n    <span *ngIf=\"toggled\">active</span>\n</button>`\n})\nexport class RefreshButtonComponent implements OnChanges, OnInit {\n\n  @Input()\n  public refreshInterval: number;\n\n  @Input()\n  public toggled: boolean;\n\n  @Output()\n  public refreshing: EventEmitter<boolean> = new EventEmitter();\n\n  private interval: NodeJS.Timer;\n\n  constructor(\n    protected settings: SettingsService<Settings>\n  ) {\n    if (!this.refreshInterval) {\n      this.refreshInterval = this.settings.getSettings().refreshDataInterval\n        ? this.settings.getSettings().refreshDataInterval : 60;\n    }\n  }\n\n  public ngOnInit(): void {\n    this.evaluteRefreshing();\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.toggled) {\n      this.evaluteRefreshing();\n    }\n  }\n\n  public toggle() {\n    this.toggled = !this.toggled;\n    if (this.toggled) { this.refresh(); }\n    this.evaluteRefreshing();\n  }\n\n  private evaluteRefreshing() {\n    if (this.toggled) {\n      this.startRefreshInterval();\n    } else {\n      this.stopRefreshInterval();\n    }\n  }\n\n  private startRefreshInterval() {\n    this.interval = setInterval(() => this.refresh(), this.refreshInterval * 1000);\n  }\n\n  private stopRefreshInterval() {\n    clearInterval(this.interval);\n  }\n\n  private refresh() {\n    this.refreshing.emit(true);\n  }\n\n}\n","import { Component, Input, OnChanges, Output, SimpleChanges, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'n52-string-toggler',\n    template: `<button type=\"button\" class=\"btn\" (click)=\"toggle()\" [ngClass]=\"isToggled ? 'btn-primary' : 'btn-light'\" title=\"{{tooltip}}\">\n    <i class=\"fa fa-{{icon}}\" aria-hidden=\"true\"></i>\n</button>`\n})\nexport class StringTogglerComponent implements OnChanges {\n\n    @Input()\n    public value: string;\n\n    @Input()\n    public option: string;\n\n    @Input()\n    public icon: string;\n\n    @Input()\n    public tooltip: string;\n\n    @Output()\n    public onToggled: EventEmitter<string> = new EventEmitter();\n\n    public isToggled: boolean;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.value) {\n            this.isToggled = this.option === this.value;\n        }\n    }\n\n    public toggle() {\n        this.onToggled.emit(this.option);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { BoolTogglerComponent } from './bool-toggler/bool-toggler.component';\nimport { RefreshButtonComponent } from './refresh-button/refresh-button.component';\nimport { StringTogglerComponent } from './string-toggler/string-toggler.component';\n\nconst COMPONENTS = [\n  BoolTogglerComponent,\n  StringTogglerComponent,\n  RefreshButtonComponent\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    COMPONENTS\n  ],\n  providers: [\n  ]\n})\nexport class HelgolandControlModule { }\n"]}