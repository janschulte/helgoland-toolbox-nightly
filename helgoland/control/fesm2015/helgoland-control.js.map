{"version":3,"file":"helgoland-control.js.map","sources":["ng://@helgoland/control/lib/bool-toggler/bool-toggler.component.ts","ng://@helgoland/control/lib/refresh-button/refresh-button.component.ts","ng://@helgoland/control/lib/string-toggler/string-toggler.component.ts","ng://@helgoland/control/lib/control.module.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'n52-bool-toggler',\n    template: `<button type=\"button\" class=\"btn\" (click)=\"toggle()\" [ngClass]=\"value ? 'btn-primary' : 'btn-light'\" title=\"{{tooltip}}\">\n    <i class=\"fa fa-{{icon}}\" aria-hidden=\"true\"></i>\n</button>`\n})\nexport class BoolTogglerComponent {\n\n    @Input()\n    public value: boolean;\n\n    @Input()\n    public icon: string;\n\n    @Input()\n    public tooltip: string;\n\n    @Output()\n    public onToggled: EventEmitter<boolean> = new EventEmitter();\n\n    public toggle() {\n        this.onToggled.emit(!this.value);\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Settings, SettingsService } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-refresh-button',\n  template: `<button type=\"button\" class=\"btn\" (click)=\"toggle()\" [ngClass]=\"toggled ? 'btn-primary' : 'btn-light'\">\n    <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n    <span *ngIf=\"toggled\">active</span>\n</button>`\n})\nexport class RefreshButtonComponent implements OnChanges, OnInit {\n\n  @Input()\n  public refreshInterval: number;\n\n  @Input()\n  public toggled: boolean;\n\n  @Output()\n  public refreshing: EventEmitter<boolean> = new EventEmitter();\n\n  private interval: NodeJS.Timer;\n\n  constructor(\n    protected settings: SettingsService<Settings>\n  ) {\n    if (!this.refreshInterval) {\n      this.refreshInterval = this.settings.getSettings().refreshDataInterval\n        ? this.settings.getSettings().refreshDataInterval : 60;\n    }\n  }\n\n  public ngOnInit(): void {\n    this.evaluteRefreshing();\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.toggled) {\n      this.evaluteRefreshing();\n    }\n  }\n\n  public toggle() {\n    this.toggled = !this.toggled;\n    if (this.toggled) { this.refresh(); }\n    this.evaluteRefreshing();\n  }\n\n  private evaluteRefreshing() {\n    if (this.toggled) {\n      this.startRefreshInterval();\n    } else {\n      this.stopRefreshInterval();\n    }\n  }\n\n  private startRefreshInterval() {\n    this.interval = setInterval(() => this.refresh(), this.refreshInterval * 1000);\n  }\n\n  private stopRefreshInterval() {\n    clearInterval(this.interval);\n  }\n\n  private refresh() {\n    this.refreshing.emit(true);\n  }\n\n}\n","import { Component, Input, OnChanges, Output, SimpleChanges, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'n52-string-toggler',\n    template: `<button type=\"button\" class=\"btn\" (click)=\"toggle()\" [ngClass]=\"isToggled ? 'btn-primary' : 'btn-light'\" title=\"{{tooltip}}\">\n    <i class=\"fa fa-{{icon}}\" aria-hidden=\"true\"></i>\n</button>`\n})\nexport class StringTogglerComponent implements OnChanges {\n\n    @Input()\n    public value: string;\n\n    @Input()\n    public option: string;\n\n    @Input()\n    public icon: string;\n\n    @Input()\n    public tooltip: string;\n\n    @Output()\n    public onToggled: EventEmitter<string> = new EventEmitter();\n\n    public isToggled: boolean;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.value) {\n            this.isToggled = this.option === this.value;\n        }\n    }\n\n    public toggle() {\n        this.onToggled.emit(this.option);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { BoolTogglerComponent } from './bool-toggler/bool-toggler.component';\nimport { RefreshButtonComponent } from './refresh-button/refresh-button.component';\nimport { StringTogglerComponent } from './string-toggler/string-toggler.component';\n\nconst COMPONENTS = [\n  BoolTogglerComponent,\n  StringTogglerComponent,\n  RefreshButtonComponent\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    COMPONENTS\n  ],\n  providers: [\n  ]\n})\nexport class HelgolandControlModule { }\n"],"names":[],"mappings":";;;;;;;;AAAA;;yBAoB8C,IAAI,YAAY,EAAE;;;;;IAErD,MAAM;QACT,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;YArBxC,SAAS,SAAC;gBACP,QAAQ,EAAE,kBAAkB;gBAC5B,QAAQ,EAAE;;UAEJ;aACT;;;oBAGI,KAAK;mBAGL,KAAK;sBAGL,KAAK;wBAGL,MAAM;;;;;;;ACnBX;;;;IAuBE,YACY,QAAmC;QAAnC,aAAQ,GAAR,QAAQ,CAA2B;0BALJ,IAAI,YAAY,EAAE;QAO3D,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,mBAAmB;kBAClE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,mBAAmB,GAAG,EAAE,CAAC;SAC1D;KACF;;;;IAEM,QAAQ;QACb,IAAI,CAAC,iBAAiB,EAAE,CAAC;;;;;;IAGpB,WAAW,CAAC,OAAsB;QACvC,IAAI,OAAO,aAAU;YACnB,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;;;;;IAGI,MAAM;QACX,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,IAAI,CAAC,OAAO,EAAE;YAAE,IAAI,CAAC,OAAO,EAAE,CAAC;SAAE;QACrC,IAAI,CAAC,iBAAiB,EAAE,CAAC;;;;;IAGnB,iBAAiB;QACvB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5B;;;;;IAGK,oBAAoB;QAC1B,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;;;;;IAGzE,mBAAmB;QACzB,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;;;IAGvB,OAAO;QACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;YA9D9B,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE;;;UAGF;aACT;;;;YARkB,eAAe;;;8BAW/B,KAAK;sBAGL,KAAK;yBAGL,MAAM;;;;;;;AClBT;;yBAuB6C,IAAI,YAAY,EAAE;;;;;;IAIpD,WAAW,CAAC,OAAsB;QACrC,IAAI,OAAO,WAAQ;YACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC;SAC/C;;;;;IAGE,MAAM;QACT,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;;YAhCxC,SAAS,SAAC;gBACP,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE;;UAEJ;aACT;;;oBAGI,KAAK;qBAGL,KAAK;mBAGL,KAAK;sBAGL,KAAK;wBAGL,MAAM;;;;;;;ACtBX;AAOA,MAAM,UAAU,GAAG;IACjB,oBAAoB;IACpB,sBAAsB;IACtB,sBAAsB;CACvB,CAAC;AAeF;;;YAbC,QAAQ,SAAC;gBACR,YAAY,EAAE;oBACZ,UAAU;iBACX;gBACD,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,OAAO,EAAE;oBACP,UAAU;iBACX;gBACD,SAAS,EAAE,EACV;aACF;;;;;;;;;;;;;;;"}
