import { AfterViewInit, ElementRef, EventEmitter, IterableDiffers, OnChanges, SimpleChanges } from '@angular/core';
import { DatasetApiInterface, DatasetOptions, DatasetPresenterComponent, InternalIdHandler, Time } from '@helgoland/core';
import { LangChangeEvent, TranslateService } from '@ngx-translate/core';
import { D3GraphOptions } from '../model/d3-graph-options';
import { D3SelectionRange } from '../model/d3-selection-range';
export declare class D3TrajectoryGraphComponent extends DatasetPresenterComponent<DatasetOptions, D3GraphOptions> implements AfterViewInit, OnChanges {
    protected iterableDiffers: IterableDiffers;
    protected api: DatasetApiInterface;
    protected datasetIdResolver: InternalIdHandler;
    protected timeSrvc: Time;
    protected translateService: TranslateService;
    selection: D3SelectionRange;
    onSelectionChangedFinished: EventEmitter<D3SelectionRange>;
    onSelectionChanged: EventEmitter<D3SelectionRange>;
    onHoverHighlight: EventEmitter<number>;
    d3Elem: ElementRef;
    private datasetMap;
    private rawSvg;
    private graph;
    private height;
    private width;
    private margin;
    private maxLabelwidth;
    private lineFun;
    private area;
    private xScaleBase;
    private yScaleBase;
    private background;
    private focusG;
    private highlightFocus;
    private focuslabelTime;
    private focuslabelY;
    private yAxisGen;
    private baseValues;
    private dragging;
    private dragStart;
    private dragCurrent;
    private dragRect;
    private dragRectG;
    private bufferSum;
    private dataLength;
    private defaultGraphOptions;
    constructor(iterableDiffers: IterableDiffers, api: DatasetApiInterface, datasetIdResolver: InternalIdHandler, timeSrvc: Time, translateService: TranslateService);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    reloadDataForDatasets(datasetIds: string[]): void;
    protected onLanguageChanged(langChangeEvent: LangChangeEvent): void;
    protected timeIntervalChanges(): void;
    protected addDataset(id: string, url: string): void;
    protected removeDataset(internalId: string): void;
    protected setSelectedId(internalId: string): void;
    protected removeSelectedId(internalId: string): void;
    protected presenterOptionsChanged(options: D3GraphOptions): void;
    protected datasetOptionsChanged(internalId: string, options: DatasetOptions, firstChange: boolean): void;
    protected onResize(): void;
    private loadData(dataset);
    private processAllData();
    private processDataForId(internalId);
    private createDataEntry(internalId, entry, previous, index);
    private distanceBetween(latitude1, longitude1, latitude2, longitude2);
    private calcYValue;
    private calcXValue;
    private calculateHeight();
    private calculateWidth();
    private getXValue(data);
    private drawDots(values, yScale, options);
    private drawValueLine(values, yScale, options);
    private drawGraph(yScale, options);
    private drawLineGraph();
    private mousemoveHandler;
    private mouseoutHandler;
    private dragStartHandler;
    private dragHandler;
    private dragEndHandler;
    private prepareRange(from, to);
    private drawDragRectangle();
    private resetDrag();
    private hideDiagramIndicator();
    private showDiagramIndicator;
    private showLabelValues(item, onLeftSide);
    private showTimeIndicatorLabel(item, onLeftSide);
    private showBottomIndicatorLabel(item, onLeftSide);
    private getDimensions(el);
    private getItemForX(x, data);
    private drawYAxis(options);
    private drawXAxis(buffer);
    private getXDomain(values);
    private getXAxisLabel();
}
