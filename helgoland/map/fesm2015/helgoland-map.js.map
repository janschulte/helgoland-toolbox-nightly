{"version":3,"file":"helgoland-map.js.map","sources":["ng://@helgoland/map/lib/base/map-cache.service.ts","ng://@helgoland/map/lib/base/map.module.ts","ng://@helgoland/map/lib/base/cached-map-component.ts","ng://@helgoland/map/lib/base/geosearch/geosearch.ts","ng://@helgoland/map/lib/base/geosearch/nominatim.service.ts","ng://@helgoland/map/lib/base/geocure/geocure-layer.ts","ng://@helgoland/map/lib/view/geometry-map-viewer/geometry-map-viewer.component.ts","ng://@helgoland/map/lib/view/module.ts","ng://@helgoland/map/lib/control/extent/extent.component.ts","ng://@helgoland/map/lib/control/geosearch/geosearch.component.ts","ng://@helgoland/map/lib/control/locate/locate.service.ts","ng://@helgoland/map/lib/control/locate/locate.component.ts","ng://@helgoland/map/lib/control/zoom/zoom.component.ts","ng://@helgoland/map/lib/control/module.ts","ng://@helgoland/map/lib/selector/map-selector.component.ts","ng://@helgoland/map/lib/selector/services/last-value-label-generator.interface.ts","ng://@helgoland/map/lib/selector/last-value-map-selector/last-value-map-selector.component.ts","ng://@helgoland/map/lib/selector/platform-map-selector/platform-map-selector.component.ts","ng://@helgoland/map/lib/selector/services/last-value-label-generator.service.ts","ng://@helgoland/map/lib/selector/station-map-selector/station-map-selector.component.ts","ng://@helgoland/map/lib/selector/trajectory-map-selector/trajectory-map-selector.component.ts","ng://@helgoland/map/lib/selector/module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as L from 'leaflet';\n\n@Injectable()\nexport class MapCache {\n\n    private mapCache: Map<string, any> = new Map<string, any>();\n\n    public getMap(id: string): L.Map {\n        return this.mapCache.get(id);\n    }\n\n    public setMap(id: string, map: L.Map) {\n        this.mapCache.set(id, map);\n    }\n\n    public hasMap(id: string): boolean {\n        return this.mapCache.has(id);\n    }\n\n    public deleteMap(id: string): boolean {\n        return this.mapCache.delete(id);\n    }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { MapCache } from './map-cache.service';\n\nconst COMPONENTS = [\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n  ],\n  exports: [\n    COMPONENTS\n  ],\n  providers: [\n    MapCache\n  ]\n})\nexport class HelgolandMapModule { }\n","import {\n    DoCheck,\n    EventEmitter,\n    Input,\n    KeyValueDiffer,\n    KeyValueDiffers,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport * as L from 'leaflet';\n\nimport { MapCache } from './map-cache.service';\nimport { LayerOptions } from './map-options';\n\nconst DEFAULT_BASE_LAYER_NAME = 'BaseLayer';\nconst DEFAULT_BASE_LAYER_URL = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\nconst DEFAULT_BASE_LAYER_ATTRIBUTION = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n\nexport abstract class CachedMapComponent implements OnChanges, DoCheck, OnDestroy, OnInit {\n\n    /**\n     * A map with the given ID is created inside this component. This ID can be used the get the map instance over the map cache service.\n     */\n    @Input()\n    public mapId: string;\n\n    /**\n     * The corresponding leaflet map options (see: https://leafletjs.com/reference-1.3.4.html#map-option)\n     */\n    @Input()\n    public mapOptions: L.MapOptions;\n\n    /**\n     * Bounds for the map\n     */\n    @Input()\n    public fitBounds: L.LatLngBoundsExpression;\n\n    /**\n     * Map, which holds all overlay map layer (see: https://leafletjs.com/reference-1.3.4.html#layer)\n     */\n    @Input()\n    public overlayMaps: Map<string, LayerOptions>;\n\n    /**\n     * Map, which holds all base map layer (see: https://leafletjs.com/reference-1.3.4.html#layer)\n     */\n    @Input()\n    public baseMaps: Map<string, LayerOptions>;\n\n    /**\n     * Describes the the zoom options (see: https://leafletjs.com/reference-1.3.4.html#control-layers)\n     */\n    @Input()\n    public layerControlOptions: L.Control.LayersOptions;\n\n    /**\n     * Describes the the zoom control options (see: https://leafletjs.com/reference-1.3.4.html#control-zoom)\n     */\n    @Input()\n    public zoomControlOptions: L.Control.ZoomOptions;\n\n    /**\n     * Informs when initialization is done with map id.\n     */\n    @Output()\n    public mapInitialized: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * The map object.\n     */\n    protected map: L.Map;\n\n    protected oldOverlayLayer: L.Control.LayersObject = {};\n    protected oldBaseLayer: L.Control.LayersObject = {};\n    protected layerControl: L.Control.Layers;\n    protected zoomControl: L.Control.Zoom;\n\n    private _overlayMaps: Map<string, LayerOptions>;\n    private _differOverlayMaps: KeyValueDiffer<string, LayerOptions>;\n    private _baseMaps: Map<string, LayerOptions>;\n    private _differBaseMaps: KeyValueDiffer<string, LayerOptions>;\n\n    constructor(\n        protected mapCache: MapCache,\n        protected differs: KeyValueDiffers\n    ) {\n        this._differOverlayMaps = this.differs.find({}).create();\n        this._differBaseMaps = this.differs.find({}).create();\n    }\n\n    public ngOnInit(): void {\n        if (this.mapId === undefined || this.mapId === null) {\n            this.mapId = this.generateUUID();\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (this.map) {\n            if (changes.fitBounds) {\n                this.map.fitBounds(this.fitBounds);\n            }\n            if (changes.zoomControlOptions) {\n                this.updateZoomControl();\n            }\n        }\n    }\n\n    public ngDoCheck(): void {\n        if (this._differOverlayMaps) {\n            const changes = this._differOverlayMaps.diff(this.overlayMaps);\n            if (changes) {\n                changes.forEachRemovedItem((e) => this.removeOverlayMap(e.previousValue));\n                changes.forEachAddedItem((e) => this.addOverlayMap(e.currentValue));\n                this.updateLayerControl();\n            }\n        }\n        if (this._differBaseMaps) {\n            const changes = this._differBaseMaps.diff(this.baseMaps);\n            if (changes) {\n                changes.forEachRemovedItem((e) => this.removeBaseMap(e.previousValue));\n                changes.forEachAddedItem((e) => this.addBaseMap(e.currentValue));\n                this.updateLayerControl();\n            }\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.map.remove();\n        this.map = null;\n        this.mapCache.deleteMap(this.mapId);\n    }\n\n    protected createMap(): void {\n        if (!this.mapOptions || this.zoomControlOptions) { this.mapOptions = { zoomControl: false }; }\n        this.map = L.map(this.mapId, this.mapOptions);\n        this.mapCache.setMap(this.mapId, this.map);\n        this.mapInitialized.emit(this.mapId);\n        if (this.baseMaps && this.baseMaps.size > 0) {\n            this.baseMaps.forEach((entry, key) => this.addBaseMap(entry));\n        } else {\n            this.addBaseMap();\n        }\n        if (this.overlayMaps) { this.overlayMaps.forEach((entry, key) => this.addOverlayMap(entry)); }\n        this.updateZoomControl();\n        this.updateLayerControl();\n        if (this.fitBounds) {\n            this.map.fitBounds(this.fitBounds);\n        }\n    }\n\n    private generateUUID(): string {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                .toString(16)\n                .substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    }\n\n    private addOverlayMap(layerOptions: LayerOptions) {\n        if (this.map) {\n            if (!this.oldOverlayLayer.hasOwnProperty[layerOptions.label]) {\n                this.oldOverlayLayer[layerOptions.label] = layerOptions.layer;\n                if (layerOptions.visible) { layerOptions.layer.addTo(this.map); }\n            }\n        }\n    }\n\n    private removeOverlayMap(layerOptions: LayerOptions) {\n        if (this.map && this.oldOverlayLayer.hasOwnProperty(layerOptions.label)) {\n            this.map.removeLayer(this.oldOverlayLayer[layerOptions.label]);\n            delete this.oldOverlayLayer[layerOptions.label];\n        }\n    }\n\n    private addBaseMap(layerOptions?: LayerOptions) {\n        if (this.map) {\n            if (!this.baseMaps || this.baseMaps.size === 0) {\n                layerOptions = {\n                    label: DEFAULT_BASE_LAYER_NAME,\n                    visible: true,\n                    layer: L.tileLayer(DEFAULT_BASE_LAYER_URL, {\n                        attribution: DEFAULT_BASE_LAYER_ATTRIBUTION\n                    })\n                };\n            }\n            if (!this.oldBaseLayer.hasOwnProperty[layerOptions.label]) {\n                this.oldBaseLayer[layerOptions.label] = layerOptions.layer;\n                if (layerOptions.visible) { layerOptions.layer.addTo(this.map); }\n            }\n        }\n    }\n\n    private removeBaseMap(layerOptions: LayerOptions) {\n        if (this.map && this.oldBaseLayer.hasOwnProperty(layerOptions.label)) {\n            this.map.removeLayer(this.oldBaseLayer[layerOptions.label]);\n            delete this.oldBaseLayer[layerOptions.label];\n        }\n    }\n\n    private updateLayerControl() {\n        if (this.map) {\n            if (this.layerControl) {\n                this.map.removeControl(this.layerControl);\n            }\n            if (this.layerControlOptions\n                && (Object.keys(this.oldBaseLayer).length > 1 || Object.keys(this.oldOverlayLayer).length > 0)) {\n                this.layerControl =\n                    L.control.layers(this.oldBaseLayer, this.oldOverlayLayer, this.layerControlOptions).addTo(this.map);\n            }\n        }\n    }\n\n    private updateZoomControl() {\n        if (this.zoomControl) { this.map.removeControl(this.zoomControl); }\n        if (this.zoomControlOptions) {\n            this.zoomControl = L.control.zoom(this.zoomControlOptions).addTo(this.map);\n        }\n    }\n}\n","import { Point } from 'geojson';\nimport { LatLngBoundsLiteral } from 'leaflet';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface GeoSearchResult {\n    name: string;\n    geometry: GeoJSON.GeoJsonObject;\n    bounds?: LatLngBoundsLiteral;\n    address?: {\n        city?: string;\n        city_district?: string;\n        construction?: string;\n        continent?: string;\n        country?: string;\n        country_code?: string;\n        house_number?: string;\n        neighbourhood?: string;\n        postcode?: string;\n        public_building?: string;\n        road?: string;\n        state?: string;\n        suburb?: string;\n        town?: string;\n        [key: string]: string;\n    };\n}\n\nexport interface GeoSearchOptions {\n    acceptLanguage?: string;\n    addressdetails?: boolean;\n    asPointGeometry?: boolean;\n    countrycodes?: string[];\n}\n\nexport interface GeoReverseOptions {\n    acceptLanguage?: string;\n    addressdetails?: boolean;\n    zoom?: number;\n}\n\nexport interface GeoReverseResult {\n    lat: string;\n    lon: string;\n    displayName?: string;\n    address?: {\n        city: string;\n        cityDistrict: string;\n        country: string;\n        countryCode: string;\n        county: string;\n        houseNumber: string;\n        neighbourhood: string;\n        postcode: string;\n        road: string;\n        state: string;\n        stateDistrict: string;\n        suburb: string;\n    };\n    boundingbox?: string[];\n}\n\nexport abstract class GeoSearch {\n\n    public abstract searchTerm(term: string, options?: GeoSearchOptions): Observable<GeoSearchResult>;\n\n    public abstract reverse(point: Point, options?: GeoReverseOptions): Observable<GeoReverseResult>;\n\n}\n","import 'rxjs/add/operator/map';\n\nimport { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpService } from '@helgoland/core';\nimport { Point } from 'geojson';\nimport { Observable } from 'rxjs/Observable';\n\nimport { GeoReverseOptions, GeoReverseResult, GeoSearch, GeoSearchOptions, GeoSearchResult } from './geosearch';\n\ninterface NominatimSearchResult {\n    display_name: string;\n    geojson?: GeoJSON.GeoJsonObject;\n    lat: string;\n    lon: string;\n    boundingbox: number[];\n    address?: {\n        city?: string;\n        city_district?: string;\n        construction?: string;\n        continent?: string;\n        country?: string;\n        country_code?: string;\n        house_number?: string;\n        neighbourhood?: string;\n        postcode?: string;\n        public_building?: string;\n        state?: string;\n        suburb?: string;\n    };\n}\n\ninterface Address {\n    address29: string;\n    house_number: string;\n    road: string;\n    neighbourhood: string;\n    suburb: string;\n    city_district: string;\n    city: string;\n    county: string;\n    state_district: string;\n    state: string;\n    postcode: string;\n    country: string;\n    country_code: string;\n}\n\ninterface NominatimReverseResult {\n    place_id: string;\n    licence: string;\n    osm_type: string;\n    osm_id: string;\n    lat: string;\n    lon: string;\n    display_name: string;\n    address: Address;\n    boundingbox: string[];\n}\n\n@Injectable()\nexport class NominatimGeoSearchService implements GeoSearch {\n\n    protected serviceUrl = 'https://nominatim.openstreetmap.org/';\n\n    constructor(\n        protected http: HttpService\n    ) { }\n\n    public searchTerm(term: string, options: GeoSearchOptions = {}): Observable<GeoSearchResult> {\n        let params = new HttpParams();\n        params = params.set('q', term);\n        params = params.set('format', 'json');\n        params = params.set('limit', '1');\n        if (options.countrycodes) { params = params.set('countrycodes', options.countrycodes.join(',')); }\n        if (options.addressdetails !== null) { params = params.set('addressdetails', options.addressdetails ? '1' : '0'); }\n        if (options.asPointGeometry !== null) { params = params.set('polygon_geojson', options.asPointGeometry ? '0' : '1'); }\n        if (options.acceptLanguage) { params = params.set('accept-language', options.acceptLanguage); }\n        return this.http.client().get(\n            this.serviceUrl + 'search',\n            { params }\n        ).map((resArray: NominatimSearchResult[]) => {\n            if (resArray.length === 1) {\n                const result = resArray[0];\n                const name = result.display_name;\n                let geometry;\n                if (result.geojson) {\n                    geometry = result.geojson;\n                } else {\n                    geometry = {\n                        type: 'Point',\n                        coordinates: [parseFloat(result.lon), parseFloat(result.lat)]\n                    };\n                }\n                const returnResult: GeoSearchResult = { name, geometry };\n                if (result.boundingbox) {\n                    returnResult.bounds = [\n                        [\n                            result.boundingbox[0],\n                            result.boundingbox[2]\n                        ],\n                        [\n                            result.boundingbox[1],\n                            result.boundingbox[3]\n                        ]\n                    ];\n                }\n                if (result.address) { returnResult.address = result.address; }\n                return returnResult;\n            }\n        });\n    }\n\n    public reverse(point: Point, options: GeoReverseOptions = {}): Observable<GeoReverseResult> {\n        let params = new HttpParams();\n        params = params.set('lat', point.coordinates[0].toString());\n        params = params.set('lon', point.coordinates[1].toString());\n        params = params.set('format', 'json');\n        if (options && options.addressdetails !== undefined) { params = params.set('addressdetails', options.addressdetails ? '1' : '0'); }\n        if (options.acceptLanguage !== null) { params = params.set('accept-language', options.acceptLanguage); }\n        if (options && options.zoom !== undefined) { params = params.set('zoom', `${options.zoom}`); }\n        return this.http.client().get(\n            this.serviceUrl + 'reverse',\n            { params }\n        ).map((res: NominatimReverseResult) => {\n            const result = {\n                lat: res.lat,\n                lon: res.lon,\n                displayName: res.display_name,\n                boundingbox: res.boundingbox\n            } as GeoReverseResult;\n            if (res.address) {\n                result.address = {\n                    city: res.address.city,\n                    cityDistrict: res.address.city_district,\n                    country: res.address.country,\n                    countryCode: res.address.country_code,\n                    county: res.address.county,\n                    houseNumber: res.address.house_number,\n                    neighbourhood: res.address.neighbourhood,\n                    postcode: res.address.postcode,\n                    road: res.address.road,\n                    state: res.address.state,\n                    stateDistrict: res.address.state_district,\n                    suburb: res.address.suburb\n                };\n            }\n            return result;\n        });\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { GeoJSON, GeoJSONOptions, LatLngBounds, LeafletEvent } from 'leaflet';\n\nexport interface GeoCureGeoJSONOptions extends GeoJSONOptions {\n    url: string;\n    httpClient: HttpClient;\n    showOnMinZoom?: number;\n    showOnMaxZoom?: number;\n}\n\nexport class GeoCureGeoJSON extends GeoJSON {\n\n    public options: GeoCureGeoJSONOptions;\n\n    constructor(\n        options?: GeoCureGeoJSONOptions\n    ) {\n        super();\n        if (options) {\n            this.options = options;\n        }\n    }\n\n    public getEvents() {\n        const events = {\n            moveend: (event: LeafletEvent) => this.fetchData(event.target)\n        };\n        return events;\n    }\n\n    public onAdd(map: L.Map): this  {\n        super.onAdd(map);\n        this.fetchData(map);\n        return this;\n    }\n\n    private fetchData(map: L.Map) {\n        const matchMaxZoom = this.options.showOnMaxZoom ? map.getZoom() <= this.options.showOnMaxZoom : true;\n        const matchMinZoom = this.options.showOnMinZoom ? map.getZoom() >= this.options.showOnMinZoom : true;\n        if (matchMinZoom && matchMaxZoom) {\n            this.loadData(map.getBounds());\n        } else {\n            this.clearLayers();\n        }\n    }\n\n    private loadData(bounds: LatLngBounds) {\n        const bboxparam = [bounds.getWest(), bounds.getSouth(), bounds.getEast(), bounds.getNorth()].join(',');\n        this.options.httpClient\n            .get<GeoJSON.FeatureCollection<GeoJSON.GeometryObject>>(this.options.url, {\n                params: {\n                    bbox: bboxparam\n                }\n            })\n            .subscribe((geojson) => {\n                this.clearLayers();\n                this.addData(geojson);\n            });\n    }\n}\n","import { AfterViewInit, Component, Input, KeyValueDiffers, OnChanges, SimpleChanges } from '@angular/core';\nimport * as L from 'leaflet';\n\nimport { CachedMapComponent } from '../../base/cached-map-component';\nimport { MapCache } from '../../base/map-cache.service';\n\n@Component({\n    selector: 'n52-geometry-map-viewer',\n    template: `<div [attr.id]=\"mapId\" class=\"map-viewer\"></div>\n`,\n    styles: [`:host{height:100%;width:100%}:host .map-viewer{height:100%;width:100%}`]\n})\nexport class GeometryMapViewerComponent extends CachedMapComponent implements AfterViewInit, OnChanges {\n\n    @Input()\n    public highlight: GeoJSON.GeoJsonObject;\n\n    @Input()\n    public geometry: GeoJSON.GeoJsonObject;\n\n    @Input()\n    public zoomTo: GeoJSON.GeoJsonObject;\n\n    @Input()\n    public avoidZoomToGeometry: boolean;\n\n    private highlightGeometry: L.GeoJSON;\n\n    private defaultStyle: L.PathOptions = {\n        color: 'red',\n        weight: 5,\n        opacity: 0.65\n    };\n\n    private highlightStyle: L.PathOptions = {\n        color: 'blue',\n        weight: 10,\n        opacity: 1\n    };\n\n    constructor(\n        protected mapCache: MapCache,\n        protected differs: KeyValueDiffers\n    ) {\n        super(mapCache, differs);\n    }\n\n    public ngAfterViewInit() {\n        this.createMap();\n        this.drawGeometry();\n        this.showHighlight();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n        if (this.map) {\n            if (changes.highlight && changes.highlight.currentValue) {\n                this.showHighlight();\n            }\n            if (changes.geometry) {\n                this.drawGeometry();\n            }\n            if (changes.zoomTo) {\n                this.zoomToGeometry();\n            }\n        }\n    }\n\n    private zoomToGeometry() {\n        const geometry = L.geoJSON(this.zoomTo);\n        this.map.fitBounds(geometry.getBounds());\n    }\n\n    private showHighlight() {\n        if (this.highlightGeometry) {\n            this.map.removeLayer(this.highlightGeometry);\n        }\n        this.highlightGeometry = L.geoJSON(this.highlight, {\n            pointToLayer: (feature, latlng) => {\n                return L.circleMarker(latlng, this.highlightStyle);\n            }\n        });\n        this.highlightGeometry.setStyle(this.highlightStyle);\n        this.highlightGeometry.addTo(this.map);\n    }\n\n    private drawGeometry() {\n        if (this.geometry) {\n            const geojson = L.geoJSON(this.geometry, {\n                pointToLayer: (feature, latlng) => {\n                    return L.circleMarker(latlng, this.defaultStyle);\n                }\n            });\n\n            geojson.setStyle(this.defaultStyle);\n            geojson.addTo(this.map);\n\n            if (!this.avoidZoomToGeometry) {\n                this.map.fitBounds(geojson.getBounds());\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { HelgolandMapModule } from '../base/map.module';\nimport { GeometryMapViewerComponent } from './geometry-map-viewer/geometry-map-viewer.component';\n\n@NgModule({\n    declarations: [\n        GeometryMapViewerComponent\n    ],\n    imports: [\n        HelgolandMapModule\n    ],\n    exports: [\n        GeometryMapViewerComponent\n    ],\n    providers: [\n    ]\n})\nexport class HelgolandMapViewModule { }\n","import { Component, Input } from '@angular/core';\n\nimport { MapCache } from '../../base/map-cache.service';\n\n@Component({\n  selector: 'n52-extent-control',\n  template: `<div>\n  <button type=\"button\" (click)=\"zoomToExtent()\">zoom to extent</button>\n</div>\n`\n})\nexport class ExtentControlComponent {\n\n  @Input()\n  public mapId: string;\n\n  @Input()\n  public extent: L.LatLngBoundsExpression;\n\n  constructor(\n    protected mapCache: MapCache\n  ) { }\n\n  public zoomToExtent() {\n    this.mapCache.getMap(this.mapId).fitBounds(this.extent);\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport * as L from 'leaflet';\n\nimport { GeoSearch, GeoSearchOptions, GeoSearchResult } from '../../base/geosearch/geosearch';\nimport { MapCache } from '../../base/map-cache.service';\n\n@Component({\n    selector: 'n52-geosearch-control',\n    template: `<div>\n  <input [(ngModel)]=\"searchTerm\" (keyup.enter)=\"triggerSearch()\">\n  <span *ngIf=\"loading\">loading...</span>\n  <button type=\"button\" class=\"btn btn-light btn-sm\" (click)=\"clearSearch()\">X</button>\n</div>\n`\n})\nexport class GeosearchControlComponent {\n\n    /**\n     * Connect map id.\n     */\n    @Input()\n    public mapId: string;\n\n    /**\n     * Additional search options.\n     */\n    @Input()\n    public options: GeoSearchOptions;\n\n    /**\n     * Returns the search result.\n     */\n    @Output()\n    public onResultChanged: EventEmitter<GeoSearchResult> = new EventEmitter();\n\n    /**\n     * Informs, when the search is triggered.\n     */\n    @Output()\n    public onSearchTriggered: EventEmitter<void> = new EventEmitter();\n\n    public result: GeoSearchResult;\n\n    public resultGeometry: L.GeoJSON;\n\n    public searchTerm: string;\n\n    public loading: boolean;\n\n    constructor(\n        protected mapCache: MapCache,\n        protected geosearch: GeoSearch\n    ) { }\n\n    public triggerSearch() {\n        this.onSearchTriggered.emit();\n        this.removeOldGeometry();\n        if (this.searchTerm) {\n            this.loading = true;\n            this.geosearch.searchTerm(this.searchTerm, this.options).subscribe(\n                (result) => {\n                    if (!result) {\n                        this.searchTerm = '';\n                        return;\n                    }\n                    this.onResultChanged.emit(result);\n                    this.result = result;\n                    if (this.mapId) {\n                        this.resultGeometry = L.geoJSON(result.geometry).addTo(this.mapCache.getMap(this.mapId));\n                        if (result.bounds) {\n                            this.mapCache.getMap(this.mapId).fitBounds(result.bounds);\n                        } else {\n                            this.mapCache.getMap(this.mapId).fitBounds(this.resultGeometry.getBounds());\n                        }\n                    }\n                },\n                (error) => this.searchTerm = 'error occurred',\n                () => { this.loading = false; }\n            );\n        }\n    }\n\n    public clearSearch() {\n        this.searchTerm = '';\n        this.onResultChanged.emit(null);\n        this.removeOldGeometry();\n    }\n\n    private removeOldGeometry() {\n        if (this.resultGeometry) {\n            this.resultGeometry.remove();\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport * as L from 'leaflet';\n\nimport { MapCache } from '../../base/map-cache.service';\n\nconst LOCATION_FOUND_EVENT = 'locationfound';\nconst LOCATION_ERROR = 'locationerror';\nconst LOCATED_MARKER_ID = 'located';\n\n@Injectable()\nexport class LocateService {\n\n  constructor(\n    protected mapCache: MapCache\n  ) { }\n\n  public startLocate(id: string) {\n    const map = this.mapCache.getMap(id);\n    map.on(LOCATION_FOUND_EVENT, (evt: L.LocationEvent) => {\n      this.removeMarker(map);\n      const marker = L.marker(evt.latlng).addTo(map);\n      marker.options.title = LOCATED_MARKER_ID;\n    });\n    map.on(LOCATION_ERROR, (error) => {\n      console.error(error);\n    });\n    map.locate({\n      watch: true,\n      setView: true,\n      timeout: 30000\n    });\n  }\n\n  public stopLocate(id: string) {\n    const map = this.mapCache.getMap(id);\n    map.stopLocate();\n    map.off(LOCATION_FOUND_EVENT);\n    this.removeMarker(map);\n  }\n\n  private removeMarker(map: L.Map) {\n    map.eachLayer((entry) => {\n      if (entry instanceof L.Marker && entry.options.title === LOCATED_MARKER_ID) {\n        map.removeLayer(entry);\n      }\n    });\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { LocateService } from './locate.service';\n\n@Component({\n    selector: 'n52-locate-control',\n    template: `<div class=\"btn-group-vertical btn-group-sm map-control\">\n  <button type=\"button\" class=\"btn btn-sm\" (click)=\"locateUser()\" [ngClass]=\"isToggled ? 'btn-primary': 'btn-light'\">\n    locate\n  </button>\n</div>\n`,\n    styles: [`:host i{width:11px}`]\n})\nexport class LocateControlComponent {\n\n    @Input()\n    public mapId: string;\n\n    public isToggled = false;\n\n    constructor(\n        protected locateService: LocateService\n    ) { }\n\n    public locateUser() {\n        this.isToggled = !this.isToggled;\n        if (this.isToggled) {\n            this.locateService.startLocate(this.mapId);\n        } else {\n            this.locateService.stopLocate(this.mapId);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { MapCache } from '../../base/map-cache.service';\n\n@Component({\n  selector: 'n52-zoom-control',\n  template: `<div class=\"btn-group-vertical map-control\">\n  <button type=\"button\" class=\"btn btn-light btn-sm\" (click)=\"zoomIn()\">\n    <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n  </button>\n  <button type=\"button\" class=\"btn btn-light btn-sm\" (click)=\"zoomOut()\">\n    <i class=\"fa fa-minus\" aria-hidden=\"true\"></i>\n  </button>\n</div>\n`\n})\nexport class ZoomControlComponent {\n\n  @Input()\n  public mapId: string;\n\n  constructor(\n    protected mapCache: MapCache\n  ) { }\n\n  public zoomIn() {\n    this.mapCache.getMap(this.mapId).zoomIn();\n  }\n\n  public zoomOut() {\n    this.mapCache.getMap(this.mapId).zoomOut();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HelgolandCoreModule } from '@helgoland/core';\n\nimport { HelgolandMapModule } from '../base/map.module';\nimport { ExtentControlComponent } from './extent/extent.component';\nimport { GeosearchControlComponent } from './geosearch/geosearch.component';\nimport { LocateControlComponent } from './locate/locate.component';\nimport { LocateService } from './locate/locate.service';\nimport { ZoomControlComponent } from './zoom/zoom.component';\n\nconst COMPONENTS = [\n  LocateControlComponent,\n  ZoomControlComponent,\n  GeosearchControlComponent,\n  ExtentControlComponent\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HelgolandCoreModule,\n    HelgolandMapModule\n  ],\n  exports: [\n    COMPONENTS\n  ],\n  providers: [\n    LocateService\n  ]\n})\nexport class HelgolandMapControlModule { }\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    EventEmitter,\n    Input,\n    KeyValueDiffers,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { HasLoadableContent, ParameterFilter } from '@helgoland/core';\nimport * as L from 'leaflet';\n\nimport { CachedMapComponent } from '../base/cached-map-component';\nimport { MapCache } from '../base/map-cache.service';\nimport { MarkerSelectorGenerator } from './model/marker-selector-generator';\n\nexport abstract class MapSelectorComponent<T>\n    extends CachedMapComponent\n    implements OnChanges, AfterViewInit, HasLoadableContent {\n\n    /**\n     * @input The serviceUrl, where the selection should be loaded.\n     */\n    @Input()\n    public serviceUrl: string;\n\n    /**\n     * @input The filter which should be used, while fetching the selection.\n     */\n    @Input()\n    public filter: ParameterFilter;\n\n    @Input()\n    public avoidZoomToSelection: boolean;\n\n    @Input()\n    public markerSelectorGenerator: MarkerSelectorGenerator;\n\n    @Output()\n    public onSelected: EventEmitter<T> = new EventEmitter<T>();\n\n    @Output()\n    public onContentLoading: EventEmitter<boolean> = new EventEmitter();\n\n    /**\n     * @input Additional configuration for the marker zooming (https://leafletjs.com/reference-1.3.4.html#fitbounds-options)\n     */\n    @Input()\n    public fitBoundsMarkerOptions: L.FitBoundsOptions;\n\n    public isContentLoading: (loading: boolean) => void;\n\n    @Output()\n    public onNoResultsFound: EventEmitter<boolean> = new EventEmitter();\n\n    constructor(\n        protected mapCache: MapCache,\n        protected differs: KeyValueDiffers,\n        protected cd: ChangeDetectorRef\n    ) {\n        super(mapCache, differs);\n    }\n\n    public ngAfterViewInit() {\n        this.createMap();\n        setTimeout(() => {\n            this.drawGeometries();\n            this.cd.detectChanges();\n        }, 10);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n        if (this.map) {\n            if (changes.serviceUrl || changes.filter || changes.cluster) {\n                this.drawGeometries();\n            }\n        }\n    }\n\n    /**\n     * Draws the geometries\n     *\n     * @protected\n     * @abstract\n     * @memberof MapSelectorComponent\n     */\n    protected abstract drawGeometries(): void;\n\n    /**\n     * Zooms to the given bounds\n     *\n     * @protected\n     * @param bounds where to zoom\n     * @memberof MapSelectorComponent\n     */\n    protected zoomToMarkerBounds(bounds: L.LatLngBoundsExpression) {\n        if (!this.avoidZoomToSelection) {\n            this.map.fitBounds(bounds, this.fitBoundsMarkerOptions || {});\n        }\n    }\n\n}\n","import { Timeseries } from '@helgoland/core';\n\nexport const enum LastValuePresentation {\n  /**\n   * colorized circle depending on status intervals\n   */\n  Colorized,\n  /**\n   * textual presentation of the last value, done with LastValueLabelGenerator\n   */\n  Textual\n}\n\nexport abstract class LastValueLabelGenerator {\n\n  /**\n   * Creates an icon label based on a given timeseries.\n   */\n  public abstract createIconLabel(ts: Timeseries);\n\n}\n","import { AfterViewInit, ChangeDetectorRef, Component, Input, KeyValueDiffers } from '@angular/core';\nimport {\n  DatasetApiInterface,\n  HasLoadableContent,\n  Mixin,\n  StatusIntervalResolverService,\n  Timeseries,\n  TimeseriesExtras,\n} from '@helgoland/core';\nimport { circleMarker, featureGroup, geoJSON, Layer, marker } from 'leaflet';\nimport { forkJoin, Observable, Observer } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\nimport { MapCache } from '../../base/map-cache.service';\nimport { MapSelectorComponent } from '../map-selector.component';\nimport { LastValueLabelGenerator, LastValuePresentation } from '../services/last-value-label-generator.interface';\n\n/**\n * Displays selectable series with their last values on an map.\n */\n@Component({\n  selector: 'n52-last-value-map-selector',\n  template: `<div class=\"map-wrapper\" style=\"height: 100%;\">\n  <div [attr.id]=\"mapId\" class=\"map-viewer\"></div>\n</div>\n`,\n  styles: [`:host{position:relative}:host .map-viewer{width:100%;height:100%}:host .map-notifier{position:absolute;bottom:10px;left:10px;z-index:1001;width:120px;height:70px;padding:5px;opacity:.8;text-align:center}`]\n})\n@Mixin([HasLoadableContent])\nexport class LastValueMapSelectorComponent extends MapSelectorComponent<Timeseries> implements AfterViewInit {\n\n  /**\n   * The list of internal series IDs, which should be presented with their last values on the map.\n   */\n  @Input()\n  public lastValueSeriesIDs: string[];\n\n  /**\n   * Presentation type how to display the series.\n   */\n  @Input()\n  public lastValuePresentation: LastValuePresentation = LastValuePresentation.Colorized;\n\n  /**\n   * Ignores all Statusintervals where the timestamp is before a given duration in milliseconds and draws instead the default marker.\n   */\n  @Input()\n  public ignoreStatusIntervalIfBeforeDuration = Infinity;\n\n  private markerFeatureGroup: L.FeatureGroup;\n\n  constructor(\n    protected mapCache: MapCache,\n    protected differs: KeyValueDiffers,\n    protected cd: ChangeDetectorRef,\n    protected apiInterface: DatasetApiInterface,\n    protected lastValueLabelGenerator: LastValueLabelGenerator,\n    protected statusIntervalResolver: StatusIntervalResolverService\n  ) {\n    super(mapCache, differs, cd);\n  }\n\n  protected drawGeometries(): void {\n    this.isContentLoading(true);\n    if (this.lastValueSeriesIDs && this.lastValueSeriesIDs.length) {\n      this.createMarkersBySeriesIDs();\n    }\n  }\n\n  private createMarkersBySeriesIDs() {\n    this.markerFeatureGroup = featureGroup();\n    const obsList: Array<Observable<any>> = [];\n    this.lastValueSeriesIDs.forEach(entry => {\n      const tsObs = this.apiInterface.getSingleTimeseriesByInternalId(entry);\n      obsList.push(tsObs.pipe(switchMap(val => this.createMarker(val).pipe(tap(res => {\n        this.markerFeatureGroup.addLayer(res);\n        res.on('click', () => this.onSelected.emit(val));\n      })))));\n    });\n    this.finalizeMarkerObservables(obsList);\n  }\n\n  private createMarker(ts: Timeseries) {\n    switch (this.lastValuePresentation) {\n      case LastValuePresentation.Colorized:\n        return this.createColorizedMarker(ts);\n      case LastValuePresentation.Textual:\n        return this.createLabeledMarker(ts);\n    }\n    return this.createColorizedMarker(ts);\n  }\n\n  private finalizeMarkerObservables(obsList: Observable<any>[]) {\n    forkJoin(obsList).subscribe(() => {\n      console.log('do zoom to bounds');\n      if (this.map) {\n        const bounds = this.markerFeatureGroup.getBounds();\n        this.zoomToMarkerBounds(bounds);\n        this.map.invalidateSize();\n      }\n      this.isContentLoading(false);\n    });\n    if (this.map) {\n      this.markerFeatureGroup.addTo(this.map);\n    }\n  }\n\n  private createColorizedMarker(ts: Timeseries): Observable<Layer> {\n    return new Observable<Layer>((observer: Observer<Layer>) => {\n      this.apiInterface.getTimeseriesExtras(ts.id, ts.url).subscribe((extras: TimeseriesExtras) => {\n        let coloredMarker;\n        if (extras.statusIntervals) {\n          if ((ts.lastValue.timestamp) > new Date().getTime() - this.ignoreStatusIntervalIfBeforeDuration) {\n            const interval = this.statusIntervalResolver.getMatchingInterval(ts.lastValue.value, extras.statusIntervals);\n            if (interval) {\n              coloredMarker = this.createColoredMarker(ts, interval.color);\n            }\n          }\n        }\n        if (!coloredMarker) {\n          coloredMarker = this.createDefaultColoredMarker(ts);\n        }\n        observer.next(coloredMarker);\n        observer.complete();\n      });\n    });\n  }\n\n  private createColoredMarker(ts: Timeseries, color: string): Layer {\n    return this.createFilledMarker(ts, color, 10);\n  }\n\n  private createDefaultColoredMarker(ts: Timeseries): Layer {\n    return this.createFilledMarker(ts, '#000', 10);\n  }\n\n  private createFilledMarker(ts: Timeseries, color: string, radius: number): Layer {\n    let geometry: Layer;\n    if (ts.station.geometry.type === 'Point') {\n      const point = ts.station.geometry as GeoJSON.Point;\n      geometry = circleMarker([point.coordinates[1], point.coordinates[0]], {\n        color: '#000',\n        fillColor: color,\n        fillOpacity: 0.8,\n        radius: 10,\n        weight: 2\n      });\n    } else {\n      geometry = geoJSON(ts.station.geometry, {\n        style: (feature) => {\n          return {\n            color: '#000',\n            fillColor: color,\n            fillOpacity: 0.8,\n            weight: 2\n          };\n        }\n      });\n    }\n    if (geometry) {\n      geometry.on('click', () => this.onSelected.emit(ts));\n      return geometry;\n    }\n  }\n\n  private createLabeledMarker(ts: Timeseries): Observable<Layer> {\n    return new Observable<Layer>(observer => {\n      const icon = this.lastValueLabelGenerator.createIconLabel(ts);\n      if (ts.station.geometry.type === 'Point') {\n        const point = ts.station.geometry as GeoJSON.Point;\n        observer.next(marker([point.coordinates[1], point.coordinates[0]], { icon }));\n        observer.complete();\n      }\n    });\n  }\n\n}\n","import 'leaflet.markercluster';\n\nimport { AfterViewInit, ChangeDetectorRef, Component, Input, KeyValueDiffers, OnChanges } from '@angular/core';\nimport { DatasetApiInterface, HasLoadableContent, Mixin, Platform } from '@helgoland/core';\nimport * as L from 'leaflet';\n\nimport { MapCache } from '../../base/map-cache.service';\nimport { MapSelectorComponent } from '../map-selector.component';\n\n@Component({\n    selector: 'n52-platform-map-selector',\n    template: `<div class=\"map-wrapper\" style=\"height: 100%;\">\n  <div [attr.id]=\"mapId\" class=\"map-viewer\"></div>\n</div>\n`,\n    styles: [`:host{position:relative}:host .map-viewer{width:100%;height:100%}:host .map-notifier{position:absolute;bottom:10px;left:10px;z-index:1001;width:120px;height:70px;padding:5px;opacity:.8;text-align:center}`]\n})\n@Mixin([HasLoadableContent])\nexport class PlatformMapSelectorComponent extends MapSelectorComponent<Platform> implements OnChanges, AfterViewInit {\n\n    @Input()\n    public cluster: boolean;\n\n    private markerFeatureGroup: L.FeatureGroup;\n\n    constructor(\n        protected apiInterface: DatasetApiInterface,\n        protected mapCache: MapCache,\n        protected cd: ChangeDetectorRef,\n        protected differs: KeyValueDiffers\n    ) {\n        super(mapCache, differs, cd);\n    }\n\n    protected drawGeometries() {\n        this.isContentLoading(true);\n        if (this.map && this.markerFeatureGroup) { this.map.removeLayer(this.markerFeatureGroup); }\n        this.apiInterface.getPlatforms(this.serviceUrl, this.filter)\n            .subscribe((res) => {\n                if (this.map) {\n                    if (this.cluster) {\n                        this.markerFeatureGroup = L.markerClusterGroup({ animate: true });\n                    } else {\n                        this.markerFeatureGroup = L.featureGroup();\n                    }\n                    if (res instanceof Array && res.length > 0) {\n                        res.forEach((entry) => {\n                            const marker = L.marker([entry.geometry.coordinates[1], entry.geometry.coordinates[0]]);\n                            marker.on('click', () => {\n                                this.onSelected.emit(entry);\n                            });\n                            this.markerFeatureGroup.addLayer(marker);\n                        });\n                        this.markerFeatureGroup.addTo(this.map);\n                        this.zoomToMarkerBounds(this.markerFeatureGroup.getBounds());\n                    } else {\n                        this.onNoResultsFound.emit(true);\n                    }\n                    this.map.invalidateSize();\n                    this.isContentLoading(false);\n                }\n            });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Timeseries } from '@helgoland/core';\nimport * as L from 'leaflet';\nimport moment from 'moment';\n\nimport { LastValueLabelGenerator } from './last-value-label-generator.interface';\n\n@Injectable()\nexport class LastValueLabelGeneratorService extends LastValueLabelGenerator {\n\n  constructor() {\n    super();\n  }\n\n  public createIconLabel(ts: Timeseries) {\n    const date = moment(ts.lastValue.timestamp).fromNow();\n    return L.divIcon({\n      className: 'last-value-container',\n      html: `<span class=\"last-value-label\">${ts.lastValue.value}&nbsp;${ts.uom}</span><br><span class=\"last-value-date\">${date}</span>`\n    });\n  }\n\n}\n","import 'leaflet.markercluster';\nimport 'rxjs/add/observable/forkJoin';\n\nimport {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    KeyValueDiffers,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport {\n    DatasetApiInterface,\n    HasLoadableContent,\n    Mixin,\n    ParameterFilter,\n    Station,\n    StatusIntervalResolverService,\n    Timeseries,\n    TimeseriesExtras,\n} from '@helgoland/core';\nimport GeoJSON from 'geojson';\nimport * as L from 'leaflet';\nimport { Observable } from 'rxjs/Observable';\n\nimport { MapCache } from '../../base/map-cache.service';\nimport { MapSelectorComponent } from '../map-selector.component';\nimport { Layer } from 'leaflet';\nimport { forkJoin } from 'rxjs';\n\n@Component({\n    selector: 'n52-station-map-selector',\n    template: `<div class=\"map-wrapper\" style=\"height: 100%;\">\n  <div [attr.id]=\"mapId\" class=\"map-viewer\"></div>\n</div>\n`,\n    styles: [`:host{position:relative}:host .map-viewer{width:100%;height:100%}:host .map-notifier{position:absolute;bottom:10px;left:10px;z-index:1001;width:120px;height:70px;padding:5px;opacity:.8;text-align:center}`]\n})\n@Mixin([HasLoadableContent])\nexport class StationMapSelectorComponent extends MapSelectorComponent<Station> implements OnChanges, AfterViewInit {\n\n    @Input()\n    public cluster: boolean;\n\n    @Input()\n    public statusIntervals: boolean;\n\n    /**\n     * Ignores all Statusintervals where the timestamp is before a given duration in milliseconds and draws instead the default marker.\n     */\n    @Input()\n    public ignoreStatusIntervalIfBeforeDuration = Infinity;\n\n    private markerFeatureGroup: L.FeatureGroup;\n\n    constructor(\n        protected statusIntervalResolver: StatusIntervalResolverService,\n        protected apiInterface: DatasetApiInterface,\n        protected mapCache: MapCache,\n        protected differs: KeyValueDiffers,\n        protected cd: ChangeDetectorRef\n    ) {\n        super(mapCache, differs, cd);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n        if (this.map && changes.statusIntervals) { this.drawGeometries(); }\n    }\n\n    protected drawGeometries() {\n        this.isContentLoading(true);\n        if (this.map && this.markerFeatureGroup) { this.map.removeLayer(this.markerFeatureGroup); }\n        if (this.statusIntervals && this.filter && this.filter.phenomenon) {\n            this.createValuedMarkers();\n        } else {\n            this.createStationGeometries();\n        }\n    }\n\n    private createValuedMarkers() {\n        const tempFilter: ParameterFilter = {\n            phenomenon: this.filter.phenomenon,\n            expanded: true\n        };\n        this.apiInterface.getTimeseries(this.serviceUrl, tempFilter).subscribe((timeseries: Timeseries[]) => {\n            this.markerFeatureGroup = L.featureGroup();\n            const obsList: Array<Observable<TimeseriesExtras>> = [];\n            timeseries.forEach((ts: Timeseries) => {\n                const obs = this.apiInterface.getTimeseriesExtras(ts.id, this.serviceUrl);\n                obsList.push(obs);\n                obs.subscribe((extras: TimeseriesExtras) => {\n                    let marker;\n                    if (extras.statusIntervals) {\n                        if ((ts.lastValue.timestamp) > new Date().getTime() - this.ignoreStatusIntervalIfBeforeDuration) {\n                            const interval = this.statusIntervalResolver.getMatchingInterval(ts.lastValue.value, extras.statusIntervals);\n                            if (interval) { marker = this.createColoredMarker(ts.station, interval.color); }\n                        }\n                    }\n                    if (!marker) { marker = this.createDefaultColoredMarker(ts.station); }\n                    marker.on('click', () => {\n                        this.onSelected.emit(ts.station);\n                    });\n                    this.markerFeatureGroup.addLayer(marker);\n                });\n            });\n\n            forkJoin(obsList).subscribe(() => {\n                this.zoomToMarkerBounds(this.markerFeatureGroup.getBounds());\n                if (this.map) { this.map.invalidateSize(); }\n                this.isContentLoading(false);\n            });\n\n            if (this.map) { this.markerFeatureGroup.addTo(this.map); }\n        });\n    }\n\n    private createColoredMarker(station: Station, color: string): Layer {\n        if (this.markerSelectorGenerator.createFilledMarker) {\n            return this.markerSelectorGenerator.createFilledMarker(station, color);\n        }\n        return this.createFilledMarker(station, color, 10);\n    }\n\n    private createDefaultColoredMarker(station: Station): Layer {\n        if (this.markerSelectorGenerator.createDefaultFilledMarker) {\n            return this.markerSelectorGenerator.createDefaultFilledMarker(station);\n        }\n        return this.createFilledMarker(station, '#000', 10);\n    }\n\n    private createFilledMarker(station: Station, color: string, radius: number): Layer {\n        let geometry: Layer;\n        if (station.geometry.type === 'Point') {\n            const point = station.geometry as GeoJSON.Point;\n            geometry = L.circleMarker([point.coordinates[1], point.coordinates[0]], {\n                color: '#000',\n                fillColor: color,\n                fillOpacity: 0.8,\n                radius: 10,\n                weight: 2\n            });\n        } else {\n            geometry = L.geoJSON(station.geometry, {\n                style: (feature) => {\n                    return {\n                        color: '#000',\n                        fillColor: color,\n                        fillOpacity: 0.8,\n                        weight: 2\n                    };\n                }\n            });\n        }\n        if (geometry) {\n            geometry.on('click', () => {\n                this.onSelected.emit(station);\n            });\n            return geometry;\n        }\n    }\n\n    private createStationGeometries() {\n        this.apiInterface.getStations(this.serviceUrl, this.filter)\n            .subscribe((res) => {\n                if (this.cluster) {\n                    this.markerFeatureGroup = L.markerClusterGroup({ animate: true });\n                } else {\n                    this.markerFeatureGroup = L.featureGroup();\n                }\n                if (res instanceof Array && res.length > 0) {\n                    res.forEach((entry) => {\n                        const marker = this.createDefaultGeometry(entry);\n                        if (marker) { this.markerFeatureGroup.addLayer(marker); }\n                    });\n                    this.markerFeatureGroup.addTo(this.map);\n                    this.zoomToMarkerBounds(this.markerFeatureGroup.getBounds());\n                } else {\n                    this.onNoResultsFound.emit(true);\n                }\n                this.map.invalidateSize();\n                this.isContentLoading(false);\n            });\n    }\n\n    private createDefaultGeometry(station: Station): Layer {\n        if (this.markerSelectorGenerator && this.markerSelectorGenerator.createDefaultGeometry) {\n            return this.markerSelectorGenerator.createDefaultGeometry(station);\n        }\n        if (station.geometry) {\n            const geometry = L.geoJSON(station.geometry);\n            geometry.on('click', () => this.onSelected.emit(station));\n            return geometry;\n        } else {\n            console.error(station.id + ' has no geometry');\n        }\n    }\n}\n","import 'leaflet.markercluster';\n\nimport {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    KeyValueDiffers,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport {\n    DatasetApiInterface,\n    HasLoadableContent,\n    IDataset,\n    LocatedProfileDataEntry,\n    Mixin,\n    Timespan,\n} from '@helgoland/core';\nimport * as L from 'leaflet';\n\nimport { MapCache } from '../../base/map-cache.service';\nimport { MapSelectorComponent } from '../map-selector.component';\nimport { TrajectoryResult } from '../model/trajectory-result';\n\n@Component({\n    selector: 'n52-profile-trajectory-map-selector',\n    template: `<div class=\"map-wrapper\" style=\"height: 100%;\">\n  <div [attr.id]=\"mapId\" class=\"map-viewer\"></div>\n</div>\n`,\n    styles: [`:host{position:relative}:host .map-viewer{width:100%;height:100%}:host .map-notifier{position:absolute;bottom:10px;left:10px;z-index:1001;width:120px;height:70px;padding:5px;opacity:.8;text-align:center}`]\n})\n@Mixin([HasLoadableContent])\nexport class ProfileTrajectoryMapSelectorComponent\n    extends MapSelectorComponent<TrajectoryResult>\n    implements OnChanges, AfterViewInit {\n\n    @Input()\n    public selectedTimespan: Timespan;\n\n    @Output()\n    public onTimeListDetermined: EventEmitter<number[]> = new EventEmitter();\n\n    private layer: L.FeatureGroup;\n    private data: LocatedProfileDataEntry[];\n    private dataset: IDataset;\n\n    private defaultStyle: L.PathOptions = {\n        color: 'red',\n        weight: 5,\n        opacity: 0.65\n    };\n\n    private highlightStyle: L.PathOptions = {\n        color: 'blue',\n        weight: 7,\n        opacity: 1\n    };\n\n    constructor(\n        protected apiInterface: DatasetApiInterface,\n        protected mapCache: MapCache,\n        protected differs: KeyValueDiffers,\n        protected cd: ChangeDetectorRef\n    ) {\n        super(mapCache, differs, cd);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n        if (changes.selectedTimespan && this.selectedTimespan && this.map) {\n            this.clearMap();\n            this.initLayer();\n            this.data.forEach((entry) => {\n                if (this.selectedTimespan.from <= entry.timestamp && entry.timestamp <= this.selectedTimespan.to) {\n                    this.layer.addLayer(this.createGeoJson(entry, this.dataset));\n                }\n            });\n            this.layer.addTo(this.map);\n        }\n    }\n\n    protected drawGeometries() {\n        this.isContentLoading(true);\n        this.apiInterface.getDatasets(this.serviceUrl, this.filter).subscribe((datasets) => {\n            datasets.forEach((dataset) => {\n                this.dataset = dataset;\n                const timespan = new Timespan(dataset.firstValue.timestamp, dataset.lastValue.timestamp);\n                this.apiInterface.getData<LocatedProfileDataEntry>(dataset.id, this.serviceUrl, timespan)\n                    .subscribe((data) => {\n                        if (this.map && data.values instanceof Array) {\n                            this.initLayer();\n                            this.data = [];\n                            const timelist: number[] = [];\n                            data.values.forEach((entry) => {\n                                this.data.push(entry);\n                                const geojson = this.createGeoJson(entry, dataset);\n                                timelist.push(entry.timestamp);\n                                this.layer.addLayer(geojson);\n                            });\n                            this.onTimeListDetermined.emit(timelist);\n                            this.layer.addTo(this.map);\n                            this.zoomToMarkerBounds(this.layer.getBounds());\n                        }\n                        this.isContentLoading(false);\n                    });\n            });\n        });\n    }\n\n    private initLayer() {\n        this.layer = L.markerClusterGroup({ animate: false });\n    }\n\n    private clearMap() {\n        if (this.map && this.layer) {\n            this.map.removeLayer(this.layer);\n        }\n    }\n\n    private createGeoJson(profileDataEntry: LocatedProfileDataEntry, dataset: IDataset): L.GeoJSON {\n        const geojson = new L.GeoJSON(profileDataEntry.geometry);\n        geojson.setStyle(this.defaultStyle);\n        geojson.on('click', () => {\n            this.onSelected.emit({\n                dataset,\n                data: profileDataEntry\n            });\n        });\n        geojson.on('mouseover', () => {\n            geojson.setStyle(this.highlightStyle);\n            geojson.bringToFront();\n        });\n        geojson.on('mouseout', () => {\n            geojson.setStyle(this.defaultStyle);\n        });\n        return geojson;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule, Type } from '@angular/core';\nimport { HelgolandCoreModule } from '@helgoland/core';\n\nimport { HelgolandMapModule } from '../base/map.module';\nimport { LastValueMapSelectorComponent } from './last-value-map-selector/last-value-map-selector.component';\nimport { PlatformMapSelectorComponent } from './platform-map-selector/platform-map-selector.component';\nimport { LastValueLabelGenerator } from './services/last-value-label-generator.interface';\nimport { LastValueLabelGeneratorService } from './services/last-value-label-generator.service';\nimport { StationMapSelectorComponent } from './station-map-selector/station-map-selector.component';\nimport { ProfileTrajectoryMapSelectorComponent } from './trajectory-map-selector/trajectory-map-selector.component';\n\nconst COMPONENTS = [\n    PlatformMapSelectorComponent,\n    StationMapSelectorComponent,\n    ProfileTrajectoryMapSelectorComponent,\n    LastValueMapSelectorComponent\n];\n\nexport interface HelgolandMapSelectorModuleConfig {\n    lastValueLabelGeneratorService: Type<LastValueLabelGenerator>;\n}\n\n@NgModule({\n    declarations: [\n        COMPONENTS\n    ],\n    imports: [\n        CommonModule,\n        HelgolandCoreModule,\n        HelgolandMapModule\n    ],\n    exports: [\n        COMPONENTS\n    ],\n    providers: [\n        { provide: LastValueLabelGenerator, useClass: LastValueLabelGeneratorService }\n    ]\n})\nexport class HelgolandMapSelectorModule {\n    static forRoot(config?: HelgolandMapSelectorModuleConfig): ModuleWithProviders {\n        return {\n            ngModule: HelgolandMapSelectorModule,\n            providers: [\n                { provide: LastValueLabelGenerator, useClass: config && config.lastValueLabelGeneratorService || LastValueLabelGeneratorService }\n            ]\n        };\n    }\n}\n"],"names":["map","L.map","L.tileLayer","L.control","L.geoJSON","L.circleMarker","marker","L.marker","L.Marker","COMPONENTS","L.markerClusterGroup","L.featureGroup","L.divIcon","L.GeoJSON"],"mappings":"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"}
