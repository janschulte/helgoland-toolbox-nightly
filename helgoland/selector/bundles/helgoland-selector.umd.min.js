!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@helgoland/core"),require("@ngx-translate/core"),require("rxjs/Observable"),require("@angular/common"),require("@helgoland/depiction")):"function"==typeof define&&define.amd?define("@helgoland/selector",["exports","@angular/core","@helgoland/core","@ngx-translate/core","rxjs/Observable","@angular/common","@helgoland/depiction"],t):t((e.helgoland=e.helgoland||{},e.helgoland.selector={}),e.ng.core,null,null,e.rxjs.Observable,e.ng.common,null)}(this,function(e,n,s,t,i,r,o){"use strict";var a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)};function c(e,t){function i(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return c(t,e),t}(s.Timeseries),p=function(){function e(e){this.apiInterface=e,this.defaultSelected=!1,this.onSelectionChanged=new n.EventEmitter,this.timeseriesList=[]}return e.prototype.ngOnInit=function(){var i=this;if(this.station){var e=this.station.properties&&this.station.properties.id?this.station.properties.id:this.station.id;this.apiInterface.getStation(e,this.url).subscribe(function(e){for(var t in i.station=e,i.counter=0,i.station.properties.timeseries)i.station.properties.timeseries.hasOwnProperty(t)&&(i.counter++,i.apiInterface.getSingleTimeseries(t,i.url).subscribe(function(e){i.prepareResult(e,i.defaultSelected),i.counter--},function(e){i.counter--}))})}},e.prototype.toggle=function(e){e.selected=!e.selected,this.updateSelection()},e.prototype.prepareResult=function(e,t){e.selected=t,this.timeseriesList.push(e),this.updateSelection()},e.prototype.updateSelection=function(){var e=this.timeseriesList.filter(function(e){return e.selected});this.onSelectionChanged.emit(e)},e.decorators=[{type:n.Component,args:[{selector:"n52-dataset-by-station-selector",template:'<div class="item" *ngFor="let timeseries of timeseriesList" (click)="toggle(timeseries)">\n    <div *ngIf="counter">\n        {{counter}} timeseries are loading...\n    </div>\n    <div [ngClass]="{\'selected\': timeseries.selected}">\n        <div>\n            {{timeseries.parameters.phenomenon.label}}\n        </div>\n        <span>{{timeseries.parameters.procedure.label}}</span>\n        <span *ngIf="timeseries.parameters.category.label && timeseries.parameters.category.label != timeseries.parameters.phenomenon.label">({{timeseries.parameters.category.label}})</span>\n        <div class="additionalInfo" *ngIf="timeseries.lastValue">\n            <span>{{timeseries.lastValue.value}}</span>\n            <span>{{timeseries.uom}}</span>\n            <span>({{timeseries.lastValue.timestamp| date: \'short\'}})</span>\n        </div>\n    </div>\n</div>\n',styles:[":host .item+.item{padding-top:10px}:host .item.error{display:none}:host .item label{margin-bottom:0}"]}]}],e.ctorParameters=function(){return[{type:s.DatasetApiInterface}]},e.propDecorators={station:[{type:n.Input}],url:[{type:n.Input}],defaultSelected:[{type:n.Input}],phenomenonId:[{type:n.Input}],onSelectionChanged:[{type:n.Output}]},e}(),u=function(){function e(){this.cache=new Map}return e.decorators=[{type:n.Injectable}],e}(),d=function(){function e(e,t,i){this.listSelectorService=e,this.apiInterface=t,this.apiMapping=i,this.onDatasetSelection=new n.EventEmitter}return e.prototype.ngOnChanges=function(e){var t=this;if(e.providerList&&e.providerList.currentValue)if(this.selectorId&&this.listSelectorService.cache.has(this.selectorId)&&this.isEqual(this.providerList,this.listSelectorService.providerList)){this.parameters=this.listSelectorService.cache.get(this.selectorId);var i=this.parameters.findIndex(function(e){return e.isDisabled})-1;this.activePanel=this.selectorId+"-"+i}else{this.selectorId&&this.listSelectorService.cache.set(this.selectorId,this.parameters),this.parameters[0].filterList=this.providerList.map(function(e){return e.filter=Object.assign({},t.filter),e}),this.listSelectorService.providerList=this.providerList,this.activePanel=this.selectorId+"-0",this.parameters[0].isDisabled=!1;for(var r=1;r<this.parameters.length;r++)this.parameters[r].isDisabled=!0}},e.prototype.itemSelected=function(e,t){var i=this;if(t<this.parameters.length-1){this.parameters[t].headerAddition=e.label,this.activePanel=this.selectorId+"-"+(t+1),this.parameters[t+1].isDisabled=!1,this.parameters[t+1].filterList=JSON.parse(JSON.stringify(e.filterList)),this.parameters[t+1].filterList.forEach(function(e){return e.filter[i.parameters[t].type]=e.itemId});for(var r=t+2;r<this.parameters.length;r++)this.parameters[r].isDisabled=!0;for(var n=t+1;n<this.parameters.length;n++)this.parameters[n].headerAddition=""}else e.filterList.forEach(function(e){e.filter[i.parameters[t].type]=e.itemId,i.openDataset(e.url,e.filter)})},e.prototype.openDataset=function(t,i){var r=this;this.apiMapping.getApiVersion(t).subscribe(function(e){e===s.DatasetApiVersion.V2?r.apiInterface.getDatasets(t,i).subscribe(function(e){return r.onDatasetSelection.emit(e)}):e===s.DatasetApiVersion.V1&&r.apiInterface.getTimeseries(t,i).subscribe(function(e){return r.onDatasetSelection.emit(e)})})},e.prototype.isEqual=function(e,i){var r=!0;return e.length===i.length?e.forEach(function(t){i.find(function(e){return t.id===e.id&&t.url===e.url})||(r=!1)}):r=!1,r},e.decorators=[{type:n.Component,args:[{selector:"n52-list-selector",template:'<div>{{activePanel}}</div>\n<div *ngFor="let param of parameters; let i = index">\n  <h3>\n    <span>{{param.header}}</span>\n    <span *ngIf="param.headerAddition">-</span>\n    <span>{{param.headerAddition}}</span>\n  </h3>\n  <div *ngIf="!param.isDisabled">\n    <n52-multi-service-filter-selector [endpoint]="param.type" [filterList]="param.filterList" (onItemSelected)="itemSelected($event, i)"></n52-multi-service-filter-selector>\n  </div>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:u},{type:s.DatasetApiInterface},{type:s.DatasetApiMapping}]},e.propDecorators={parameters:[{type:n.Input}],filter:[{type:n.Input}],providerList:[{type:n.Input}],selectorId:[{type:n.Input}],onDatasetSelection:[{type:n.Output}]},e}(),f={offering:"offering",phenomenon:"phenomenon",procedure:"procedure",feature:"feature",category:"category",platform:"platform",dataset:"dataset"},m=function(r){function e(e,t){var i=r.call(this,t)||this;return i.apiInterface=e,i.translate=t,i.onItemSelected=new n.EventEmitter,i.loading=0,i}return c(e,r),e.prototype.ngOnChanges=function(){this.loadItems()},e.prototype.onSelectItem=function(e){this.onItemSelected.emit(e)},e.prototype.languageChanged=function(){this.loadItems()},e.prototype.loadItems=function(){var r=this;this.items=[],this.filterList.forEach(function(t){r.loading++;var i=t.filter||{};switch(r.endpoint){case f.offering:r.apiInterface.getOfferings(t.url,i).subscribe(function(e){return r.setItems(e,i,t.url,i.service)},function(e){return r.errorOnLoading});break;case f.phenomenon:r.apiInterface.getPhenomena(t.url,i).subscribe(function(e){return r.setItems(e,i,t.url,i.service)},function(e){return r.errorOnLoading});break;case f.procedure:r.apiInterface.getProcedures(t.url,i).subscribe(function(e){return r.setItems(e,i,t.url,i.service)},function(e){return r.errorOnLoading});break;case f.feature:r.apiInterface.getFeatures(t.url,i).subscribe(function(e){return r.setItems(e,i,t.url,i.service)},function(e){return r.errorOnLoading});break;case f.category:r.apiInterface.getCategories(t.url,i).subscribe(function(e){return r.setItems(e,i,t.url,i.service)},function(e){return r.errorOnLoading});break;case f.platform:r.apiInterface.getPlatforms(t.url,i).subscribe(function(e){return r.setItems(e,i,t.url,i.service)},function(e){return r.errorOnLoading});break;case f.dataset:r.apiInterface.getDatasets(t.url,i).subscribe(function(e){return r.setItems(e,i,t.url,i.service)},function(e){return r.errorOnLoading});break;default:console.error("Wrong endpoint: "+r.endpoint),r.loading--}})},e.prototype.errorOnLoading=function(){this.loading--},e.prototype.setItems=function(e,r,n,s){var o=this;this.loading--,e.forEach(function(t){var e={filter:r,itemId:t.id,url:n,service:s},i=o.items.find(function(e){if(e.label===t.label)return!0});i?i.filterList.push(e):(t.filterList=[e],o.items.push(t))})},e.decorators=[{type:n.Component,args:[{selector:"n52-multi-service-filter-selector",template:'<div *ngIf="loading > 0">\n    <span>loading...</span>\n</div>\n<div *ngFor="let item of items" (click)="onSelectItem(item)">\n    {{item.id}} - {{item.label}}\n</div>'}]}],e.ctorParameters=function(){return[{type:s.DatasetApiInterface},{type:t.TranslateService}]},e.propDecorators={endpoint:[{type:n.Input}],filterList:[{type:n.Input}],onItemSelected:[{type:n.Output}]},e}(s.LanguageChangNotifier),h=function(r){function e(e,t){var i=r.call(this,e)||this;return i.translate=e,i.apiInterface=t,i.onItemSelected=new n.EventEmitter,i}return c(e,r),e.prototype.ngOnChanges=function(e){e.endpoint&&this.loadItems()},e.prototype.onSelectItem=function(e){this.onItemSelected.emit(e)},e.prototype.languageChanged=function(){this.loadItems()},e.prototype.loadItems=function(){var t=this;switch(this.loading=!0,this.endpoint){case"offering":this.apiInterface.getOfferings(this.serviceUrl,this.filter).subscribe(function(e){return t.setItems(e)},function(e){return t.errorOnLoading});break;case"phenomenon":this.apiInterface.getPhenomena(this.serviceUrl,this.filter).subscribe(function(e){return t.setItems(e)},function(e){return t.errorOnLoading});break;case"procedure":this.apiInterface.getProcedures(this.serviceUrl,this.filter).subscribe(function(e){return t.setItems(e)},function(e){return t.errorOnLoading});break;case"category":this.apiInterface.getCategories(this.serviceUrl,this.filter).subscribe(function(e){return t.setItems(e)},function(e){return t.errorOnLoading});break;case"feature":this.apiInterface.getFeatures(this.serviceUrl,this.filter).subscribe(function(e){return t.setItems(e)},function(e){return t.errorOnLoading});break;default:console.error("Wrong endpoint: "+this.endpoint)}},e.prototype.errorOnLoading=function(){this.loading=!1},e.prototype.setItems=function(e){e instanceof Array?this.items=e:this.items=[],this.loading=!1},e.decorators=[{type:n.Component,args:[{selector:"n52-service-filter-selector",template:'<div *ngIf="loading">\n    loading...\n</div>\n<div *ngIf="!loading && items?.length === 0">\n    no results found\n</div>\n<div class="selector-entry" *ngFor="let item of items" (click)="onSelectItem(item)" [ngClass]="{\'selected\': selectionId === item.id}">\n    <n52-label-mapper label="{{item.label}}"></n52-label-mapper>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:t.TranslateService},{type:s.DatasetApiInterface}]},e.propDecorators={endpoint:[{type:n.Input}],serviceUrl:[{type:n.Input}],filter:[{type:n.Input}],selectionId:[{type:n.Input}],onItemSelected:[{type:n.Output}]},e}(s.LanguageChangNotifier),v=function(){function e(e){this.apiInterface=e}return e.prototype.fetchServicesOfAPI=function(r,n,e){var s=this;return new i.Observable(function(i){s.apiInterface.getServices(r,e).subscribe(function(e){if(e&&e instanceof Array){var t=e.map(function(e){if(!s.isServiceBlacklisted(e.id,r,n))return e});i.next(t),i.complete()}},function(e){i.error(e),i.complete()})})},e.prototype.isServiceBlacklisted=function(t,i,e){var r=!1;return e.forEach(function(e){e.serviceId===t&&e.apiUrl===i&&(r=!0)}),r},e.decorators=[{type:n.Injectable}],e.ctorParameters=function(){return[{type:s.DatasetApiInterface}]},e}(),g=function(){function e(e){this.serviceSelectorService=e,this.onServiceSelected=new n.EventEmitter,this.loadingCount=0}return e.prototype.ngOnInit=function(){var i=this;this.filter||(this.filter={}),this.providerBlacklist||(this.providerBlacklist=[]),this.datasetApiList&&(this.loadingCount=this.datasetApiList.length,this.services=[],this.unResolvableServices=[],this.datasetApiList.forEach(function(t){i.serviceSelectorService.fetchServicesOfAPI(t.url,i.providerBlacklist,i.filter).subscribe(function(e){i.loadingCount--,e&&e instanceof Array&&e.forEach(function(e){(0<e.quantities.platforms||i.supportStations&&0<e.quantities.stations)&&i.services.push(e)}),i.services.sort(function(e,t){return e.label<t.label?-1:e.label>t.label?1:0})},function(e){i.showUnresolvableServices&&i.unResolvableServices.push(t),i.loadingCount--})}))},e.prototype.isSelected=function(e){return!!this.selectedService&&(this.selectedService.id===e.id&&this.selectedService.apiUrl===e.apiUrl)},e.prototype.selectService=function(e){this.onServiceSelected.emit(e)},e.decorators=[{type:n.Component,args:[{selector:"n52-service-selector",template:'<div *ngIf="loadingCount > 0">\n  <span>Requesting {{loadingCount}} providers...</span>\n</div>\n<div class="service-list">\n  <div class="service-item" *ngFor="let service of services" (click)="selectService(service)" [ngClass]="{\'selected\': isSelected(service)}">\n    <div>{{service.label}}</div>\n    <div class="small">{{service.type}}, {{service.version}}\n    </div>\n    <div class="small" *ngIf="service.apiUrl">{{\'service-selector.service-url\' | translate}}: {{service.apiUrl}}</div>\n    <div class="small">\n      <span *ngIf="service.quantities.stations !== undefined">{{\'service-selector.stations\' | translate}}: {{service.quantities.stations}}</span>\n      <span *ngIf="service.quantities.platforms !== undefined">{{\'service-selector.platforms\' | translate}}: {{service.quantities.platforms}}</span>\n      <span *ngIf="service.quantities.timeseries !== undefined">{{\'service-selector.timeseries\' | translate}}: {{service.quantities.timeseries}}</span>\n      <span *ngIf="service.quantities.datasets !== undefined">{{\'service-selector.datasets\' | translate}}: {{service.quantities.datasets}}</span>\n      <span>{{\'service-selector.phenomena\' | translate}}: {{service.quantities.phenomena}}</span>\n    </div>\n  </div>\n  <div *ngFor="let item of unResolvableServices">\n    <div style="color: red;">{{item.name}} is currently not reachable</div>\n  </div>\n</div>\n',styles:[":host .service-list .service-item{padding:5px}:host .service-list .service-item+.add-service,:host .service-list .service-item+.service-item{margin-top:10px}:host .service-list .service-item:hover{cursor:pointer}"]}]}],e.ctorParameters=function(){return[{type:v}]},e.propDecorators={datasetApiList:[{type:n.Input}],providerBlacklist:[{type:n.Input}],supportStations:[{type:n.Input}],selectedService:[{type:n.Input}],filter:[{type:n.Input}],showUnresolvableServices:[{type:n.Input}],onServiceSelected:[{type:n.Output}]},e}(),I=function(){function e(){}return e.decorators=[{type:n.NgModule,args:[{declarations:[g,h,p,m,d],imports:[r.CommonModule,t.TranslateModule,o.HelgolandLabelMapperModule,s.HelgolandCoreModule],exports:[g,h,p,m,d],providers:[v,u]}]}],e}();e.HelgolandSelectorModule=I,e.ExtendedTimeseries=l,e.DatasetByStationSelectorComponent=p,e.ListSelectorComponent=d,e.ListSelectorService=u,e.MultiServiceFilterEndpoint=f,e.MultiServiceFilterSelectorComponent=m,e.ServiceSelectorComponent=g,e.ServiceSelectorService=v,e.ServiceFilterSelectorComponent=h,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=helgoland-selector.umd.min.js.map