{"version":3,"sources":["null","ng://@helgoland/selector/lib/dataset-by-station-selector/dataset-by-station-selector.component.ts","ng://@helgoland/selector/lib/list-selector/list-selector.service.ts","ng://@helgoland/selector/lib/list-selector/list-selector.component.ts","ng://@helgoland/selector/lib/multi-service-filter-selector/multi-service-filter-selector.component.ts","ng://@helgoland/selector/lib/service-filter-selector/service-filter-selector.component.ts","ng://@helgoland/selector/lib/service-selector/service-selector.service.ts","ng://@helgoland/selector/lib/service-selector/service-selector.component.ts","ng://@helgoland/selector/lib/selector.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ExtendedTimeseries","_super","tslib_1.__extends","Timeseries","DatasetByStationSelectorComponent","apiInterface","EventEmitter","ngOnInit","station","stationId","properties","id","getStation","url","subscribe","_this","counter","timeseries","getSingleTimeseries","result","prepareResult","defaultSelected","error","toggle","selected","updateSelection","selection","timeseriesList","push","filter","entry","onSelectionChanged","emit","Component","args","selector","template","styles","DatasetApiInterface","Input","Output","ListSelectorService","Map","Injectable","ListSelectorComponent","listSelectorService","apiMapping","ngOnChanges","changes","currentValue","selectorId","cache","has","isEqual","providerList","parameters","get","idx","findIndex","isDisabled","activePanel","set","filterList","map","assign","i","length","itemSelected","item","index","headerAddition","label","JSON","parse","stringify","forEach","type","j","itemId","openDataset","params","getApiVersion","apiVersionId","DatasetApiVersion","V2","getDatasets","onDatasetSelection","V1","getTimeseries","listOne","listTwo","match","entryOne","find","entryTwo","DatasetApiMapping","offering","phenomenon","procedure","feature","category","platform","dataset","MultiServiceFilterSelectorComponent","translate","call","loadItems","onSelectItem","onItemSelected","languageChanged","items","loading","endpoint","MultiServiceFilterEndpoint","getOfferings","res","setItems","service","errorOnLoading","getPhenomena","getProcedures","getFeatures","getCategories","getPlatforms","console","prevfilter","elem","TranslateService","LanguageChangNotifier","ServiceFilterSelectorComponent","serviceUrl","ServiceSelectorService","fetchServicesOfAPI","blacklist","Observable","observer","getServices","services","usableServices","isServiceBlacklisted","next","complete","serviceID","isBlacklisted","serviceId","apiUrl","ServiceSelectorComponent","serviceSelectorService","providerBlacklist","datasetApiList","loadingCount","unResolvableServices","api","quantities","platforms","supportStations","stations","sort","a","showUnresolvableServices","isSelected","selectedService","selectService","onServiceSelected","HelgolandSelectorModule","NgModule","declarations","imports","CommonModule","TranslateModule","HelgolandLabelMapperModule","HelgolandCoreModule","exports","providers"],"mappings":"wlBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAAO,EAA0BR,EAAGC,GAEzB,SAAAQ,IAAgBC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,OCvBnFK,EAAA,SAAAC,sEAAwCC,EAAAA,EAAAA,KAAxC,CAAwCC,EAAAA,YAAxCC,EAAA,WA+CI,SAAAA,EACcC,GAAAT,KAAAS,aAAAA,wBAbW,0BAM+B,IAAIC,EAAAA,iCAEd,UAQvCF,EAAAN,UAAAS,+BACH,GAAIX,KAAKY,QAAS,CACd,IAAMC,EAAYb,KAAKY,QAAQE,YAAcd,KAAKY,QAAQE,WAAWC,GAAKf,KAAKY,QAAQE,WAAWC,GAAKf,KAAKY,QAAQG,GACpHf,KAAKS,aAAaO,WAAWH,EAAWb,KAAKiB,KACxCC,UAAU,SAACN,GAGR,IAAK,IAAMG,KAFXI,EAAKP,QAAUA,EACfO,EAAKC,QAAU,EACED,EAAKP,QAAQE,WAAWO,WACjCF,EAAKP,QAAQE,WAAWO,WAAWxB,eAAekB,KAClDI,EAAKC,UACLD,EAAKV,aAAaa,oBAAoBP,EAAII,EAAKF,KAC1CC,UAAU,SAACK,GACRJ,EAAKK,cAAa,EAA+BL,EAAKM,iBACtDN,EAAKC,WACN,SAACM,GACAP,EAAKC,iBAQ9BZ,EAAAN,UAAAyB,gBAAON,GACVA,EAAWO,UAAYP,EAAWO,SAClC5B,KAAK6B,mBAGCrB,EAAAN,UAAAsB,cAAV,SAAwBD,EAA4BO,GAChDP,EAAOK,SAAWE,EAClB9B,KAAK+B,eAAeC,KAAKT,GACzBvB,KAAK6B,mBAGDrB,EAAAN,UAAA2B,2BACJ,IAAMC,EAAY9B,KAAK+B,eAAeE,OAAO,SAACC,GAAU,OAAAA,EAAMN,WAC9D5B,KAAKmC,mBAAmBC,KAAKN,wBAnFpCO,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,kCACVC,SAAU,m2BAkBVC,OAAQ,CAAC,qJA1BJC,EAAAA,wDA8BJC,EAAAA,mBAGAA,EAAAA,+BAGAA,EAAAA,4BAGAA,EAAAA,kCAGAC,EAAAA,YAxCL,GCHAC,EAAA,mCAayD,IAAIC,+BAF5DC,EAAAA,eAXD,gBCkDI,SAAAC,EACcC,EACAxC,EACAyC,GAFAlD,KAAAiD,oBAAAA,EACAjD,KAAAS,aAAAA,EACAT,KAAAkD,WAAAA,0BAPwC,IAAIxC,EAAAA,oBAUnDsC,EAAA9C,UAAAiD,qBAAYC,cACf,GAAIA,EAAO,cAAiBA,EAAO,aAAcC,aAC7C,GAAIrD,KAAKsD,YAActD,KAAKiD,oBAAoBM,MAAMC,IAAIxD,KAAKsD,aACxDtD,KAAKyD,QAAQzD,KAAK0D,aAAc1D,KAAKiD,oBAAoBS,cAAe,CAC3E1D,KAAK2D,WAAa3D,KAAKiD,oBAAoBM,MAAMK,IAAI5D,KAAKsD,YAC1D,IAAMO,EAAM7D,KAAK2D,WAAWG,UAAU,SAAC5B,GACnC,OAAOA,EAAM6B,aACZ,EACL/D,KAAKgE,YAAchE,KAAKsD,WAAa,IAAMO,MACxC,CACC7D,KAAKsD,YACLtD,KAAKiD,oBAAoBM,MAAMU,IAAIjE,KAAKsD,WAAYtD,KAAK2D,YAG7D3D,KAAK2D,WAAW,GAAGO,WAAalE,KAAK0D,aAAaS,IAAI,SAACjC,GAEnD,OADAA,EAAMD,OAASzC,OAAO4E,OAAO,GAAIjD,EAAKc,QAC/BC,IAEXlC,KAAKiD,oBAAoBS,aAAe1D,KAAK0D,aAE7C1D,KAAKgE,YAAchE,KAAKsD,WAAa,KACrCtD,KAAK2D,WAAW,GAAGI,YAAa,EAEhC,IAAK,IAAIM,EAAI,EAAGA,EAAIrE,KAAK2D,WAAWW,OAAQD,IACxCrE,KAAK2D,WAAWU,GAAGN,YAAa,IAMzCf,EAAA9C,UAAAqE,sBAAaC,EAAyBC,cACzC,GAAIA,EAAQzE,KAAK2D,WAAWW,OAAS,EAAG,CACpCtE,KAAK2D,WAAWc,GAAOC,eAAiBF,EAAKG,MAC7C3E,KAAKgE,YAAchE,KAAKsD,WAAa,KAAOmB,EAAQ,GACpDzE,KAAK2D,WAAWc,EAAQ,GAAGV,YAAa,EAExC/D,KAAK2D,WAAWc,EAAQ,GAAGP,WAAaU,KAAKC,MAAMD,KAAKE,UAAUN,EAAKN,aAEvElE,KAAK2D,WAAWc,EAAQ,GAAGP,WAAWa,QAAQ,SAAC7C,GAAU,OAAAA,EAAK,OAAQf,EAAKwC,WAAWc,GAAOO,MAAQ9C,EAAK,SAC1G,IAAK,IAAImC,EAAII,EAAQ,EAAGJ,EAAIrE,KAAK2D,WAAWW,OAAQD,IAChDrE,KAAK2D,WAAWU,GAAGN,YAAa,EAEpC,IAAK,IAAIkB,EAAIR,EAAQ,EAAGQ,EAAIjF,KAAK2D,WAAWW,OAAQW,IAChDjF,KAAK2D,WAAWsB,GAAGP,eAAiB,QAGxCF,EAAKN,WAAWa,QAAQ,SAAC7C,GACrBA,EAAMD,OAAOd,EAAKwC,WAAWc,GAAOO,MAAQ9C,EAAMgD,OAClD/D,EAAKgE,YAAYjD,EAAMjB,IAAKiB,EAAMD,WAKtCe,EAAA9C,UAAAiF,qBAAYlE,EAAamE,cAC7BpF,KAAKkD,WAAWmC,cAAcpE,GAAKC,UAAU,SAACoE,GACtCA,IAAiBC,EAAAA,kBAAkBC,GACnCrE,EAAKV,aAAagF,YAAYxE,EAAKmE,GAAQlE,UAAU,SAACK,GAAW,OAAAJ,EAAKuE,mBAAmBtD,KAAKb,KACvF+D,IAAiBC,EAAAA,kBAAkBI,IAC1CxE,EAAKV,aAAamF,cAAc3E,EAAKmE,GAAQlE,UACzC,SAACK,GAAW,OAAAJ,EAAKuE,mBAAmBtD,KAAKb,QAMjDyB,EAAA9C,UAAAuD,iBAAQoC,EAA6BC,GACzC,IAAIC,GAAQ,EAYZ,OAXIF,EAAQvB,SAAWwB,EAAQxB,OAC3BuB,EAAQd,QAAQ,SAACiB,GACCF,EAAQG,KAAK,SAACC,GACxB,OAAIF,EAASjF,KAAOmF,EAASnF,IAAMiF,EAAS/E,MAAQiF,EAASjF,QAGnD8E,GAAQ,KAG1BA,GAAQ,EAELA,uBAtHd1D,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,oBACVC,SAAU,wfAPkBK,SAT5BH,EAAAA,2BACAyD,EAAAA,yDA8BCxD,EAAAA,sBAGAA,EAAAA,4BAGAA,EAAAA,0BAGAA,EAAAA,kCAGAC,EAAAA,kBCnCDwD,SAAW,WACXC,WAAa,aACbC,UAAY,YACZC,QAAU,UACVC,SAAW,WACXC,SAAW,WACXC,QAAU,yBA6BV,SAAAC,EACclG,EACAmG,GAFd,IAAAzF,EAIId,EAAAwG,KAAA7G,KAAM4G,IAAU5G,YAHNmB,EAAAV,aAAAA,EACAU,EAAAyF,UAAAA,mBAP2C,IAAIlG,EAAAA,uBAE5C,WAXoCJ,EAAAA,EAAAA,GAqB9CqG,EAAAzG,UAAAiD,uBACHnD,KAAK8G,aAGFH,EAAAzG,UAAA6G,sBAAavC,GAChBxE,KAAKgH,eAAe5E,KAAKoC,IAGnBmC,EAAAzG,UAAA+G,gBAAV,WACIjH,KAAK8G,aAGDH,EAAAzG,UAAA4G,gCACJ9G,KAAKkH,MAAQ,GACblH,KAAKkE,WAAWa,QAAQ,SAAC7C,GACrBf,EAAKgG,UACL,IAAMlF,EAASC,EAAMD,QAAU,GAC/B,OAAQd,EAAKiG,UACT,KAAKC,EAA2BjB,SAC5BjF,EAAKV,aAAa6G,aAAapF,EAAMjB,IAAKgB,GAAQf,UAC9C,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,EAAKtF,EAAQC,EAAMjB,IAAKgB,EAAOwF,UACtD,SAAC/F,GAAU,OAAAP,EAAKuG,iBAEpB,MACJ,KAAKL,EAA2BhB,WAC5BlF,EAAKV,aAAakH,aAAazF,EAAMjB,IAAKgB,GAAQf,UAC9C,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,EAAKtF,EAAQC,EAAMjB,IAAKgB,EAAOwF,UACtD,SAAC/F,GAAU,OAAAP,EAAKuG,iBAEpB,MACJ,KAAKL,EAA2Bf,UAC5BnF,EAAKV,aAAamH,cAAc1F,EAAMjB,IAAKgB,GAAQf,UAC/C,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,EAAKtF,EAAQC,EAAMjB,IAAKgB,EAAOwF,UACtD,SAAC/F,GAAU,OAAAP,EAAKuG,iBAEpB,MACJ,KAAKL,EAA2Bd,QAC5BpF,EAAKV,aAAaoH,YAAY3F,EAAMjB,IAAKgB,GAAQf,UAC7C,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,EAAKtF,EAAQC,EAAMjB,IAAKgB,EAAOwF,UACtD,SAAC/F,GAAU,OAAAP,EAAKuG,iBAEpB,MACJ,KAAKL,EAA2Bb,SAC5BrF,EAAKV,aAAaqH,cAAc5F,EAAMjB,IAAKgB,GAAQf,UAC/C,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,EAAKtF,EAAQC,EAAMjB,IAAKgB,EAAOwF,UACtD,SAAC/F,GAAU,OAAAP,EAAKuG,iBAEpB,MACJ,KAAKL,EAA2BZ,SAC5BtF,EAAKV,aAAasH,aAAa7F,EAAMjB,IAAKgB,GAAQf,UAC9C,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,EAAKtF,EAAQC,EAAMjB,IAAKgB,EAAOwF,UACtD,SAAC/F,GAAU,OAAAP,EAAKuG,iBAEpB,MACJ,KAAKL,EAA2BX,QAC5BvF,EAAKV,aAAagF,YAAYvD,EAAMjB,IAAKgB,GAAQf,UAC7C,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,EAAKtF,EAAQC,EAAMjB,IAAKgB,EAAOwF,UACtD,SAAC/F,GAAU,OAAAP,EAAKuG,iBAEpB,MACJ,QACIM,QAAQtG,MAAM,mBAAqBP,EAAKiG,UACxCjG,EAAKgG,cAKbR,EAAAzG,UAAAwH,0BACJ1H,KAAKmH,WAGDR,EAAAzG,UAAAsH,kBAASD,EAA0BU,EAA6BhH,EAAawG,cACjFzH,KAAKmH,UACLI,EAAIxC,QAAQ,SAAC7C,GACT,IAAMD,EAAiB,CACnBA,OAAQgG,EACR/C,OAAQhD,EAAMnB,GACdE,IAAGA,EACHwG,QAAOA,GAELjD,EAAOrD,EAAK+F,MAAMjB,KAAK,SAACiC,GAC1B,GAAIA,EAAKvD,QAAUzC,EAAMyC,MAAS,OAAO,IAEzCH,EACAA,EAAKN,WAAWlC,KAAKC,IAErBC,EAAMgC,WAAa,CAACjC,GACpBd,EAAK+F,MAAMlF,KAAKE,2BArH/BG,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,oCACVC,SAAU,uNAvBLE,EAAAA,2BACAyF,EAAAA,sDA+BJxF,EAAAA,0BAGAA,EAAAA,8BAGAC,EAAAA,aARoDwF,EAAAA,qCCSrD,SAAAC,EACczB,EACAnG,GAFd,IAAAU,EAIId,EAAAwG,KAAA7G,KAAM4G,IAAU5G,YAHNmB,EAAAyF,UAAAA,EACAzF,EAAAV,aAAAA,mBAPmC,IAAIC,EAAAA,sBAfLJ,EAAAA,EAAAA,GA2BzC+H,EAAAnI,UAAAiD,qBAAYC,GACXA,EAAO,UACPpD,KAAK8G,aAINuB,EAAAnI,UAAA6G,sBAAavC,GAChBxE,KAAKgH,eAAe5E,KAAKoC,IAGnB6D,EAAAnI,UAAA+G,gBAAV,WACIjH,KAAK8G,aAGDuB,EAAAnI,UAAA4G,gCAEJ,OADA9G,KAAKmH,SAAU,EACPnH,KAAKoH,UACT,IAAK,WACDpH,KAAKS,aAAa6G,aAAatH,KAAKsI,WAAYtI,KAAKiC,QAChDf,UAAU,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,IAAM,SAAC7F,GAAU,OAAAP,EAAKuG,iBAC5D,MACJ,IAAK,aACD1H,KAAKS,aAAakH,aAAa3H,KAAKsI,WAAYtI,KAAKiC,QAChDf,UAAU,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,IAAM,SAAC7F,GAAU,OAAAP,EAAKuG,iBAC5D,MACJ,IAAK,YACD1H,KAAKS,aAAamH,cAAc5H,KAAKsI,WAAYtI,KAAKiC,QACjDf,UAAU,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,IAAM,SAAC7F,GAAU,OAAAP,EAAKuG,iBAC5D,MACJ,IAAK,WACD1H,KAAKS,aAAaqH,cAAc9H,KAAKsI,WAAYtI,KAAKiC,QACjDf,UAAU,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,IAAM,SAAC7F,GAAU,OAAAP,EAAKuG,iBAC5D,MACJ,IAAK,UACD1H,KAAKS,aAAaoH,YAAY7H,KAAKsI,WAAYtI,KAAKiC,QAC/Cf,UAAU,SAACqG,GAAQ,OAAApG,EAAKqG,SAASD,IAAM,SAAC7F,GAAU,OAAAP,EAAKuG,iBAC5D,MACJ,QACIM,QAAQtG,MAAM,mBAAqB1B,KAAKoH,YAI5CiB,EAAAnI,UAAAwH,0BACJ1H,KAAKmH,SAAU,GAGXkB,EAAAnI,UAAAsH,kBAASD,GACTA,aAAe5H,MACfK,KAAKkH,MAAQK,EAEbvH,KAAKkH,MAAQ,GAEjBlH,KAAKmH,SAAU,uBA5FtB9E,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,8BACVC,SAAU,gYAPL2F,EAAAA,wBADAzF,EAAAA,yDAqBJC,EAAAA,0BAGAA,EAAAA,sBAGAA,EAAAA,2BAGAA,EAAAA,8BAGAC,EAAAA,aAd+CwF,EAAAA,uBCpBpDG,EAAA,WAWI,SAAAA,EACc9H,GAAAT,KAAAS,aAAAA,SAGP8H,EAAArI,UAAAsI,4BACHvH,EACAwH,EACAxG,cAEA,OAAO,IAAIyG,EAAAA,WAAsB,SAACC,GAC9BxH,EAAKV,aAAamI,YAAY3H,EAAKgB,GAC9Bf,UACG,SAAC2H,GACG,GAAIA,GAAYA,aAAoBlJ,MAAO,CACvC,IAAMmJ,EAAiBD,EAAS1E,IAAI,SAACsD,GACjC,IAAKtG,EAAK4H,qBAAqBtB,EAAQ1G,GAAIE,EAAKwH,GAC5C,OAAOhB,IAGfkB,EAASK,KAAKF,GACdH,EAASM,aAGjB,SAACvH,GACGiH,EAASjH,MAAMA,GACfiH,EAASM,gBAKrBV,EAAArI,UAAA6I,8BAAqBG,EAAmBjI,EAAawH,GACzD,IAAIU,GAAgB,EAMpB,OALAV,EAAU1D,QAAQ,SAAC7C,GACXA,EAAMkH,YAAcF,GAAahH,EAAMmH,SAAWpI,IAClDkI,GAAgB,KAGjBA,uBAxCdpG,EAAAA,sDAPQL,EAAAA,yBADT,gBC6DI,SAAA4G,EACcC,GAAAvJ,KAAAuJ,uBAAAA,yBAPoC,IAAI7I,EAAAA,+BAIhC,SAMf4I,EAAApJ,UAAAS,+BACEX,KAAKiC,SAAUjC,KAAKiC,OAAS,IAC7BjC,KAAKwJ,oBAAqBxJ,KAAKwJ,kBAAoB,IACpDxJ,KAAKyJ,iBACLzJ,KAAK0J,aAAe1J,KAAKyJ,eAAenF,OACxCtE,KAAK6I,SAAW,GAChB7I,KAAK2J,qBAAuB,GAC5B3J,KAAKyJ,eAAe1E,QAAQ,SAAC6E,GACzBzI,EAAKoI,uBAAuBf,mBAAmBoB,EAAI3I,IAAKE,EAAKqI,kBAAmBrI,EAAKc,QAChFf,UACG,SAACqG,GACGpG,EAAKuI,eACDnC,GAAOA,aAAe5H,OACtB4H,EAAIxC,QAAQ,SAAC7C,IACwB,EAA7BA,EAAM2H,WAAWC,WACd3I,EAAK4I,iBAA+C,EAA5B7H,EAAM2H,WAAWG,WAC5C7I,EAAK0H,SAAS7G,KAAKE,KAI/Bf,EAAK0H,SAASoB,KAAK,SAACC,EAAG3K,GACnB,OAAI2K,EAAEvF,MAAQpF,EAAEoF,OAAiB,EAC7BuF,EAAEvF,MAAQpF,EAAEoF,MAAgB,EACzB,KAGf,SAACjD,GACOP,EAAKgJ,0BAA4BhJ,EAAKwI,qBAAqB3H,KAAK4H,GACpEzI,EAAKuI,qBAMtBJ,EAAApJ,UAAAkK,oBAAW3C,GACd,QAAKzH,KAAKqK,kBACHrK,KAAKqK,gBAAgBtJ,KAAO0G,EAAQ1G,IAAMf,KAAKqK,gBAAgBhB,SAAW5B,EAAQ4B,SAGtFC,EAAApJ,UAAAoK,uBAAc7C,GACjBzH,KAAKuK,kBAAkBnI,KAAKqF,wBAjGnCpF,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uBACVC,SAAU,y3CAsBVC,OAAQ,CAAC,qQA7BJ8F,6CAiCJ5F,EAAAA,iCAGAA,EAAAA,+BAGAA,EAAAA,+BAGAA,EAAAA,sBAGAA,EAAAA,wCAGAA,EAAAA,iCAGAC,EAAAA,eCtDL4H,EAAA,oDAgBCC,EAAAA,SAAQnI,KAAA,CAAC,CACRoI,aAAc,CACZpB,EACAjB,EACA7H,EACAmG,EACA3D,GAEF2H,QAAS,CACPC,EAAAA,aACAC,EAAAA,gBACAC,EAAAA,2BACAC,EAAAA,qBAEFC,QAAS,CACP1B,EACAjB,EACA7H,EACAmG,EACA3D,GAEFiI,UAAW,CACT1C,EACA1F,SAvCJ","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DatasetApiInterface, Station, Timeseries } from '@helgoland/core';\n\nexport class ExtendedTimeseries extends Timeseries {\n    public selected: boolean;\n}\n\n@Component({\n    selector: 'n52-dataset-by-station-selector',\n    template: `<div class=\"item\" *ngFor=\"let timeseries of timeseriesList\" (click)=\"toggle(timeseries)\">\n    <div *ngIf=\"counter\">\n        {{counter}} timeseries are loading...\n    </div>\n    <div [ngClass]=\"{'selected': timeseries.selected}\">\n        <div>\n            {{timeseries.parameters.phenomenon.label}}\n        </div>\n        <span>{{timeseries.parameters.procedure.label}}</span>\n        <span *ngIf=\"timeseries.parameters.category.label && timeseries.parameters.category.label != timeseries.parameters.phenomenon.label\">({{timeseries.parameters.category.label}})</span>\n        <div class=\"additionalInfo\" *ngIf=\"timeseries.lastValue\">\n            <span>{{timeseries.lastValue.value}}</span>\n            <span>{{timeseries.uom}}</span>\n            <span>({{timeseries.lastValue.timestamp| date: 'short'}})</span>\n        </div>\n    </div>\n</div>\n`,\n    styles: [`:host .item+.item{padding-top:10px}:host .item.error{display:none}:host .item label{margin-bottom:0}`]\n})\nexport class DatasetByStationSelectorComponent implements OnInit {\n\n    @Input()\n    public station: Station;\n\n    @Input()\n    public url: string;\n\n    @Input()\n    public defaultSelected = false;\n\n    @Input()\n    public phenomenonId: string;\n\n    @Output()\n    public onSelectionChanged: EventEmitter<Timeseries[]> = new EventEmitter<Timeseries[]>();\n\n    public timeseriesList: ExtendedTimeseries[] = [];\n\n    public counter: number;\n\n    constructor(\n        protected apiInterface: DatasetApiInterface\n    ) { }\n\n    public ngOnInit() {\n        if (this.station) {\n            const stationId = this.station.properties && this.station.properties.id ? this.station.properties.id : this.station.id;\n            this.apiInterface.getStation(stationId, this.url)\n                .subscribe((station) => {\n                    this.station = station;\n                    this.counter = 0;\n                    for (const id in this.station.properties.timeseries) {\n                        if (this.station.properties.timeseries.hasOwnProperty(id)) {\n                            this.counter++;\n                            this.apiInterface.getSingleTimeseries(id, this.url)\n                                .subscribe((result) => {\n                                    this.prepareResult(result as ExtendedTimeseries, this.defaultSelected);\n                                    this.counter--;\n                                }, (error) => {\n                                    this.counter--;\n                                });\n                        }\n                    }\n                });\n        }\n    }\n\n    public toggle(timeseries: ExtendedTimeseries) {\n        timeseries.selected = !timeseries.selected;\n        this.updateSelection();\n    }\n\n    protected prepareResult(result: ExtendedTimeseries, selection: boolean) {\n        result.selected = selection;\n        this.timeseriesList.push(result);\n        this.updateSelection();\n    }\n\n    private updateSelection() {\n        const selection = this.timeseriesList.filter((entry) => entry.selected);\n        this.onSelectionChanged.emit(selection);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { FilteredProvider, ParameterFilter } from '@helgoland/core';\n\nexport interface ListSelectorParameter {\n    header: string;\n    type: string;\n    isDisabled?: boolean;\n    headerAddition?: string;\n    filterList?: ParameterFilter[];\n}\n\n@Injectable()\nexport class ListSelectorService {\n    public cache: Map<string, ListSelectorParameter[]> = new Map<string, ListSelectorParameter[]>();\n    public providerList: FilteredProvider[];\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport {\n    DatasetApiInterface,\n    DatasetApiMapping,\n    DatasetApiVersion,\n    FilteredProvider,\n    IDataset,\n    ParameterFilter,\n} from '@helgoland/core';\n\nimport { FilteredParameter } from '../multi-service-filter-selector/multi-service-filter-selector.component';\nimport { ListSelectorParameter, ListSelectorService } from './list-selector.service';\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-list-selector',\n    template: `<div>{{activePanel}}</div>\n<div *ngFor=\"let param of parameters; let i = index\">\n  <h3>\n    <span>{{param.header}}</span>\n    <span *ngIf=\"param.headerAddition\">-</span>\n    <span>{{param.headerAddition}}</span>\n  </h3>\n  <div *ngIf=\"!param.isDisabled\">\n    <n52-multi-service-filter-selector [endpoint]=\"param.type\" [filterList]=\"param.filterList\" (onItemSelected)=\"itemSelected($event, i)\"></n52-multi-service-filter-selector>\n  </div>\n</div>\n`\n})\nexport class ListSelectorComponent implements OnChanges {\n\n    @Input()\n    public parameters: ListSelectorParameter[];\n\n    @Input()\n    public filter: ParameterFilter;\n\n    @Input()\n    public providerList: FilteredProvider[];\n\n    @Input()\n    public selectorId: string;\n\n    @Output()\n    public onDatasetSelection: EventEmitter<IDataset[]> = new EventEmitter<IDataset[]>();\n\n    public activePanel: string;\n\n    constructor(\n        protected listSelectorService: ListSelectorService,\n        protected apiInterface: DatasetApiInterface,\n        protected apiMapping: DatasetApiMapping\n    ) { }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.providerList && changes.providerList.currentValue) {\n            if (this.selectorId && this.listSelectorService.cache.has(this.selectorId)\n                && this.isEqual(this.providerList, this.listSelectorService.providerList)) {\n                this.parameters = this.listSelectorService.cache.get(this.selectorId);\n                const idx = this.parameters.findIndex((entry) => {\n                    return entry.isDisabled;\n                }) - 1;\n                this.activePanel = this.selectorId + '-' + idx;\n            } else {\n                if (this.selectorId) {\n                    this.listSelectorService.cache.set(this.selectorId, this.parameters);\n                }\n                // create filterlist for first parameter entry\n                this.parameters[0].filterList = this.providerList.map((entry) => {\n                    entry.filter = Object.assign({}, this.filter);\n                    return entry;\n                });\n                this.listSelectorService.providerList = this.providerList;\n                // open first tab\n                this.activePanel = this.selectorId + '-0';\n                this.parameters[0].isDisabled = false;\n                // disable parameterList\n                for (let i = 1; i < this.parameters.length; i++) {\n                    this.parameters[i].isDisabled = true;\n                }\n            }\n        }\n    }\n\n    public itemSelected(item: FilteredParameter, index: number) {\n        if (index < this.parameters.length - 1) {\n            this.parameters[index].headerAddition = item.label;\n            this.activePanel = this.selectorId + '-' + (index + 1);\n            this.parameters[index + 1].isDisabled = false;\n            // copy filter to new item\n            this.parameters[index + 1].filterList = JSON.parse(JSON.stringify(item.filterList));\n            // add filter for selected item to next\n            this.parameters[index + 1].filterList.forEach((entry) => entry.filter[this.parameters[index].type] = entry.itemId);\n            for (let i = index + 2; i < this.parameters.length; i++) {\n                this.parameters[i].isDisabled = true;\n            }\n            for (let j = index + 1; j < this.parameters.length; j++) {\n                this.parameters[j].headerAddition = '';\n            }\n        } else {\n            item.filterList.forEach((entry) => {\n                entry.filter[this.parameters[index].type] = entry.itemId;\n                this.openDataset(entry.url, entry.filter);\n            });\n        }\n    }\n\n    private openDataset(url: string, params: ParameterFilter) {\n        this.apiMapping.getApiVersion(url).subscribe((apiVersionId) => {\n            if (apiVersionId === DatasetApiVersion.V2) {\n                this.apiInterface.getDatasets(url, params).subscribe((result) => this.onDatasetSelection.emit(result));\n            } else if (apiVersionId === DatasetApiVersion.V1) {\n                this.apiInterface.getTimeseries(url, params).subscribe(\n                    (result) => this.onDatasetSelection.emit(result)\n                );\n            }\n        });\n    }\n\n    private isEqual(listOne: FilteredProvider[], listTwo: FilteredProvider[]): boolean {\n        let match = true;\n        if (listOne.length === listTwo.length) {\n            listOne.forEach((entryOne) => {\n                const found = listTwo.find((entryTwo) => {\n                    if (entryOne.id === entryTwo.id && entryOne.url === entryTwo.url) { return true; }\n                    return false;\n                });\n                if (!found) { match = false; }\n            });\n        } else {\n            match = false;\n        }\n        return match;\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { DatasetApiInterface, Filter, LanguageChangNotifier, Parameter, ParameterFilter } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport interface MultiServiceFilter {\n    url: string;\n    filter?: ParameterFilter;\n}\n\nexport enum MultiServiceFilterEndpoint {\n    offering = 'offering',\n    phenomenon = 'phenomenon',\n    procedure = 'procedure',\n    feature = 'feature',\n    category = 'category',\n    platform = 'platform',\n    dataset = 'dataset'\n}\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-multi-service-filter-selector',\n    template: `<div *ngIf=\"loading > 0\">\n    <span>loading...</span>\n</div>\n<div *ngFor=\"let item of items\" (click)=\"onSelectItem(item)\">\n    {{item.id}} - {{item.label}}\n</div>`\n})\nexport class MultiServiceFilterSelectorComponent extends LanguageChangNotifier implements OnChanges {\n\n    @Input()\n    public endpoint: MultiServiceFilterEndpoint;\n\n    @Input()\n    public filterList: MultiServiceFilter[];\n\n    @Output()\n    public onItemSelected: EventEmitter<FilteredParameter> = new EventEmitter<FilteredParameter>();\n\n    public loading = 0;\n    public items: FilteredParameter[];\n\n    constructor(\n        protected apiInterface: DatasetApiInterface,\n        protected translate: TranslateService\n    ) {\n        super(translate);\n    }\n\n    public ngOnChanges() {\n        this.loadItems();\n    }\n\n    public onSelectItem(item: FilteredParameter): void {\n        this.onItemSelected.emit(item);\n    }\n\n    protected languageChanged(): void {\n        this.loadItems();\n    }\n\n    private loadItems() {\n        this.items = [];\n        this.filterList.forEach((entry) => {\n            this.loading++;\n            const filter = entry.filter || {};\n            switch (this.endpoint) {\n                case MultiServiceFilterEndpoint.offering:\n                    this.apiInterface.getOfferings(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.phenomenon:\n                    this.apiInterface.getPhenomena(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.procedure:\n                    this.apiInterface.getProcedures(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.feature:\n                    this.apiInterface.getFeatures(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.category:\n                    this.apiInterface.getCategories(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.platform:\n                    this.apiInterface.getPlatforms(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.dataset:\n                    this.apiInterface.getDatasets(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                default:\n                    console.error('Wrong endpoint: ' + this.endpoint);\n                    this.loading--;\n            }\n        });\n    }\n\n    private errorOnLoading(): void {\n        this.loading--;\n    }\n\n    private setItems(res: FilteredParameter[], prevfilter: ParameterFilter, url: string, service: string): void {\n        this.loading--;\n        res.forEach((entry) => {\n            const filter: Filter = {\n                filter: prevfilter,\n                itemId: entry.id,\n                url,\n                service\n            };\n            const item = this.items.find((elem) => {\n                if (elem.label === entry.label) { return true; }\n            });\n            if (item) {\n                item.filterList.push(filter);\n            } else {\n                entry.filterList = [filter];\n                this.items.push(entry);\n            }\n        });\n    }\n\n}\n\nexport interface FilteredParameter extends Parameter {\n    filterList?: Filter[];\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { DatasetApiInterface, LanguageChangNotifier, Parameter, ParameterFilter } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-service-filter-selector',\n    template: `<div *ngIf=\"loading\">\n    loading...\n</div>\n<div *ngIf=\"!loading && items?.length === 0\">\n    no results found\n</div>\n<div class=\"selector-entry\" *ngFor=\"let item of items\" (click)=\"onSelectItem(item)\" [ngClass]=\"{'selected': selectionId === item.id}\">\n    <n52-label-mapper label=\"{{item.label}}\"></n52-label-mapper>\n</div>\n`\n})\nexport class ServiceFilterSelectorComponent extends LanguageChangNotifier implements OnChanges {\n\n    @Input()\n    public endpoint: string;\n\n    @Input()\n    public serviceUrl: string;\n\n    @Input()\n    public filter: ParameterFilter;\n\n    @Input()\n    public selectionId: string;\n\n    @Output()\n    public onItemSelected: EventEmitter<Parameter> = new EventEmitter<Parameter>();\n\n    public loading: boolean;\n    public items: Parameter[];\n\n    constructor(\n        protected translate: TranslateService,\n        protected apiInterface: DatasetApiInterface\n    ) {\n        super(translate);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.endpoint) {\n            this.loadItems();\n        }\n    }\n\n    public onSelectItem(item: Parameter): void {\n        this.onItemSelected.emit(item);\n    }\n\n    protected languageChanged() {\n        this.loadItems();\n    }\n\n    private loadItems() {\n        this.loading = true;\n        switch (this.endpoint) {\n            case 'offering':\n                this.apiInterface.getOfferings(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'phenomenon':\n                this.apiInterface.getPhenomena(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'procedure':\n                this.apiInterface.getProcedures(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'category':\n                this.apiInterface.getCategories(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'feature':\n                this.apiInterface.getFeatures(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            default:\n                console.error('Wrong endpoint: ' + this.endpoint);\n        }\n    }\n\n    private errorOnLoading(): void {\n        this.loading = false;\n    }\n\n    private setItems(res: Parameter[]): void {\n        if (res instanceof Array) {\n            this.items = res;\n        } else {\n            this.items = [];\n        }\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { DatasetApiInterface } from '@helgoland/core';\nimport { Service } from '@helgoland/core';\nimport { BlacklistedService } from '@helgoland/core';\nimport { ParameterFilter } from '@helgoland/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class ServiceSelectorService {\n\n    constructor(\n        protected apiInterface: DatasetApiInterface\n    ) { }\n\n    public fetchServicesOfAPI(\n        url: string,\n        blacklist: BlacklistedService[],\n        filter: ParameterFilter\n    ): Observable<Service[]> {\n        return new Observable<Service[]>((observer: Observer<Service[]>) => {\n            this.apiInterface.getServices(url, filter)\n                .subscribe(\n                    (services) => {\n                        if (services && services instanceof Array) {\n                            const usableServices = services.map((service) => {\n                                if (!this.isServiceBlacklisted(service.id, url, blacklist)) {\n                                    return service;\n                                }\n                            });\n                            observer.next(usableServices);\n                            observer.complete();\n                        }\n                    },\n                    (error) => {\n                        observer.error(error);\n                        observer.complete();\n                    });\n        });\n    }\n\n    private isServiceBlacklisted(serviceID: string, url: string, blacklist: BlacklistedService[]): boolean {\n        let isBlacklisted = false;\n        blacklist.forEach((entry) => {\n            if (entry.serviceId === serviceID && entry.apiUrl === url) {\n                isBlacklisted = true;\n            }\n        });\n        return isBlacklisted;\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BlacklistedService, DatasetApi, ParameterFilter, Service } from '@helgoland/core';\n\nimport { ServiceSelectorService } from './service-selector.service';\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-service-selector',\n    template: `<div *ngIf=\"loadingCount > 0\">\n  <span>Requesting {{loadingCount}} providers...</span>\n</div>\n<div class=\"service-list\">\n  <div class=\"service-item\" *ngFor=\"let service of services\" (click)=\"selectService(service)\" [ngClass]=\"{'selected': isSelected(service)}\">\n    <div>{{service.label}}</div>\n    <div class=\"small\">{{service.type}}, {{service.version}}\n    </div>\n    <div class=\"small\" *ngIf=\"service.apiUrl\">{{'service-selector.service-url' | translate}}: {{service.apiUrl}}</div>\n    <div class=\"small\">\n      <span *ngIf=\"service.quantities.stations !== undefined\">{{'service-selector.stations' | translate}}: {{service.quantities.stations}}</span>\n      <span *ngIf=\"service.quantities.platforms !== undefined\">{{'service-selector.platforms' | translate}}: {{service.quantities.platforms}}</span>\n      <span *ngIf=\"service.quantities.timeseries !== undefined\">{{'service-selector.timeseries' | translate}}: {{service.quantities.timeseries}}</span>\n      <span *ngIf=\"service.quantities.datasets !== undefined\">{{'service-selector.datasets' | translate}}: {{service.quantities.datasets}}</span>\n      <span>{{'service-selector.phenomena' | translate}}: {{service.quantities.phenomena}}</span>\n    </div>\n  </div>\n  <div *ngFor=\"let item of unResolvableServices\">\n    <div style=\"color: red;\">{{item.name}} is currently not reachable</div>\n  </div>\n</div>\n`,\n    styles: [`:host .service-list .service-item{padding:5px}:host .service-list .service-item+.add-service,:host .service-list .service-item+.service-item{margin-top:10px}:host .service-list .service-item:hover{cursor:pointer}`]\n})\nexport class ServiceSelectorComponent implements OnInit {\n\n    @Input()\n    public datasetApiList: DatasetApi[];\n\n    @Input()\n    public providerBlacklist: BlacklistedService[];\n\n    @Input()\n    public supportStations: boolean;\n\n    @Input()\n    public selectedService: Service;\n\n    @Input()\n    public filter: ParameterFilter;\n\n    @Input()\n    public showUnresolvableServices: boolean;\n\n    @Output()\n    public onServiceSelected: EventEmitter<Service> = new EventEmitter<Service>();\n\n    public services: Service[];\n    public unResolvableServices: DatasetApi[];\n    public loadingCount = 0;\n\n    constructor(\n        protected serviceSelectorService: ServiceSelectorService\n    ) { }\n\n    public ngOnInit() {\n        if (!this.filter) { this.filter = {}; }\n        if (!this.providerBlacklist) { this.providerBlacklist = []; }\n        if (this.datasetApiList) {\n            this.loadingCount = this.datasetApiList.length;\n            this.services = [];\n            this.unResolvableServices = [];\n            this.datasetApiList.forEach((api) => {\n                this.serviceSelectorService.fetchServicesOfAPI(api.url, this.providerBlacklist, this.filter)\n                    .subscribe(\n                        (res) => {\n                            this.loadingCount--;\n                            if (res && res instanceof Array) {\n                                res.forEach((entry) => {\n                                    if (entry.quantities.platforms > 0\n                                        || this.supportStations && entry.quantities.stations > 0) {\n                                        this.services.push(entry);\n                                    }\n                                });\n                            }\n                            this.services.sort((a, b) => {\n                                if (a.label < b.label) { return -1; }\n                                if (a.label > b.label) { return 1; }\n                                return 0;\n                            });\n                        },\n                        (error) => {\n                            if (this.showUnresolvableServices) { this.unResolvableServices.push(api); }\n                            this.loadingCount--;\n                        });\n            });\n        }\n    }\n\n    public isSelected(service: Service) {\n        if (!this.selectedService) { return false; }\n        return this.selectedService.id === service.id && this.selectedService.apiUrl === service.apiUrl;\n    }\n\n    public selectService(service: Service) {\n        this.onServiceSelected.emit(service);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HelgolandCoreModule } from '@helgoland/core';\nimport { HelgolandLabelMapperModule } from '@helgoland/depiction';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DatasetByStationSelectorComponent } from './dataset-by-station-selector/dataset-by-station-selector.component';\nimport { ListSelectorComponent } from './list-selector/list-selector.component';\nimport { ListSelectorService } from './list-selector/list-selector.service';\nimport {\n  MultiServiceFilterSelectorComponent,\n} from './multi-service-filter-selector/multi-service-filter-selector.component';\nimport { ServiceFilterSelectorComponent } from './service-filter-selector/service-filter-selector.component';\nimport { ServiceSelectorComponent } from './service-selector/service-selector.component';\nimport { ServiceSelectorService } from './service-selector/service-selector.service';\n\n@NgModule({\n  declarations: [\n    ServiceSelectorComponent,\n    ServiceFilterSelectorComponent,\n    DatasetByStationSelectorComponent,\n    MultiServiceFilterSelectorComponent,\n    ListSelectorComponent\n  ],\n  imports: [\n    CommonModule,\n    TranslateModule,\n    HelgolandLabelMapperModule,\n    HelgolandCoreModule\n  ],\n  exports: [\n    ServiceSelectorComponent,\n    ServiceFilterSelectorComponent,\n    DatasetByStationSelectorComponent,\n    MultiServiceFilterSelectorComponent,\n    ListSelectorComponent\n  ],\n  providers: [\n    ServiceSelectorService,\n    ListSelectorService\n  ]\n})\nexport class HelgolandSelectorModule { }\n"]}