{"version":3,"file":"helgoland-selector.js.map","sources":["ng://@helgoland/selector/lib/dataset-by-station-selector/dataset-by-station-selector.component.ts","ng://@helgoland/selector/lib/list-selector/list-selector.service.ts","ng://@helgoland/selector/lib/list-selector/list-selector.component.ts","ng://@helgoland/selector/lib/multi-service-filter-selector/multi-service-filter-selector.component.ts","ng://@helgoland/selector/lib/service-filter-selector/service-filter-selector.component.ts","ng://@helgoland/selector/lib/service-selector/service-selector.service.ts","ng://@helgoland/selector/lib/service-selector/service-selector.component.ts","ng://@helgoland/selector/lib/selector.module.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DatasetApiInterface, Station, Timeseries } from '@helgoland/core';\n\nexport class ExtendedTimeseries extends Timeseries {\n    public selected: boolean;\n}\n\n@Component({\n    selector: 'n52-dataset-by-station-selector',\n    template: `<div class=\"item\" *ngFor=\"let timeseries of timeseriesList\" (click)=\"toggle(timeseries)\">\n    <div *ngIf=\"counter\">\n        {{counter}} timeseries are loading...\n    </div>\n    <div [ngClass]=\"{'selected': timeseries.selected}\">\n        <div>\n            {{timeseries.parameters.phenomenon.label}}\n        </div>\n        <span>{{timeseries.parameters.procedure.label}}</span>\n        <span *ngIf=\"timeseries.parameters.category.label && timeseries.parameters.category.label != timeseries.parameters.phenomenon.label\">({{timeseries.parameters.category.label}})</span>\n        <div class=\"additionalInfo\" *ngIf=\"timeseries.lastValue\">\n            <span>{{timeseries.lastValue.value}}</span>\n            <span>{{timeseries.uom}}</span>\n            <span>({{timeseries.lastValue.timestamp| date: 'short'}})</span>\n        </div>\n    </div>\n</div>\n`,\n    styles: [`:host .item+.item{padding-top:10px}:host .item.error{display:none}:host .item label{margin-bottom:0}`]\n})\nexport class DatasetByStationSelectorComponent implements OnInit {\n\n    @Input()\n    public station: Station;\n\n    @Input()\n    public url: string;\n\n    @Input()\n    public defaultSelected = false;\n\n    @Input()\n    public phenomenonId: string;\n\n    @Output()\n    public onSelectionChanged: EventEmitter<Timeseries[]> = new EventEmitter<Timeseries[]>();\n\n    public timeseriesList: ExtendedTimeseries[] = [];\n\n    public counter: number;\n\n    constructor(\n        protected apiInterface: DatasetApiInterface\n    ) { }\n\n    public ngOnInit() {\n        if (this.station) {\n            const stationId = this.station.properties && this.station.properties.id ? this.station.properties.id : this.station.id;\n            this.apiInterface.getStation(stationId, this.url)\n                .subscribe((station) => {\n                    this.station = station;\n                    this.counter = 0;\n                    for (const id in this.station.properties.timeseries) {\n                        if (this.station.properties.timeseries.hasOwnProperty(id)) {\n                            this.counter++;\n                            this.apiInterface.getSingleTimeseries(id, this.url)\n                                .subscribe((result) => {\n                                    this.prepareResult(result as ExtendedTimeseries, this.defaultSelected);\n                                    this.counter--;\n                                }, (error) => {\n                                    this.counter--;\n                                });\n                        }\n                    }\n                });\n        }\n    }\n\n    public toggle(timeseries: ExtendedTimeseries) {\n        timeseries.selected = !timeseries.selected;\n        this.updateSelection();\n    }\n\n    protected prepareResult(result: ExtendedTimeseries, selection: boolean) {\n        result.selected = selection;\n        this.timeseriesList.push(result);\n        this.updateSelection();\n    }\n\n    private updateSelection() {\n        const selection = this.timeseriesList.filter((entry) => entry.selected);\n        this.onSelectionChanged.emit(selection);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { FilteredProvider, ParameterFilter } from '@helgoland/core';\n\nexport interface ListSelectorParameter {\n    header: string;\n    type: string;\n    isDisabled?: boolean;\n    headerAddition?: string;\n    filterList?: ParameterFilter[];\n}\n\n@Injectable()\nexport class ListSelectorService {\n    public cache: Map<string, ListSelectorParameter[]> = new Map<string, ListSelectorParameter[]>();\n    public providerList: FilteredProvider[];\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport {\n    DatasetApiInterface,\n    DatasetApiMapping,\n    DatasetApiVersion,\n    FilteredProvider,\n    IDataset,\n    ParameterFilter,\n} from '@helgoland/core';\n\nimport { FilteredParameter } from '../multi-service-filter-selector/multi-service-filter-selector.component';\nimport { ListSelectorParameter, ListSelectorService } from './list-selector.service';\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-list-selector',\n    template: `<div>{{activePanel}}</div>\n<div *ngFor=\"let param of parameters; let i = index\">\n  <h3>\n    <span>{{param.header}}</span>\n    <span *ngIf=\"param.headerAddition\">-</span>\n    <span>{{param.headerAddition}}</span>\n  </h3>\n  <div *ngIf=\"!param.isDisabled\">\n    <n52-multi-service-filter-selector [endpoint]=\"param.type\" [filterList]=\"param.filterList\" (onItemSelected)=\"itemSelected($event, i)\"></n52-multi-service-filter-selector>\n  </div>\n</div>\n`\n})\nexport class ListSelectorComponent implements OnChanges {\n\n    @Input()\n    public parameters: ListSelectorParameter[];\n\n    @Input()\n    public filter: ParameterFilter;\n\n    @Input()\n    public providerList: FilteredProvider[];\n\n    @Input()\n    public selectorId: string;\n\n    @Output()\n    public onDatasetSelection: EventEmitter<IDataset[]> = new EventEmitter<IDataset[]>();\n\n    public activePanel: string;\n\n    constructor(\n        protected listSelectorService: ListSelectorService,\n        protected apiInterface: DatasetApiInterface,\n        protected apiMapping: DatasetApiMapping\n    ) { }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.providerList && changes.providerList.currentValue) {\n            if (this.selectorId && this.listSelectorService.cache.has(this.selectorId)\n                && this.isEqual(this.providerList, this.listSelectorService.providerList)) {\n                this.parameters = this.listSelectorService.cache.get(this.selectorId);\n                const idx = this.parameters.findIndex((entry) => {\n                    return entry.isDisabled;\n                }) - 1;\n                this.activePanel = this.selectorId + '-' + idx;\n            } else {\n                if (this.selectorId) {\n                    this.listSelectorService.cache.set(this.selectorId, this.parameters);\n                }\n                // create filterlist for first parameter entry\n                this.parameters[0].filterList = this.providerList.map((entry) => {\n                    entry.filter = Object.assign({}, this.filter);\n                    return entry;\n                });\n                this.listSelectorService.providerList = this.providerList;\n                // open first tab\n                this.activePanel = this.selectorId + '-0';\n                this.parameters[0].isDisabled = false;\n                // disable parameterList\n                for (let i = 1; i < this.parameters.length; i++) {\n                    this.parameters[i].isDisabled = true;\n                }\n            }\n        }\n    }\n\n    public itemSelected(item: FilteredParameter, index: number) {\n        if (index < this.parameters.length - 1) {\n            this.parameters[index].headerAddition = item.label;\n            this.activePanel = this.selectorId + '-' + (index + 1);\n            this.parameters[index + 1].isDisabled = false;\n            // copy filter to new item\n            this.parameters[index + 1].filterList = JSON.parse(JSON.stringify(item.filterList));\n            // add filter for selected item to next\n            this.parameters[index + 1].filterList.forEach((entry) => entry.filter[this.parameters[index].type] = entry.itemId);\n            for (let i = index + 2; i < this.parameters.length; i++) {\n                this.parameters[i].isDisabled = true;\n            }\n            for (let j = index + 1; j < this.parameters.length; j++) {\n                this.parameters[j].headerAddition = '';\n            }\n        } else {\n            item.filterList.forEach((entry) => {\n                entry.filter[this.parameters[index].type] = entry.itemId;\n                this.openDataset(entry.url, entry.filter);\n            });\n        }\n    }\n\n    private openDataset(url: string, params: ParameterFilter) {\n        this.apiMapping.getApiVersion(url).subscribe((apiVersionId) => {\n            if (apiVersionId === DatasetApiVersion.V2) {\n                this.apiInterface.getDatasets(url, params).subscribe((result) => this.onDatasetSelection.emit(result));\n            } else if (apiVersionId === DatasetApiVersion.V1) {\n                this.apiInterface.getTimeseries(url, params).subscribe(\n                    (result) => this.onDatasetSelection.emit(result)\n                );\n            }\n        });\n    }\n\n    private isEqual(listOne: FilteredProvider[], listTwo: FilteredProvider[]): boolean {\n        let match = true;\n        if (listOne.length === listTwo.length) {\n            listOne.forEach((entryOne) => {\n                const found = listTwo.find((entryTwo) => {\n                    if (entryOne.id === entryTwo.id && entryOne.url === entryTwo.url) { return true; }\n                    return false;\n                });\n                if (!found) { match = false; }\n            });\n        } else {\n            match = false;\n        }\n        return match;\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { DatasetApiInterface, Filter, LanguageChangNotifier, Parameter, ParameterFilter } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport interface MultiServiceFilter {\n    url: string;\n    filter?: ParameterFilter;\n}\n\nexport enum MultiServiceFilterEndpoint {\n    offering = 'offering',\n    phenomenon = 'phenomenon',\n    procedure = 'procedure',\n    feature = 'feature',\n    category = 'category',\n    platform = 'platform',\n    dataset = 'dataset'\n}\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-multi-service-filter-selector',\n    template: `<div *ngIf=\"loading > 0\">\n    <span>loading...</span>\n</div>\n<div *ngFor=\"let item of items\" (click)=\"onSelectItem(item)\">\n    {{item.id}} - {{item.label}}\n</div>`\n})\nexport class MultiServiceFilterSelectorComponent extends LanguageChangNotifier implements OnChanges {\n\n    @Input()\n    public endpoint: MultiServiceFilterEndpoint;\n\n    @Input()\n    public filterList: MultiServiceFilter[];\n\n    @Output()\n    public onItemSelected: EventEmitter<FilteredParameter> = new EventEmitter<FilteredParameter>();\n\n    public loading = 0;\n    public items: FilteredParameter[];\n\n    constructor(\n        protected apiInterface: DatasetApiInterface,\n        protected translate: TranslateService\n    ) {\n        super(translate);\n    }\n\n    public ngOnChanges() {\n        this.loadItems();\n    }\n\n    public onSelectItem(item: FilteredParameter): void {\n        this.onItemSelected.emit(item);\n    }\n\n    protected languageChanged(): void {\n        this.loadItems();\n    }\n\n    private loadItems() {\n        this.items = [];\n        this.filterList.forEach((entry) => {\n            this.loading++;\n            const filter = entry.filter || {};\n            switch (this.endpoint) {\n                case MultiServiceFilterEndpoint.offering:\n                    this.apiInterface.getOfferings(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.phenomenon:\n                    this.apiInterface.getPhenomena(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.procedure:\n                    this.apiInterface.getProcedures(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.feature:\n                    this.apiInterface.getFeatures(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.category:\n                    this.apiInterface.getCategories(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.platform:\n                    this.apiInterface.getPlatforms(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                case MultiServiceFilterEndpoint.dataset:\n                    this.apiInterface.getDatasets(entry.url, filter).subscribe(\n                        (res) => this.setItems(res, filter, entry.url, filter.service),\n                        (error) => this.errorOnLoading\n                    );\n                    break;\n                default:\n                    console.error('Wrong endpoint: ' + this.endpoint);\n                    this.loading--;\n            }\n        });\n    }\n\n    private errorOnLoading(): void {\n        this.loading--;\n    }\n\n    private setItems(res: FilteredParameter[], prevfilter: ParameterFilter, url: string, service: string): void {\n        this.loading--;\n        res.forEach((entry) => {\n            const filter: Filter = {\n                filter: prevfilter,\n                itemId: entry.id,\n                url,\n                service\n            };\n            const item = this.items.find((elem) => {\n                if (elem.label === entry.label) { return true; }\n            });\n            if (item) {\n                item.filterList.push(filter);\n            } else {\n                entry.filterList = [filter];\n                this.items.push(entry);\n            }\n        });\n    }\n\n}\n\nexport interface FilteredParameter extends Parameter {\n    filterList?: Filter[];\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { DatasetApiInterface, LanguageChangNotifier, Parameter, ParameterFilter } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-service-filter-selector',\n    template: `<div *ngIf=\"loading\">\n    loading...\n</div>\n<div *ngIf=\"!loading && items?.length === 0\">\n    no results found\n</div>\n<div class=\"selector-entry\" *ngFor=\"let item of items\" (click)=\"onSelectItem(item)\" [ngClass]=\"{'selected': selectionId === item.id}\">\n    <n52-label-mapper label=\"{{item.label}}\"></n52-label-mapper>\n</div>\n`\n})\nexport class ServiceFilterSelectorComponent extends LanguageChangNotifier implements OnChanges {\n\n    @Input()\n    public endpoint: string;\n\n    @Input()\n    public serviceUrl: string;\n\n    @Input()\n    public filter: ParameterFilter;\n\n    @Input()\n    public selectionId: string;\n\n    @Output()\n    public onItemSelected: EventEmitter<Parameter> = new EventEmitter<Parameter>();\n\n    public loading: boolean;\n    public items: Parameter[];\n\n    constructor(\n        protected translate: TranslateService,\n        protected apiInterface: DatasetApiInterface\n    ) {\n        super(translate);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.endpoint) {\n            this.loadItems();\n        }\n    }\n\n    public onSelectItem(item: Parameter): void {\n        this.onItemSelected.emit(item);\n    }\n\n    protected languageChanged() {\n        this.loadItems();\n    }\n\n    private loadItems() {\n        this.loading = true;\n        switch (this.endpoint) {\n            case 'offering':\n                this.apiInterface.getOfferings(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'phenomenon':\n                this.apiInterface.getPhenomena(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'procedure':\n                this.apiInterface.getProcedures(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'category':\n                this.apiInterface.getCategories(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            case 'feature':\n                this.apiInterface.getFeatures(this.serviceUrl, this.filter)\n                    .subscribe((res) => this.setItems(res), (error) => this.errorOnLoading);\n                break;\n            default:\n                console.error('Wrong endpoint: ' + this.endpoint);\n        }\n    }\n\n    private errorOnLoading(): void {\n        this.loading = false;\n    }\n\n    private setItems(res: Parameter[]): void {\n        if (res instanceof Array) {\n            this.items = res;\n        } else {\n            this.items = [];\n        }\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { DatasetApiInterface } from '@helgoland/core';\nimport { Service } from '@helgoland/core';\nimport { BlacklistedService } from '@helgoland/core';\nimport { ParameterFilter } from '@helgoland/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class ServiceSelectorService {\n\n    constructor(\n        protected apiInterface: DatasetApiInterface\n    ) { }\n\n    public fetchServicesOfAPI(\n        url: string,\n        blacklist: BlacklistedService[],\n        filter: ParameterFilter\n    ): Observable<Service[]> {\n        return new Observable<Service[]>((observer: Observer<Service[]>) => {\n            this.apiInterface.getServices(url, filter)\n                .subscribe(\n                    (services) => {\n                        if (services && services instanceof Array) {\n                            const usableServices = services.map((service) => {\n                                if (!this.isServiceBlacklisted(service.id, url, blacklist)) {\n                                    return service;\n                                }\n                            });\n                            observer.next(usableServices);\n                            observer.complete();\n                        }\n                    },\n                    (error) => {\n                        observer.error(error);\n                        observer.complete();\n                    });\n        });\n    }\n\n    private isServiceBlacklisted(serviceID: string, url: string, blacklist: BlacklistedService[]): boolean {\n        let isBlacklisted = false;\n        blacklist.forEach((entry) => {\n            if (entry.serviceId === serviceID && entry.apiUrl === url) {\n                isBlacklisted = true;\n            }\n        });\n        return isBlacklisted;\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BlacklistedService, DatasetApi, ParameterFilter, Service } from '@helgoland/core';\n\nimport { ServiceSelectorService } from './service-selector.service';\n\n/**\n * Component to select an item out of a list of provider with a given filter combination.\n */\n@Component({\n    selector: 'n52-service-selector',\n    template: `<div *ngIf=\"loadingCount > 0\">\n  <span>Requesting {{loadingCount}} providers...</span>\n</div>\n<div class=\"service-list\">\n  <div class=\"service-item\" *ngFor=\"let service of services\" (click)=\"selectService(service)\" [ngClass]=\"{'selected': isSelected(service)}\">\n    <div>{{service.label}}</div>\n    <div class=\"small\">{{service.type}}, {{service.version}}\n    </div>\n    <div class=\"small\" *ngIf=\"service.apiUrl\">{{'service-selector.service-url' | translate}}: {{service.apiUrl}}</div>\n    <div class=\"small\">\n      <span *ngIf=\"service.quantities.stations !== undefined\">{{'service-selector.stations' | translate}}: {{service.quantities.stations}}</span>\n      <span *ngIf=\"service.quantities.platforms !== undefined\">{{'service-selector.platforms' | translate}}: {{service.quantities.platforms}}</span>\n      <span *ngIf=\"service.quantities.timeseries !== undefined\">{{'service-selector.timeseries' | translate}}: {{service.quantities.timeseries}}</span>\n      <span *ngIf=\"service.quantities.datasets !== undefined\">{{'service-selector.datasets' | translate}}: {{service.quantities.datasets}}</span>\n      <span>{{'service-selector.phenomena' | translate}}: {{service.quantities.phenomena}}</span>\n    </div>\n  </div>\n  <div *ngFor=\"let item of unResolvableServices\">\n    <div style=\"color: red;\">{{item.name}} is currently not reachable</div>\n  </div>\n</div>\n`,\n    styles: [`:host .service-list .service-item{padding:5px}:host .service-list .service-item+.add-service,:host .service-list .service-item+.service-item{margin-top:10px}:host .service-list .service-item:hover{cursor:pointer}`]\n})\nexport class ServiceSelectorComponent implements OnInit {\n\n    @Input()\n    public datasetApiList: DatasetApi[];\n\n    @Input()\n    public providerBlacklist: BlacklistedService[];\n\n    @Input()\n    public supportStations: boolean;\n\n    @Input()\n    public selectedService: Service;\n\n    @Input()\n    public filter: ParameterFilter;\n\n    @Input()\n    public showUnresolvableServices: boolean;\n\n    @Output()\n    public onServiceSelected: EventEmitter<Service> = new EventEmitter<Service>();\n\n    public services: Service[];\n    public unResolvableServices: DatasetApi[];\n    public loadingCount = 0;\n\n    constructor(\n        protected serviceSelectorService: ServiceSelectorService\n    ) { }\n\n    public ngOnInit() {\n        if (!this.filter) { this.filter = {}; }\n        if (!this.providerBlacklist) { this.providerBlacklist = []; }\n        if (this.datasetApiList) {\n            this.loadingCount = this.datasetApiList.length;\n            this.services = [];\n            this.unResolvableServices = [];\n            this.datasetApiList.forEach((api) => {\n                this.serviceSelectorService.fetchServicesOfAPI(api.url, this.providerBlacklist, this.filter)\n                    .subscribe(\n                        (res) => {\n                            this.loadingCount--;\n                            if (res && res instanceof Array) {\n                                res.forEach((entry) => {\n                                    if (entry.quantities.platforms > 0\n                                        || this.supportStations && entry.quantities.stations > 0) {\n                                        this.services.push(entry);\n                                    }\n                                });\n                            }\n                            this.services.sort((a, b) => {\n                                if (a.label < b.label) { return -1; }\n                                if (a.label > b.label) { return 1; }\n                                return 0;\n                            });\n                        },\n                        (error) => {\n                            if (this.showUnresolvableServices) { this.unResolvableServices.push(api); }\n                            this.loadingCount--;\n                        });\n            });\n        }\n    }\n\n    public isSelected(service: Service) {\n        if (!this.selectedService) { return false; }\n        return this.selectedService.id === service.id && this.selectedService.apiUrl === service.apiUrl;\n    }\n\n    public selectService(service: Service) {\n        this.onServiceSelected.emit(service);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HelgolandCoreModule } from '@helgoland/core';\nimport { HelgolandLabelMapperModule } from '@helgoland/depiction';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DatasetByStationSelectorComponent } from './dataset-by-station-selector/dataset-by-station-selector.component';\nimport { ListSelectorComponent } from './list-selector/list-selector.component';\nimport { ListSelectorService } from './list-selector/list-selector.service';\nimport {\n  MultiServiceFilterSelectorComponent,\n} from './multi-service-filter-selector/multi-service-filter-selector.component';\nimport { ServiceFilterSelectorComponent } from './service-filter-selector/service-filter-selector.component';\nimport { ServiceSelectorComponent } from './service-selector/service-selector.component';\nimport { ServiceSelectorService } from './service-selector/service-selector.service';\n\n@NgModule({\n  declarations: [\n    ServiceSelectorComponent,\n    ServiceFilterSelectorComponent,\n    DatasetByStationSelectorComponent,\n    MultiServiceFilterSelectorComponent,\n    ListSelectorComponent\n  ],\n  imports: [\n    CommonModule,\n    TranslateModule,\n    HelgolandLabelMapperModule,\n    HelgolandCoreModule\n  ],\n  exports: [\n    ServiceSelectorComponent,\n    ServiceFilterSelectorComponent,\n    DatasetByStationSelectorComponent,\n    MultiServiceFilterSelectorComponent,\n    ListSelectorComponent\n  ],\n  providers: [\n    ServiceSelectorService,\n    ListSelectorService\n  ]\n})\nexport class HelgolandSelectorModule { }\n"],"names":[],"mappings":"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"}
