{"version":3,"file":"helgoland-eventing.js.map","sources":["ng://@helgoland/eventing/lib/eventing-api.service.ts","ng://@helgoland/eventing/lib/eventing-impl-api-interface.service.ts","ng://@helgoland/eventing/lib/eventing.module.ts"],"sourcesContent":["import { ApiInterface, HttpRequestOptions } from '@helgoland/core';\nimport { Observable } from 'rxjs';\n\nimport { EventFilter } from './model/request/events';\nimport { SubscriptionFilter } from './model/request/subscriptions';\nimport { Event, EventResults } from './model/response/events';\nimport { Subscription, SubscriptionResults } from './model/response/subscriptions';\nimport { PublicationFilter } from './model/request/publications';\nimport { PublicationResults, Publication } from './model/response/publications';\nimport { NotificationFilter } from './model/request/notifications';\nimport { NotificationResults, Notification } from './model/response/notifications';\n\nexport abstract class EventingApiService extends ApiInterface {\n\n  public abstract getEvents(apiUrl: string, params?: EventFilter, options?: HttpRequestOptions): Observable<EventResults>;\n\n  public abstract getEvent(id: string, apiUrl: string, options?: HttpRequestOptions): Observable<Event>;\n\n  public abstract getSubscriptions(apiUrl: string, params?: SubscriptionFilter, options?: HttpRequestOptions): Observable<SubscriptionResults>;\n\n  public abstract getSubscription(id: string, apiUrl: string, options?: HttpRequestOptions): Observable<Subscription>;\n\n  public abstract getPublications(apiUrl: string, params?: PublicationFilter, options?: HttpRequestOptions): Observable<PublicationResults>;\n\n  public abstract getPublication(id: string, apiUrl: string, options?: HttpRequestOptions): Observable<Publication>;\n\n  public abstract getNotifications(apiUrl: string, params?: NotificationFilter, options?: HttpRequestOptions): Observable<NotificationResults>;\n\n  public abstract getNotification(id: string, apiUrl: string, options?: HttpRequestOptions): Observable<Notification>;\n\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpRequestOptions, HttpService, Timespan, UriParameterCoder } from '@helgoland/core';\nimport { Observable } from 'rxjs';\n\nimport { EventingApiService } from './eventing-api.service';\nimport { EventingFilter } from './model/request/common';\nimport { EventFilter } from './model/request/events';\nimport { NotificationFilter } from './model/request/notifications';\nimport { PublicationFilter } from './model/request/publications';\nimport { SubscriptionFilter } from './model/request/subscriptions';\nimport { Event, EventResults } from './model/response/events';\nimport { Notification, NotificationResults } from './model/response/notifications';\nimport { Publication, PublicationResults } from './model/response/publications';\nimport { Subscription, SubscriptionResults } from './model/response/subscriptions';\n\n@Injectable()\nexport class EventingImplApiInterface extends EventingApiService {\n\n    constructor(\n        private httpService: HttpService\n    ) { super(); }\n\n    public getEvents(apiUrl: string, filterParameter: EventFilter = {}, options: HttpRequestOptions = {}): Observable<EventResults> {\n        const url = this.createRequestUrl(apiUrl, 'events');\n        let httpParams = this.prepareFilterParams(filterParameter);\n        httpParams = this.addParameterFilter(filterParameter, 'latest', httpParams);\n        httpParams = this.addParameterFilter(filterParameter, 'subscriptions', httpParams);\n        httpParams = this.addTimespan(filterParameter.timespan, httpParams);\n        return this.requestApi<EventResults>(url, httpParams, options);\n    }\n\n    public getEvent(id: string, apiUrl: string, options: HttpRequestOptions = {}): Observable<Event> {\n        const url = this.createRequestUrl(apiUrl, 'events', id);\n        return this.requestApi<Event>(url, null, options);\n    }\n\n    public getSubscriptions(apiUrl: string, filterParameter: SubscriptionFilter = {}, options: HttpRequestOptions = {}): Observable<SubscriptionResults> {\n        const url = this.createRequestUrl(apiUrl, 'subscriptions');\n        const httpParams = this.prepareFilterParams(filterParameter);\n        return this.requestApi<SubscriptionResults>(url, httpParams, options);\n    }\n\n    public getSubscription(id: string, apiUrl: string, options: HttpRequestOptions = {}): Observable<Subscription> {\n        const url = this.createRequestUrl(apiUrl, 'subscriptions', id);\n        return this.requestApi<Subscription>(url, null, options);\n    }\n\n    public getPublications(apiUrl: string, filterParameter: PublicationFilter = {}, options?: HttpRequestOptions): Observable<PublicationResults> {\n        const url = this.createRequestUrl(apiUrl, 'publications');\n        let httpParams = this.prepareFilterParams(filterParameter);\n        httpParams = this.addParameterFilter(filterParameter, 'feature', httpParams);\n        return this.requestApi<PublicationResults>(url, httpParams, options);\n    }\n\n    public getPublication(id: string, apiUrl: string, options: HttpRequestOptions = {}): Observable<Publication> {\n        const url = this.createRequestUrl(apiUrl, 'publications', id);\n        return this.requestApi<Publication>(url, null, options);\n    }\n\n    public getNotifications(apiUrl: string, filterParameter: NotificationFilter = {}, options?: HttpRequestOptions): Observable<NotificationResults> {\n        const url = this.createRequestUrl(apiUrl, 'notifications');\n        let httpParams = this.prepareFilterParams(filterParameter);\n        httpParams = this.addParameterFilter(filterParameter, 'publications', httpParams);\n        return this.requestApi<NotificationResults>(url, httpParams, options);\n    }\n\n    public getNotification(id: string, apiUrl: string, options?: HttpRequestOptions): Observable<Notification> {\n        const url = this.createRequestUrl(apiUrl, 'notifications', id);\n        return this.requestApi<Notification>(url, null, options);\n    }\n\n    protected requestApi<T>(url: string, params: HttpParams = new HttpParams(), options: HttpRequestOptions = {}): Observable<T> {\n        const headers = this.createBasicAuthHeader(options.basicAuthToken);\n        return this.httpService.client(options).get<T>(url, { params, headers });\n    }\n\n    protected prepareFilterParams(params: EventingFilter): HttpParams {\n        let httpParams = new HttpParams({ encoder: new UriParameterCoder() });\n        httpParams = this.addParameterFilter(params, 'expanded', httpParams);\n        httpParams = this.addParameterFilter(params, 'offset', httpParams);\n        httpParams = this.addParameterFilter(params, 'limit', httpParams);\n        return httpParams;\n    }\n\n    private addTimespan(timespan: Timespan, httpParams: HttpParams): HttpParams {\n        if (timespan !== undefined) {\n            return httpParams.set('timespan', this.createRequestTimespan(timespan));\n        }\n        return httpParams;\n    }\n\n    private addParameterFilter(params: EventingFilter, key: string, httpParams: HttpParams): HttpParams {\n        if (params && params[key] !== undefined) {\n            if (params[key] instanceof Array) {\n                return httpParams.set(key, params[key].join(','));\n            }\n            return httpParams.set(key, params[key]);\n        }\n        return httpParams;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { EventingApiService } from './eventing-api.service';\nimport { EventingImplApiInterface } from './eventing-impl-api-interface.service';\n\n/**\n * Provides standard eventing api service implemention\n */\n@NgModule({\n  providers: [{\n    provide: EventingApiService,\n    useClass: EventingImplApiInterface\n  }]\n})\nexport class HelgolandEventingModule { }\n"],"names":[],"mappings":";;;;;;;;AAAA;;;AAYA,wBAAyC,SAAQ,YAAY;CAkB5D;;;;;;AC9BD,8BAiBsC,SAAQ,kBAAkB;;;;IAE5D,YACY;QACR,KAAK,EAAE,CAAC;QADA,gBAAW,GAAX,WAAW;KACT;;;;;;;IAEP,SAAS,CAAC,MAAc,EAAE,kBAA+B,EAAE,EAAE,UAA8B,EAAE;;QAChG,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;QACpD,IAAI,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;QAC3D,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC5E,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;QACnF,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACpE,OAAO,IAAI,CAAC,UAAU,CAAe,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAG5D,QAAQ,CAAC,EAAU,EAAE,MAAc,EAAE,UAA8B,EAAE;;QACxE,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,UAAU,CAAQ,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAG/C,gBAAgB,CAAC,MAAc,EAAE,kBAAsC,EAAE,EAAE,UAA8B,EAAE;;QAC9G,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;;QAC3D,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAsB,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAGnE,eAAe,CAAC,EAAU,EAAE,MAAc,EAAE,UAA8B,EAAE;;QAC/E,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,UAAU,CAAe,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAGtD,eAAe,CAAC,MAAc,EAAE,kBAAqC,EAAE,EAAE,OAA4B;;QACxG,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;;QAC1D,IAAI,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;QAC3D,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC,UAAU,CAAqB,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAGlE,cAAc,CAAC,EAAU,EAAE,MAAc,EAAE,UAA8B,EAAE;;QAC9E,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC,UAAU,CAAc,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAGrD,gBAAgB,CAAC,MAAc,EAAE,kBAAsC,EAAE,EAAE,OAA4B;;QAC1G,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;;QAC3D,IAAI,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;QAC3D,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC,UAAU,CAAsB,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAGnE,eAAe,CAAC,EAAU,EAAE,MAAc,EAAE,OAA4B;;QAC3E,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,UAAU,CAAe,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;;;;;;;;;IAGnD,UAAU,CAAI,GAAW,EAAE,SAAqB,IAAI,UAAU,EAAE,EAAE,UAA8B,EAAE;;QACxG,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAI,GAAG,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;KAC5E;;;;;IAES,mBAAmB,CAAC,MAAsB;;QAChD,IAAI,UAAU,GAAG,IAAI,UAAU,CAAC,EAAE,OAAO,EAAE,IAAI,iBAAiB,EAAE,EAAE,CAAC,CAAC;QACtE,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QACrE,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACnE,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAClE,OAAO,UAAU,CAAC;KACrB;;;;;;IAEO,WAAW,CAAC,QAAkB,EAAE,UAAsB;QAC1D,IAAI,QAAQ,KAAK,SAAS,EAAE;YACxB,OAAO,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC3E;QACD,OAAO,UAAU,CAAC;;;;;;;;IAGd,kBAAkB,CAAC,MAAsB,EAAE,GAAW,EAAE,UAAsB;QAClF,IAAI,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;YACrC,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,EAAE;gBAC9B,OAAO,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACrD;YACD,OAAO,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SAC3C;QACD,OAAO,UAAU,CAAC;;;;YAnFzB,UAAU;;;;YAdkB,WAAW;;;;;;;ACFxC;;;AAcA;;;YANC,QAAQ,SAAC;gBACR,SAAS,EAAE,CAAC;wBACV,OAAO,EAAE,kBAAkB;wBAC3B,QAAQ,EAAE,wBAAwB;qBACnC,CAAC;aACH;;;;;;;;;;;;;;;"}
