{"version":3,"file":"helgoland-caching.js.map","sources":["ng://@helgoland/caching/lib/model.ts","ng://@helgoland/caching/lib/cache-interceptor.ts","ng://@helgoland/caching/lib/local-http-cache.ts","ng://@helgoland/caching/lib/local-ongoing-http-cache.ts","ng://@helgoland/caching/lib/caching.module.ts"],"sourcesContent":["import { HttpEvent, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nexport abstract class HttpCache {\n    /**\n     * Returns a cached response, if any, or null if not present.\n     */\n    public abstract get(req: HttpRequest<any>, expirationAtMs?: number): HttpResponse<any> | null;\n\n    /**\n     * Adds or updates the response in the cache.\n     */\n    public abstract put(req: HttpRequest<any>, resp: HttpResponse<any>, expirationAtMs?: number): void;\n}\n\nexport abstract class OnGoingHttpCache {\n\n    public abstract has(req: HttpRequest<any>): boolean;\n    public abstract set(req: HttpRequest<any>, request: Observable<HttpEvent<any>>): void;\n    public abstract observe(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n    public abstract clear(req: HttpRequest<any>): void;\n\n}\n","import { HttpEvent, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpRequestOptions, HttpServiceHandler, HttpServiceInterceptor } from '@helgoland/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { HttpCache, OnGoingHttpCache } from './model';\n\n@Injectable()\nexport class CachingInterceptor implements HttpServiceInterceptor {\n    constructor(\n        protected cache: HttpCache,\n        protected ongoingCache: OnGoingHttpCache\n    ) { }\n\n    public intercept(\n        req: HttpRequest<any>, metadata: HttpRequestOptions, next: HttpServiceHandler\n    ): Observable<HttpEvent<any>> {\n\n        // Before doing anything, it's important to only cache GET requests.\n        // Skip this interceptor if the request method isn't GET.\n        if (req.method !== 'GET') {\n            return next.handle(req, metadata);\n        }\n\n        if (metadata.forceUpdate) {\n            return next.handle(req, metadata);\n        }\n\n        // First, check the cache to see if this request exists.\n        const cachedResponse = this.cache.get(req, metadata.expirationAtMs);\n        if (cachedResponse) {\n            // A cached response exists. Serve it instead of forwarding\n            // the request to the next handler.\n            return of(cachedResponse);\n        }\n\n        // check if the same request is still in the pipe\n        if (this.ongoingCache.has(req)) {\n            return this.ongoingCache.observe(req);\n        } else {\n            // No cached response exists. Go to the network, and cache\n            // the response when it arrives.\n            return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n                const shared = next.handle(req, metadata).pipe(share());\n                shared.subscribe((res) => {\n                    if (res instanceof HttpResponse) {\n                        this.cache.put(req, res, metadata.expirationAtMs);\n                        this.ongoingCache.clear(req);\n                        observer.next(res);\n                        observer.complete();\n                    }\n                }, (error) => {\n                    observer.error(error);\n                    observer.complete();\n                });\n                this.ongoingCache.set(req, shared);\n            });\n        }\n    }\n}\n","import { HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { HttpCache } from './model';\n\ninterface CachedItem {\n    expirationAtMs: number;\n    response: HttpResponse<any>;\n}\n\ninterface Cache {\n    [id: string]: CachedItem;\n}\n\n@Injectable()\nexport class LocalHttpCache extends HttpCache {\n\n    private cache: Cache = {};\n\n    public get(req: HttpRequest<any>, expirationAtMs?: number): HttpResponse<any> {\n        const key = req.urlWithParams;\n        if (this.cache[key]) {\n            const currentTime = new Date().getTime();\n            if (isNaN(this.cache[key].expirationAtMs)) {\n                this.cache[key].expirationAtMs = expirationAtMs;\n                return this.cache[key].response;\n            } else {\n                if (this.cache[key].expirationAtMs >= currentTime) {\n                    if (this.cache[key].expirationAtMs > expirationAtMs) { this.cache[key].expirationAtMs = expirationAtMs; }\n                    return this.cache[key].response;\n                } else {\n                    delete this.cache[key];\n                }\n            }\n        }\n        return null;\n    }\n\n    public put(req: HttpRequest<any>, resp: HttpResponse<any>, expirationAtMs?: number) {\n        this.cache[req.urlWithParams] = {\n            expirationAtMs: expirationAtMs || new Date().getTime() + 30000,\n            response: resp\n        };\n    }\n}\n","import { HttpEvent, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class LocalOngoingHttpCache {\n\n    private cache: { [key: string]: { request: Observable<HttpEvent<any>> } } = {};\n\n    public has(req: HttpRequest<any>): boolean {\n        return this.cache[req.urlWithParams] !== undefined;\n    }\n\n    public set(req: HttpRequest<any>, request: Observable<HttpEvent<any>>): void {\n        this.cache[req.urlWithParams] = {\n            request\n        };\n    }\n\n    public observe(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n        return this.cache[req.urlWithParams].request;\n    }\n\n    public clear(req: HttpRequest<any>) {\n        delete this.cache[req.urlWithParams];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { HTTP_SERVICE_INTERCEPTORS } from '@helgoland/core';\n\nimport { CachingInterceptor } from './cache-interceptor';\nimport { LocalHttpCache } from './local-http-cache';\nimport { LocalOngoingHttpCache } from './local-ongoing-http-cache';\nimport { HttpCache, OnGoingHttpCache } from './model';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: [\n    {\n      provide: HttpCache,\n      useClass: LocalHttpCache\n    },\n    {\n      provide: HTTP_SERVICE_INTERCEPTORS,\n      useClass: CachingInterceptor,\n      multi: true\n    },\n    {\n      provide: OnGoingHttpCache,\n      useClass: LocalOngoingHttpCache\n    },\n  ]\n})\nexport class HelgolandCachingModule { }\n"],"names":["tslib_1.__extends"],"mappings":"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"}
