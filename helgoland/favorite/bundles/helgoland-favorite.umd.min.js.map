{"version":3,"sources":["ng://@helgoland/favorite/lib/service/favorite.service.ts","ng://@helgoland/favorite/lib/favorite-toggler/favorite-toggler.component.ts","ng://@helgoland/favorite/lib/service/json-favorite-exporter.service.ts","ng://@helgoland/favorite/lib/favorite.module.ts"],"names":["CACHE_PARAM_FAVORITES_SINGLE","CACHE_PARAM_FAVORITES_GROUP","FavoriteService","localStorage","this","loadFavorites","prototype","addFavorite","dataset","label","singleFavs","has","internalId","set","id","favorite","saveFavorites","hasFavorite","getFavorites","Array","from","values","removeFavorite","favoriteId","delete","groupFavs","addFavoriteGroup","datasets","groupCounter","favorites","getFavoriteGroups","removeAllFavorites","clear","changeLabel","save","Map","loadedSingleFavs","loadArray","forEach","entry","_this","loadedGroupFavs","Injectable","LocalStorage","FavoriteTogglerComponent","favSrvc","notifier","translate","ngOnChanges","changes","isFavorite","toggle","get","subscribe","translation","notify","Component","args","selector","template","NotifierService","TranslateService","Input","JsonFavoriteExporterService","favoriteSrvc","exportFavorites","json","JSON","stringify","a","document","createElement","href","encodeURIComponent","target","download","body","appendChild","click","importFavorites","event","Observable","observer","files","length","reader","FileReader","readAsText","onerror","onload","e","result","parse","next","complete","COMPONENTS","NgModule","declarations","imports","CommonModule","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IDataset, LocalStorage } from '@helgoland/core';\n\nconst CACHE_PARAM_FAVORITES_SINGLE = 'SingleFavorites';\nconst CACHE_PARAM_FAVORITES_GROUP = 'GroupFavorites';\n\n@Injectable()\nexport class FavoriteService {\n\n  private singleFavs: Map<string, SingleFavorite>;\n  private groupFavs: Map<string, GroupFavorite>;\n  private groupCounter = 0;\n\n  constructor(\n    protected localStorage: LocalStorage\n  ) {\n    this.loadFavorites();\n  }\n\n  public addFavorite(dataset: IDataset, label?: string): boolean {\n    if (!this.singleFavs.has(dataset.internalId)) {\n      this.singleFavs.set(dataset.internalId, {\n        id: dataset.internalId,\n        label: label ? label : dataset.label,\n        favorite: dataset\n      });\n      this.saveFavorites();\n      return true;\n    }\n    return false;\n  }\n\n  public hasFavorite(dataset: IDataset): boolean {\n    return this.singleFavs.has(dataset.internalId);\n  }\n\n  public getFavorites(): SingleFavorite[] {\n    return Array.from(this.singleFavs.values());\n  }\n\n  public removeFavorite(favoriteId: string): boolean {\n    if (this.singleFavs.has(favoriteId)) {\n      this.singleFavs.delete(favoriteId);\n      this.saveFavorites();\n      return true;\n    }\n    if (this.groupFavs.has(favoriteId)) {\n      this.groupFavs.delete(favoriteId);\n      this.saveFavorites();\n      return true;\n    }\n    return false;\n  }\n\n  public addFavoriteGroup(datasets: IDataset[], label?: string): boolean {\n    const id = 'Group' + this.groupCounter++;\n    this.groupFavs.set(id, {\n      id,\n      label: label ? label : id,\n      favorites: datasets\n    });\n    this.saveFavorites();\n    return true;\n  }\n\n  public getFavoriteGroups(): GroupFavorite[] {\n    return Array.from(this.groupFavs.values());\n  }\n\n  public removeAllFavorites(): boolean {\n    this.singleFavs.clear();\n    this.groupFavs.clear();\n    this.saveFavorites();\n    return true;\n  }\n\n  public changeLabel(favorite: Favorite, label: string) {\n    favorite.label = label;\n    if (isSingleFavorite(favorite)) { this.singleFavs.set(favorite.id, favorite); }\n    if (isGroupFavorite(favorite)) { this.groupFavs.set(favorite.id, favorite); }\n    this.saveFavorites();\n  }\n\n  private saveFavorites(): void {\n    this.localStorage.save(CACHE_PARAM_FAVORITES_SINGLE, this.getFavorites());\n    this.localStorage.save(CACHE_PARAM_FAVORITES_GROUP, this.getFavoriteGroups());\n  }\n\n  private loadFavorites(): void {\n    this.singleFavs = new Map();\n    this.groupFavs = new Map();\n    const loadedSingleFavs = this.localStorage.loadArray<SingleFavorite>(CACHE_PARAM_FAVORITES_SINGLE);\n    if (loadedSingleFavs) {\n      loadedSingleFavs.forEach((entry) => this.singleFavs.set(entry.id, entry));\n    }\n    const loadedGroupFavs = this.localStorage.loadArray<GroupFavorite>(CACHE_PARAM_FAVORITES_GROUP);\n    if (loadedGroupFavs) {\n      loadedGroupFavs.forEach((entry) => this.groupFavs.set(entry.id, entry));\n    }\n  }\n}\n\nexport interface Favorite {\n  id: string;\n  label: string;\n}\n\nexport interface SingleFavorite extends Favorite {\n  favorite: IDataset;\n}\n\nfunction isSingleFavorite(object: any): object is SingleFavorite {\n  return 'favorite' in object;\n}\n\nexport interface GroupFavorite extends Favorite {\n  favorites: IDataset[];\n}\n\nfunction isGroupFavorite(object: any): object is GroupFavorite {\n  return 'favorites' in object;\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { IDataset, NotifierService } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { FavoriteService } from '../service/favorite.service';\n\n@Component({\n  selector: 'n52-favorite-toggler',\n  template: `<i class=\"fa\" (click)=\"toggle(); $event.stopPropagation();\" [ngClass]=\"isFavorite ? 'fa-star' : 'fa-star-o'\"></i>`\n})\nexport class FavoriteTogglerComponent implements OnChanges {\n\n  @Input()\n  public dataset: IDataset;\n  public isFavorite: boolean;\n\n  constructor(\n    protected favSrvc: FavoriteService,\n    protected notifier: NotifierService,\n    protected translate: TranslateService\n  ) { }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dataset && this.dataset) {\n      this.isFavorite = this.favSrvc.hasFavorite(this.dataset);\n    }\n  }\n\n  public toggle() {\n    if (this.isFavorite) {\n      this.isFavorite = false;\n      this.favSrvc.removeFavorite(this.dataset.internalId);\n      this.translate.get('favorite.notifier.remove-favorite').subscribe((translation) => {\n        this.notifier.notify(translation + ': ' + this.dataset.label);\n      });\n    } else {\n      this.isFavorite = true;\n      this.favSrvc.addFavorite(this.dataset);\n      this.translate.get('favorite.notifier.add-favorite').subscribe((translation) => {\n        this.notifier.notify(translation + ': ' + this.dataset.label);\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { FavoriteService, SingleFavorite } from './favorite.service';\n\n@Injectable()\nexport class JsonFavoriteExporterService {\n\n  constructor(\n    protected favoriteSrvc: FavoriteService\n  ) { }\n\n  public exportFavorites() {\n    const filename = 'favorites.json';\n    const json = JSON.stringify(this.favoriteSrvc.getFavorites());\n    // if (window.navigator.msSaveBlob) {\n    //     // IE version >= 10\n    //     const blob = new Blob([json], {\n    //         type: 'application/json;charset=utf-8;'\n    //     });\n    //     window.navigator.msSaveBlob(blob, filename);\n    // } else {\n    // FF, Chrome ...\n    const a = document.createElement('a');\n    a.href = 'data:application/json,' + encodeURIComponent(json);\n    a.target = '_blank';\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    // }\n  }\n\n  public importFavorites(event: any): Observable<boolean> {\n    return new Observable<boolean>((observer: Observer<boolean>) => {\n      const files = event.target.files;\n      if (files && files.length > 0) {\n        this.favoriteSrvc.removeAllFavorites();\n        const reader = new FileReader();\n        reader.readAsText(files[0]);\n        reader.onerror = () => {\n          // alertService.error($translate.instant('favorite.import.wrongFile'));\n        };\n        reader.onload = (e: any) => {\n          const result = e.target.result;\n          const favorites = JSON.parse(result) as SingleFavorite[];\n          favorites.forEach((entry) => {\n            this.favoriteSrvc.addFavorite(entry.favorite, entry.label);\n          });\n          observer.next(true);\n          observer.complete();\n        };\n      }\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { FavoriteTogglerComponent } from './favorite-toggler/favorite-toggler.component';\nimport { FavoriteService } from './service/favorite.service';\nimport { JsonFavoriteExporterService } from './service/json-favorite-exporter.service';\n\nconst COMPONENTS = [\n  FavoriteTogglerComponent\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    COMPONENTS\n  ],\n  providers: [\n    FavoriteService,\n    JsonFavoriteExporterService\n  ]\n})\nexport class HelgolandFavoriteModule { }\n"]}