!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common/http"),require("@angular/core"),require("@helgoland/core"),require("rxjs/Observable"),require("@angular/common"),require("@ngx-translate/core"),require("@angular/forms")):"function"==typeof define&&define.amd?define("@helgoland/depiction",["exports","@angular/common/http","@angular/core","@helgoland/core","rxjs/Observable","@angular/common","@ngx-translate/core","@angular/forms"],t):t((e.helgoland=e.helgoland||{},e.helgoland.depiction={}),e.ng.common.http,e.ng.core,null,e.rxjs.Observable,e.ng.common,null,e.ng.forms)}(this,function(e,t,l,p,n,a,d,s){"use strict";var r=function(){function e(e,t){this.httpClient=e,this.settingsSrvc=t,this.cache=new p.IdCache}return e.prototype.getMappedLabel=function(r){var i=this;return new n.Observable(function(a){if(i.settingsSrvc.getSettings().solveLabels){var s=i.findUrl(r);if(s)if(i.cache.has(s))i.confirmLabel(a,i.cache.get(s));else{var e=i.settingsSrvc.getSettings().proxyUrl?i.settingsSrvc.getSettings().proxyUrl+s:s;i.httpClient.get(e,{responseType:"text"}).subscribe(function(e){try{var t=$.parseXML(e);r=r.replace(s,$(t).find("prefLabel").text())}catch(n){}i.cache.set(s,r),i.confirmLabel(a,r)},function(e){var t=r.substring(r.lastIndexOf("/")+1,r.length);i.cache.set(s,t),i.confirmLabel(a,t)})}else i.confirmLabel(a,r)}else i.confirmLabel(a,r)})},e.prototype.confirmLabel=function(e,t){e.next(t),e.complete()},e.prototype.findUrl=function(e){var t=(e||"").toString(),n=/(((ftp|https?):\/\/)[\-\w@:%_\+.~#?&\/\/=]+)/g.exec(t);return null!==n?n[0]:null},e.decorators=[{type:l.Injectable}],e.ctorParameters=function(){return[{type:t.HttpClient},{type:p.SettingsService}]},e}(),i=function(){function e(e){this.labelMapperSrvc=e,this.loading=!0}return e.prototype.ngOnChanges=function(e){var t=this;e.label?this.labelMapperSrvc.getMappedLabel(this.label).subscribe(function(e){t.determinedLabel=e,t.loading=!1}):this.loading=!1},e.decorators=[{type:l.Component,args:[{selector:"n52-label-mapper",template:'<span *ngIf="determinedLabel">{{determinedLabel}}</span>\n<span *ngIf="loading">\n  <span class="glyphicon glyphicon-refresh icon-spin"></span>\n  <span> loading label ...</span>\n</span>\n'}]}],e.ctorParameters=function(){return[{type:r}]},e.propDecorators={label:[{type:l.Input}]},e}(),o=function(){function e(){}return e.decorators=[{type:l.NgModule,args:[{declarations:[i],imports:[a.CommonModule],exports:[i],providers:[r]}]}],e}(),c=function(e,t){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function m(e,t){function n(){this.constructor=e}c(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var u=function(){function e(e,t){this.internalIdHandler=e,this.translateSrvc=t,this.onDeleteDataset=new l.EventEmitter,this.onSelectDataset=new l.EventEmitter}return e.prototype.ngOnInit=function(){var t=this;this.datasetId&&(this.internalId=this.internalIdHandler.resolveInternalId(this.datasetId),this.loadDataset(this.translateSrvc.currentLang)),this.langChangeSubscription=this.translateSrvc.onLangChange.subscribe(function(e){return t.onLanguageChanged(e)})},e.prototype.ngOnDestroy=function(){this.langChangeSubscription.unsubscribe()},e.prototype.removeDataset=function(){this.onDeleteDataset.emit(!0)},e.prototype.toggleSelection=function(){this.selected=!this.selected,this.onSelectDataset.emit(this.selected)},e.prototype.onLanguageChanged=function(e){this.internalId&&this.loadDataset(e.lang)},e.propDecorators={datasetId:[{type:l.Input}],selected:[{type:l.Input}],onDeleteDataset:[{type:l.Output}],onSelectDataset:[{type:l.Output}]},e}(),h=function(s){function e(e,t,n){var a=s.call(this,t,n)||this;return a.api=e,a.internalIdHandler=t,a.translateSrvc=n,a.onUpdateOptions=new l.EventEmitter,a.onDeleteDatasetOptions=new l.EventEmitter,a.onEditOptions=new l.EventEmitter,a.onOpenInCombiView=new l.EventEmitter,a.onShowGeometry=new l.EventEmitter,a}return m(e,s),e.prototype.removeDatasetOptions=function(e){this.onDeleteDatasetOptions.emit(e)},e.prototype.editDatasetOptions=function(e){this.onEditOptions.emit(e)},e.prototype.toggleVisibility=function(e){e.visible=!e.visible,this.onUpdateOptions.emit(this.datasetOptions)},e.prototype.isMobile=function(){return!!this.dataset&&this.dataset.platformType===p.PlatformTypes.mobileInsitu},e.prototype.openInCombiView=function(e){this.onOpenInCombiView.emit(e)},e.prototype.showGeometry=function(e){var t=this,n=this.internalIdHandler.resolveInternalId(this.datasetId);if(this.isMobile()){var a=new p.Timespan(e.timestamp);this.api.getData(n.id,n.url,a).subscribe(function(e){1===e.values.length&&t.onShowGeometry.emit(e.values[0].geometry)})}else this.api.getPlatform(this.dataset.parameters.platform.id,n.url).subscribe(function(e){t.onShowGeometry.emit(e.geometry)})},e.prototype.loadDataset=function(e){var t=this,n={};e&&(n.lang=e),this.loading=!0,this.api.getDataset(this.internalId.id,this.internalId.url,n).subscribe(function(e){t.dataset=e,t.loading=!1})},e.decorators=[{type:l.Component,args:[{selector:"n52-profile-entry",template:'<div class="legendItem" style="position: relative;" [ngClass]="{\'selected\': selected}" (click)="toggleSelection()">\n  <div class="legendItemheader">\n    <div class="legendItemLabel">\n      <n52-label-mapper label="{{dataset?.parameters.platform.label}}"></n52-label-mapper>\n    </div>\n    <div class="small">\n      <n52-label-mapper label="{{dataset?.parameters.phenomenon.label}}"></n52-label-mapper>\n      <span *ngIf="dataset?.uom">[\n        <n52-label-mapper label="{{dataset.uom}}"></n52-label-mapper>]</span>\n    </div>\n    <div class="small">\n      <n52-label-mapper label="{{dataset?.parameters.procedure.label}}"></n52-label-mapper>\n    </div>\n    <div class="small" *ngIf="dataset?.parameters.category.label != dataset?.parameters.phenomenon.label">\n      <n52-label-mapper label="{{dataset?.parameters.category.label}}"></n52-label-mapper>\n    </div>\n  </div>\n  <div *ngFor="let item of datasetOptions">\n    <div>\n      <span [ngStyle]="{\'color\': item.color}">{{item.timestamp | date: \'short\'}}</span>\n      <span class="fa" [ngClass]="{\'fa-eye-slash\': item.visible, \'fa-eye\': !item.visible}" (click)="toggleVisibility(item); $event.stopPropagation();"\n        title="{{\'profiles.legend.visibility\' | translate}}"></span>\n      <span class="fa fa-pencil" (click)="editDatasetOptions(item); $event.stopPropagation();" [ngStyle]="{color: item.color}"\n        title="{{\'profiles.legend.edit-style\' | translate}}"></span>\n      <span class="fa fa-map-marker" (click)="showGeometry(item); $event.stopPropagation();" title="{{\'profiles.legend.show-geometry\' | translate}}"></span>\n      <span class="fa fa-times" (click)="removeDatasetOptions(item); $event.stopPropagation();" title="{{\'profiles.legend.delete-subentry\' | translate}}"></span>\n    </div>\n    <div (click)="openInCombiView(item); $event.stopPropagation();" *ngIf="isMobile()" class="toCombiView">\n      <span class="fa fa-arrow-right"></span>\n      <span>{{\'profiles.legend.go-to-combi-view\' | translate}}</span>\n    </div>\n  </div>\n</div>\n',styles:[":host .legendItem{background-color:#fff;padding:5px;border-radius:5px;margin-bottom:5px}:host .legendItem .small{font-size:90%;word-break:break-all}:host .legendItem.selected{padding:0;border-width:5px;border-style:solid}:host .legendItem .legendItemheader{cursor:pointer}:host .legendItem .toCombiView{cursor:pointer}:host .legendItem .fa{cursor:pointer}"]}]}],e.ctorParameters=function(){return[{type:p.DatasetApiInterface},{type:p.InternalIdHandler},{type:d.TranslateService}]},e.propDecorators={datasetOptions:[{type:l.Input}],onUpdateOptions:[{type:l.Output}],onDeleteDatasetOptions:[{type:l.Output}],onEditOptions:[{type:l.Output}],onOpenInCombiView:[{type:l.Output}],onShowGeometry:[{type:l.Output}]},e}(u),f=function(s){function e(e,t,n){var a=s.call(this,t,n)||this;return a.api=e,a.internalIdHandler=t,a.translateSrvc=n,a}return m(e,s),e.prototype.loadDataset=function(e){var t=this,n={};e&&(n.lang=e),this.loading=!0,this.api.getSingleTimeseries(this.internalId.id,this.internalId.url,n).subscribe(function(e){return t.setDataset(e)},function(e){t.api.getDataset(t.internalId.id,t.internalId.url,n).subscribe(function(e){return t.setDataset(e)})})},e.prototype.setDataset=function(e){this.dataset=e,this.setParameters(),this.loading=!1},e.prototype.setParameters=function(){this.dataset instanceof p.Dataset?this.platformLabel=this.dataset.parameters.platform.label:this.dataset instanceof p.Timeseries&&(this.platformLabel=this.dataset.station.properties.label),this.phenomenonLabel=this.dataset.parameters.phenomenon.label,this.procedureLabel=this.dataset.parameters.procedure.label,this.categoryLabel=this.dataset.parameters.category.label,this.uom=this.dataset.uom},e.decorators=[{type:l.Component,args:[{selector:"n52-simple-timeseries-entry",template:'<span>Platform: {{platformLabel}}</span>\n<span>Phenomenon: {{phenomenonLabel}}</span>\n<span>Procedure: {{procedureLabel}}</span>\n<span>Category: {{categoryLabel}}</span>\n<span>Uom: {{uom}}</span>\n<button (click)="toggleSelection()">select</button>\n<button (click)="removeDataset()">remove</button>',styles:[""]}]}],e.ctorParameters=function(){return[{type:p.DatasetApiInterface},{type:p.InternalIdHandler},{type:d.TranslateService}]},e}(u),g=function(s){function e(e,t,n){var a=s.call(this,e,t,n)||this;return a.api=e,a.internalIdHandler=t,a.translateSrvc=n,a.onUpdateOptions=new l.EventEmitter,a.onEditOptions=new l.EventEmitter,a.onShowGeometry=new l.EventEmitter,a}return m(e,s),e.prototype.toggleVisibility=function(){this.datasetOptions.visible=!this.datasetOptions.visible,this.onUpdateOptions.emit(this.datasetOptions)},e.prototype.editDatasetOptions=function(){this.onEditOptions.emit(this.datasetOptions)},e.prototype.showGeometry=function(){var t=this;this.dataset instanceof p.Timeseries&&this.onShowGeometry.emit(this.dataset.station.geometry),this.dataset instanceof p.Dataset&&this.api.getPlatform(this.dataset.parameters.platform.id,this.dataset.url).subscribe(function(e){t.onShowGeometry.emit(e.geometry)})},e.decorators=[{type:l.Component,args:[{selector:"n52-configurable-timeseries-entry",template:'<span>Platform: {{platformLabel}}</span>\n<span>Phenomenon: {{phenomenonLabel}}</span>\n<span>Procedure: {{procedureLabel}}</span>\n<span>Category: {{categoryLabel}}</span>\n<span>Uom: {{uom}}</span>\n<button (click)="toggleSelection()">toggle selection</button>\n<button (click)="removeDataset()">remove</button>\n<button (click)="toggleVisibility()">toggle visibility</button>\n<button (click)="editDatasetOptions()">edit Options</button>\n<button (click)="showGeometry()">show Geometry</button>',styles:[""]}]}],e.ctorParameters=function(){return[{type:p.DatasetApiInterface},{type:p.InternalIdHandler},{type:d.TranslateService}]},e.propDecorators={datasetOptions:[{type:l.Input}],highlight:[{type:l.Input}],onUpdateOptions:[{type:l.Output}],onEditOptions:[{type:l.Output}],onShowGeometry:[{type:l.Output}]},e}(f),y=function(r){function e(e,t,n,a){var s=r.call(this,e,t,n)||this;return s.api=e,s.internalIdHandler=t,s.translateSrvc=n,s.timeSrvc=a,s.onSelectDate=new l.EventEmitter,s.hasData=!0,s}return m(e,r),e.prototype.ngOnChanges=function(e){e.timeInterval&&this.checkDataInTimespan()},e.prototype.jumpToFirstTimeStamp=function(){this.onSelectDate.emit(new Date(this.dataset.firstValue.timestamp))},e.prototype.jumpToLastTimeStamp=function(){this.onSelectDate.emit(new Date(this.dataset.lastValue.timestamp))},e.prototype.setParameters=function(){r.prototype.setParameters.call(this),this.firstValue=this.dataset.firstValue,this.lastValue=this.dataset.lastValue,this.checkDataInTimespan()},e.prototype.checkDataInTimespan=function(){this.timeInterval&&this.dataset&&(this.hasData=this.timeSrvc.overlaps(this.timeInterval,this.dataset.firstValue.timestamp,this.dataset.lastValue.timestamp))},e.decorators=[{type:l.Component,args:[{selector:"n52-first-latest-timeseries-entry",template:'<span>{{procedureLabel}} - {{platformLabel}}</span>\n<span>Has Data: {{hasData}}</span>\n<button *ngIf="firstValue" (click)="jumpToFirstTimeStamp()">{{firstValue.value}} - {{firstValue.timestamp | date}}</button>\n<button *ngIf="lastValue" (click)="jumpToLastTimeStamp()">{{lastValue.value}} - {{lastValue.timestamp | date}}</button>',styles:[""]}]}],e.ctorParameters=function(){return[{type:p.DatasetApiInterface},{type:p.InternalIdHandler},{type:d.TranslateService},{type:p.Time}]},e.propDecorators={timeInterval:[{type:l.Input}],onSelectDate:[{type:l.Output}]},e}(g),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return m(t,e),t.decorators=[{type:l.Injectable}],t}(p.IdCache),v=function(o){function e(e,t,n,a,s,r){var i=o.call(this,e,n,r,t)||this;return i.api=e,i.timeSrvc=t,i.internalIdHandler=n,i.color=a,i.refValCache=s,i.translateSrvc=r,i.informationVisible=!1,i}return m(e,o),e.prototype.toggleInformation=function(){this.informationVisible=!this.informationVisible},e.prototype.toggleReferenceValue=function(t){var e=this.datasetOptions.showReferenceValues.findIndex(function(e){return e.id===t.referenceValueId}),n=this.createRefValId(t.referenceValueId);-1<e?(t.visible=!1,this.datasetOptions.showReferenceValues.splice(e,1)):(t.visible=!0,this.datasetOptions.showReferenceValues.push({id:t.referenceValueId,color:t.color})),this.refValCache.get(n).visible=t.visible,this.onUpdateOptions.emit(this.datasetOptions)},e.prototype.setParameters=function(){var a=this;o.prototype.setParameters.call(this),this.dataset.referenceValues&&this.dataset.referenceValues.forEach(function(t){var e=a.createRefValId(t.referenceValueId),n=a.datasetOptions.showReferenceValues.find(function(e){return e.id===t.referenceValueId});n&&a.refValCache.set(e,{color:n.color,visible:!0}),a.refValCache.has(e)||a.refValCache.set(e,{color:a.color.getColor(),visible:!1}),t.color=a.refValCache.get(e).color,t.visible=a.refValCache.get(e).visible})},e.prototype.createRefValId=function(e){return this.dataset.url+e},e.decorators=[{type:l.Component,args:[{selector:"n52-timeseries-entry",template:'<div class="legendItem" style="position: relative;" [ngStyle]="{\'border-color\': datasetOptions?.color}" [ngClass]="{\'selected\': selected}"\n  (click)="toggleSelection()">\n  <div class="loading-overlay" *ngIf="loading" [ngStyle]="{\'background-color\': datasetOptions?.color}">\n    <div class="fa fa-refresh fa-spin fa-3x fa-fw"></div>\n  </div>\n  <div>\n    <div class="legendItemheader" [ngClass]="{\'highlight\': highlight}">\n      <div class="legendItemLabel" [ngStyle]="{\'color\': datasetOptions?.color}">\n        <n52-label-mapper label="{{platformLabel}}"></n52-label-mapper>\n        \x3c!-- <n52-favorite-toggler [dataset]="dataset"></n52-favorite-toggler> --\x3e\n      </div>\n      <div class="noDataWarning firstLastEntry" *ngIf="!hasData">\n        <div>\n          <span class="fa fa-exclamation-triangle red"></span>\n          <span class="small-label">Keine Daten verfügbar</span>\n        </div>\n        <div class="additionalLegendEntry" (click)="jumpToLastTimeStamp(); $event.stopPropagation();">\n          <span class="fa fa-chevron-right"></span>\n          <span class="small-label">Springe zur letzten Messung</span>\n        </div>\n      </div>\n      <div class="small-label">\n        <n52-label-mapper label="{{phenomenonLabel}}"></n52-label-mapper>\n        <span *ngIf="uom">\n          <span>[</span>\n          <n52-label-mapper label="{{uom}}"></n52-label-mapper>\n          <span>]</span>\n        </span>\n      </div>\n      <div class="small-label">\n        <n52-label-mapper label="{{procedureLabel}}"></n52-label-mapper>\n      </div>\n      <div class="small-label" *ngIf="categoryLabel != phenomenonLabel">\n        <n52-label-mapper label="{{categoryLabel}}"></n52-label-mapper>\n      </div>\n    </div>\n    <div class="legendicons">\n      <span class="fa" [ngClass]="{\'fa-chevron-down\': !informationVisible, \'fa-chevron-up\': informationVisible}" (click)="toggleInformation(); $event.stopPropagation();"></span>\n      <span class="fa" [ngClass]="{\'fa-eye-slash\': datasetOptions?.visible, \'fa-eye\': !datasetOptions?.visible}" (click)="toggleVisibility(); $event.stopPropagation();"></span>\n      <span class="fa fa-map-marker" (click)="showGeometry(); $event.stopPropagation();"></span>\n      <span class="fa fa-pencil" (click)="editDatasetOptions(); $event.stopPropagation();" [ngStyle]="{color: datasetOptions?.color}"></span>\n      <span class="fa fa-times" (click)="removeDataset(); $event.stopPropagation();"></span>\n    </div>\n    <div class="collapseLegendEntry small-label" *ngIf="informationVisible">\n      <div class="firstLastEntry additionalLegendEntry" *ngIf="firstValue" (click)="jumpToFirstTimeStamp(); $event.stopPropagation();">\n        <span class="fa fa-chevron-right"></span>\n        <span>Erster Wert bei</span>\n        <span>{{firstValue.timestamp| date: \'short\'}}</span>\n        <span class="hidden-medium">({{firstValue.value}} {{uom}})</span>\n      </div>\n      <div class="firstLastEntry additionalLegendEntry" *ngIf="lastValue" (click)="jumpToLastTimeStamp(); $event.stopPropagation();">\n        <span class="fa fa-chevron-right"></span>\n        <span>Letzter Wert bei</span>\n        <span>{{lastValue.timestamp| date: \'short\'}}</span>\n        <span class="hidden-medium">({{lastValue.value}} {{uom}})</span>\n      </div>\n      <div *ngIf="dataset?.referenceValues">\n        <div class="additionalLegendEntry" *ngFor="let ref of dataset.referenceValues" (click)="toggleReferenceValue(ref); $event.stopPropagation();"\n          [ngClass]="{\'selected\': ref.visible}" [ngStyle]="{color: ref.color}">\n          <span class="fa fa-chevron-right"></span>\n          <span>{{ref.label}}</span>\n        </div>\n      </div>\n      \x3c!-- <div class="additionalLegendEntry" ng-click="$event.stopPropagation(); createExportCsv(timeseries)">\n                <span class="glyphicon glyphicon-download"></span>\n                <span translate="export.label"></span>\n            </div> --\x3e\n      \x3c!-- <div class="additionalLegendEntry">\n                <swc-procedure-metadata timeseries=\'timeseries\'></swc-procedure-metadata>\n                <swc-timeseries-raw-data-output timeseries=\'timeseries\'></swc-timeseries-raw-data-output>\n                <swc-sos-url timeseries=\'timeseries\'></swc-sos-url>\n            </div> --\x3e\n    </div>\n  </div>\n</div>',styles:[".geometryViewerModal .modal-body{height:50vh}n52-timeseries-entry .legendItem{background-color:#fff;padding:5px;border-radius:5px;margin-bottom:5px}n52-timeseries-entry .legendItem .small-label{font-size:90%;word-break:break-all}n52-timeseries-entry .legendItem.selected{padding:0;border-width:5px;border-style:solid}n52-timeseries-entry .legendItem .legendItemheader{cursor:pointer}n52-timeseries-entry .legendItem .legendItemheader.highlight{font-weight:700}n52-timeseries-entry .legendItem .legendicons span{margin:0 4%;font-size:150%}n52-timeseries-entry .legendItem .legendicons span:hover{cursor:pointer}n52-timeseries-entry .legendItem .legendicons .delete{z-index:5}n52-timeseries-entry .legendItem .noDataWarning{border:2px solid red;border-radius:5px;padding:3px}n52-timeseries-entry .legendItem .noDataWarning .red{color:red}n52-timeseries-entry .legendItem .additionalLegendEntry:hover{cursor:pointer}n52-timeseries-entry .legendItem .additionalLegendEntry.selected{font-weight:bolder}n52-timeseries-entry .legendItem .refEntry.selected{border-style:solid;border-width:2px;border-radius:2px;margin:2px 0}n52-timeseries-entry .legendItem .loading-overlay{width:100%;height:100%;position:absolute;top:0;left:0;opacity:.5;z-index:1;display:flex;justify-content:center;align-items:center}n52-timeseries-entry .legendItem .loading-overlay .fa-spin{color:#fff;font-size:25px;width:25px;height:25px}"],encapsulation:l.ViewEncapsulation.None}]}],e.ctorParameters=function(){return[{type:p.DatasetApiInterface},{type:p.Time},{type:p.InternalIdHandler},{type:p.ColorService},{type:b},{type:d.TranslateService}]},e}(y),I=function(s){function e(e,t,n){var a=s.call(this,t,n)||this;return a.api=e,a.internalIdHandler=t,a.translateSrvc=n,a.onUpdateOptions=new l.EventEmitter,a.onEditOptions=new l.EventEmitter,a}return m(e,s),e.prototype.toggleVisibility=function(){this.datasetOptions.visible=!this.datasetOptions.visible,this.onUpdateOptions.emit(this.datasetOptions)},e.prototype.editDatasetOptions=function(e){this.onEditOptions.emit(e)},e.prototype.loadDataset=function(e){var t=this,n={};e&&(n.lang=e),this.loading=!0,this.api.getDataset(this.internalId.id,this.internalId.url,n).subscribe(function(e){t.dataset=e,t.loading=!1})},e.decorators=[{type:l.Component,args:[{selector:"n52-trajectory-entry",template:'<div style="white-space: nowrap;" (click)="toggleVisibility()">\n  <span>\n    <a class="btn btn-light">\n      <span class="fa fa-plus" [ngClass]="{\'fa-eye\': !datasetOptions?.visible, \'fa-eye-slash\': datasetOptions?.visible}"></span>\n    </a>\n  </span>\n  <span style="padding-left: 10px;" [ngStyle]="{\'color\': datasetOptions?.color}">{{dataset?.parameters.phenomenon.label}}</span>\n  <span class="fa fa-pencil" (click)="editDatasetOptions(datasetOptions); $event.stopPropagation();" [ngStyle]="{color: datasetOptions?.color}"></span>\n</div>'}]}],e.ctorParameters=function(){return[{type:p.DatasetApiInterface},{type:p.InternalIdHandler},{type:d.TranslateService}]},e.propDecorators={datasetOptions:[{type:l.Input}],onUpdateOptions:[{type:l.Output}],onEditOptions:[{type:l.Output}]},e}(u),D=[v,g,f,y,h,I],O=function(){function e(){}return e.decorators=[{type:l.NgModule,args:[{imports:[a.CommonModule,d.TranslateModule,p.HelgolandCoreModule,o,s.FormsModule],declarations:[D],exports:[D],providers:[b]}]}],e}(),S=function(i){function e(e,t,n,a,s){var r=i.call(this,e,t,n,a,s)||this;return r.iterableDiffers=e,r.api=t,r.datasetIdResolver=n,r.timeSrvc=a,r.translateSrvc=s,r.preparedData=Array(),r.preparedColors=Array(),r.ready=!1,r.timeseriesArray=new Array,r}return m(e,i),e.prototype.ngOnInit=function(){this.additionalStylesheet=document.getElementById("selectedIdsStylesheet"),this.additionalStylesheet||(this.additionalStylesheet=document.createElement("style"),this.additionalStylesheet.id="selectedIdsStylesheet",document.body.appendChild(this.additionalStylesheet))},e.prototype.sort=function(e){var t,n=e.target.dataset.columnId,a=e.target.classList.contains("sorted-asc")?"desc":"asc",s="asc"===a?1:-1;if(Array.from(e.target.parentElement.children).forEach(function(e){return e.className=""}),"asc"===a?e.target.classList.add("sorted-asc"):e.target.classList.add("sorted-desc"),"datetime"===n)t=function(e,t){return s*(e.datetime-t.datetime)};else{var r=parseInt(n,10);t=function(e,t){return e.values[r]===undefined?1:t.values[r]===undefined?-1:s*(e.values[r]-t.values[r])}}this.preparedData=this.preparedData.sort(t)},e.prototype.onLanguageChanged=function(e){},e.prototype.reloadDataForDatasets=function(e){},e.prototype.presenterOptionsChanged=function(e){},e.prototype.getIndexFromInternalId=function(e){return this.datasetIds.indexOf(e)},e.prototype.setSelectedId=function(e){var t=this.additionalStylesheet.innerHTML.split("\r\n"),n=this.getIndexFromInternalId(e);t[n]="td:nth-child("+(n+2)+") {font-weight: bold}",this.additionalStylesheet.innerHTML=t.join("\r\n")},e.prototype.removeSelectedId=function(e){var t=this.additionalStylesheet.innerHTML.split("\r\n");t[this.getIndexFromInternalId(e)]="",this.additionalStylesheet.innerHTML=t.join("\r\n")},e.prototype.timeIntervalChanges=function(){var t=this;this.preparedData=[],this.timeseriesArray.forEach(function(e){return t.loadTsData(e)})},e.prototype.removeDataset=function(e){var t=this.getIndexFromInternalId(e);this.preparedData.forEach(function(e){return e.values.splice(t,1)}),this.preparedData=this.preparedData.filter(function(e){return e.values.reduce(function(e,t){return e||t},undefined)!==undefined}),this.preparedColors.splice(t,1);var n=this.additionalStylesheet.innerHTML.split("\r\n");n.splice(t,1),this.additionalStylesheet.innerHTML=n.join("\r\n"),this.timeseriesArray.splice(t,1)},e.prototype.addDataset=function(e,t){var n=this;this.timeseriesArray.length+=1,this.preparedColors.push("darkgrey"),this.additionalStylesheet.innerHTML+="\r\n",this.api.getSingleTimeseries(e,t).subscribe(function(e){return n.addTimeseries(e)})},e.prototype.datasetOptionsChanged=function(t,e){if(this.timeseriesArray.some(function(e){return e!==undefined&&e.internalId===t})){var n=this.getIndexFromInternalId(t);this.preparedColors[n]=e.color}},e.prototype.onResize=function(){},e.prototype.addTimeseries=function(e){this.timeseriesArray[this.getIndexFromInternalId(e.internalId)]=e,this.loadTsData(e)},e.prototype.loadTsData=function(t){var a=this;this.timespan&&this.api.getTsData(t.id,t.url,this.timespan,{format:"flot"}).subscribe(function(e){var n=a.getIndexFromInternalId(t.internalId);a.prepareData(t,e.values.map(function(e){var t=new Array(a.datasetIds.length).fill(undefined);return t[n]=e[1],{datetime:e[0],values:t}}))})},e.prototype.prepareData=function(e,t){var n=this.getIndexFromInternalId(e.internalId);if(this.datasetOptions){var a=this.datasetOptions.get(e.internalId);this.preparedColors[n]=a.color}else this.preparedColors[n]="rgba(0,0,0,0)";if(-1!==this.selectedDatasetIds.indexOf(e.internalId)&&this.setSelectedId(e.internalId),0===this.preparedData.length)this.preparedData=t;else for(var s=0,r=0;r<t.length;)this.preparedData[s]&&this.preparedData[s].datetime===t[r].datetime?(this.preparedData[s].values[n]=t[r].values[n],s++,r++):(this.preparedData[s]&&this.preparedData[s].datetime<t[r].datetime||(this.preparedData.splice(s,0,t[r]),r++),s++);this.ready=this.timeseriesArray.every(function(e){return e!==undefined})},e.decorators=[{type:l.Component,args:[{selector:"n52-dataset-table",template:'<table *ngIf="ready">\n  <thead>\n    <tr>\n      <th (click)="sort($event)" [attr.data-column-id]="\'datetime\'" class="sorted-asc">\n        Zeit\n      </th>\n      <th *ngFor="let series of this.timeseriesArray; let i = index" (click)="sort($event)" [attr.data-column-id]="i" [ngStyle]="{ \'border-color\': preparedColors[i] }">\n        {{series?.label}} [{{series?.uom}}]\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor="let row of this.preparedData">\n      <td>{{row.datetime | date: \'short\'}}</td>\n      <td *ngFor="let value of row.values">{{value}}</td>\n    </tr>\n  </tbody>\n</table>\n',styles:[':host{flex:1;overflow-y:scroll;overflow-x:hidden}:host tbody,:host thead tr{display:table;table-layout:fixed;width:100%}:host table{display:block;border-collapse:separate;border-spacing:0 1px}:host thead{display:block;position:-webkit-sticky;position:sticky;top:0;border-spacing:0}:host tr:nth-child(2n){background-color:#eee}:host th{background-color:#a9a9a9;cursor:pointer;border-bottom-width:7px;border-bottom-style:solid;overflow-wrap:break-word}:host th:first-child{border-bottom-color:#a9a9a9}:host th:first-child.sorted-asc,:host th:first-child.sorted-desc{border-bottom-color:#555}:host th.sorted-asc,:host th.sorted-desc{background-color:#555;color:#fff}:host th.sorted-asc:after{content:"\\25B4";float:right}:host th.sorted-desc:after{content:"\\25BE";float:right}:host td{white-space:nowrap;border-bottom:1px solid gray}:host td,:host th{padding:5px 10px}']}]}],e.ctorParameters=function(){return[{type:l.IterableDiffers},{type:p.DatasetApiInterface},{type:p.InternalIdHandler},{type:p.Time},{type:d.TranslateService}]},e}(p.DatasetPresenterComponent),w=function(){function e(){}return e.decorators=[{type:l.NgModule,args:[{declarations:[S],imports:[a.CommonModule,d.TranslateModule,p.HelgolandCoreModule],exports:[S],providers:[]}]}],e}();e.HelgolandDatasetlistModule=O,e.ProfileEntryComponent=h,e.ConfigurableTimeseriesEntryComponent=g,e.FirstLatestTimeseriesEntryComponent=y,e.SimpleTimeseriesEntryComponent=f,e.ReferenceValueColorCache=b,e.TimeseriesEntryComponent=v,e.TrajectoryEntryComponent=I,e.DatasetTableComponent=S,e.HelgolandDatasetTableModule=w,e.LabelMapperService=r,e.LabelMapperComponent=i,e.HelgolandLabelMapperModule=o,e.ɵa=u,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=helgoland-depiction.umd.min.js.map