{"version":3,"sources":["ng://@helgoland/depiction/lib/label-mapper/label-mapper.service.ts","ng://@helgoland/depiction/lib/label-mapper/label-mapper.component.ts","ng://@helgoland/depiction/lib/label-mapper/label-mapper.module.ts","null","ng://@helgoland/depiction/lib/datasetlist/list-entry.component.ts","ng://@helgoland/depiction/lib/datasetlist/profile-entry/profile-entry.component.ts","ng://@helgoland/depiction/lib/datasetlist/timeseries/simple-timeseries-entry/simple-timeseries-entry.component.ts","ng://@helgoland/depiction/lib/datasetlist/timeseries/configurable-timeseries-entry/configurable-timeseries-entry.component.ts","ng://@helgoland/depiction/lib/datasetlist/timeseries/first-latest-timeseries-entry/first-latest-timeseries-entry.component.ts","ng://@helgoland/depiction/lib/datasetlist/timeseries/timeseries-entry/timeseries-entry.component.ts","ng://@helgoland/depiction/lib/datasetlist/trajectory-entry/trajectory-entry.component.ts","ng://@helgoland/depiction/lib/datasetlist/module.ts","ng://@helgoland/depiction/lib/dataset-table/dataset-table.component.ts","ng://@helgoland/depiction/lib/dataset-table/module.ts"],"names":["LabelMapperService","httpClient","settingsSrvc","this","IdCache","prototype","getMappedLabel","label","Observable","observer","_this","getSettings","solveLabels","url_1","findUrl","cache","has","confirmLabel","get","labelUrl","proxyUrl","responseType","subscribe","res","xml","$","parseXML","replace","find","text","error","set","resolvedLabel","substring","lastIndexOf","length","next","complete","source","toString","matchArray","exec","Injectable","HttpClient","SettingsService","LabelMapperComponent","labelMapperSrvc","ngOnChanges","changes","determinedLabel","loading","Component","args","selector","template","Input","HelgolandLabelMapperModule","NgModule","declarations","imports","CommonModule","exports","providers","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","ListEntryComponent","internalIdHandler","translateSrvc","EventEmitter","ngOnInit","datasetId","internalId","resolveInternalId","loadDataset","currentLang","langChangeSubscription","onLangChange","langChangeEvent","onLanguageChanged","ngOnDestroy","unsubscribe","removeDataset","onDeleteDataset","emit","toggleSelection","selected","onSelectDataset","lang","Output","ProfileEntryComponent","api","_super","call","tslib_1.__extends","removeDatasetOptions","options","onDeleteDatasetOptions","editDatasetOptions","onEditOptions","toggleVisibility","visible","onUpdateOptions","datasetOptions","isMobile","dataset","platformType","PlatformTypes","mobileInsitu","openInCombiView","option","onOpenInCombiView","showGeometry","timespan","Timespan","timestamp","getData","id","url","result","values","onShowGeometry","geometry","getPlatform","parameters","platform","params","getDataset","styles","DatasetApiInterface","InternalIdHandler","TranslateService","SimpleTimeseriesEntryComponent","getSingleTimeseries","timeseries","setDataset","setParameters","Dataset","platformLabel","Timeseries","station","properties","phenomenonLabel","phenomenon","procedureLabel","procedure","categoryLabel","category","uom","ConfigurableTimeseriesEntryComponent","FirstLatestTimeseriesEntryComponent","timeSrvc","checkDataInTimespan","jumpToFirstTimeStamp","onSelectDate","Date","firstValue","jumpToLastTimeStamp","lastValue","timeInterval","hasData","overlaps","Time","TimeseriesEntryComponent","color","refValCache","toggleInformation","informationVisible","toggleReferenceValue","refValue","idx","showReferenceValues","findIndex","entry","referenceValueId","refValId","createRefValId","splice","push","referenceValues","forEach","e","refValOption","o","getColor","refId","encapsulation","ViewEncapsulation","None","ColorService","ReferenceValueColorCache","TrajectoryEntryComponent","COMPONENTS","TranslateModule","HelgolandCoreModule","FormsModule","DatasetTableComponent","iterableDiffers","datasetIdResolver","additionalStylesheet","document","getElementById","createElement","body","appendChild","sort","event","sortCallback","by","target","columnId","direction","classList","contains","directionNumber","from","parentElement","children","child","className","add","e1","e2","datetime","index_1","parseInt","undefined","preparedData","reloadDataForDatasets","datasetIds","presenterOptionsChanged","getIndexFromInternalId","indexOf","setSelectedId","rules","innerHTML","split","index","join","removeSelectedId","timeIntervalChanges","timeseriesArray","loadTsData","filter","reduce","a","c","preparedColors","addDataset","addTimeseries","datasetOptionsChanged","some","onResize","getTsData","format","prepareData","map","fill","newdata","selectedDatasetIds","i","j","ready","every","IterableDiffers","DatasetPresenterComponent","HelgolandDatasetTableModule"],"mappings":"8pBAAA,IAAAA,EAAA,WAaI,SAAAA,EACcC,EACAC,GADAC,KAAAF,WAAAA,EACAE,KAAAD,aAAAA,aAJmB,IAAIE,EAAAA,eAO9BJ,EAAAK,UAAAC,wBAAeC,cAClB,OAAO,IAAIC,EAAAA,WAAmB,SAACC,GAC3B,GAAKC,EAAKR,aAAaS,cAAcC,YAE9B,CACH,IAAMC,EAAMH,EAAKI,QAAQP,GACzB,GAAIM,EACA,GAAIH,EAAKK,MAAMC,IAAIH,GACfH,EAAKO,aAAaR,EAAUC,EAAKK,MAAMG,IAAIL,QACxC,CACH,IAAMM,EACFT,EAAKR,aAAaS,cAAcS,SAAWV,EAAKR,aAAaS,cAAcS,SAAWP,EAAMA,EAChGH,EAAKT,WAAWiB,IAAIC,EAAU,CAAEE,aAAc,SAAUC,UAAU,SAACC,GAC/D,IACI,IAAMC,EAAMC,EAAEC,SAASH,GACvBhB,EAAQA,EAAMoB,QAAQd,EAAKY,EAAED,GAAKI,KAAK,aAAaC,QACtD,MAAOC,IAGTpB,EAAKK,MAAMgB,IAAIlB,EAAKN,GACpBG,EAAKO,aAAaR,EAAUF,IAC7B,SAACuB,GACA,IAAME,EAAgBzB,EAAM0B,UAAU1B,EAAM2B,YAAY,KAAO,EAAG3B,EAAM4B,QACxEzB,EAAKK,MAAMgB,IAAIlB,EAAKmB,GACpBtB,EAAKO,aAAaR,EAAUuB,UAIpCtB,EAAKO,aAAaR,EAAUF,QAzBhCG,EAAKO,aAAaR,EAAUF,MA+BhCP,EAAAK,UAAAY,sBAAaR,EAA4BF,GAC7CE,EAAS2B,KAAK7B,GACdE,EAAS4B,YAGLrC,EAAAK,UAAAS,iBAAQP,GACZ,IAAM+B,GAAU/B,GAAS,IAAIgC,WAEvBC,EADa,gDACWC,KAAKH,GACnC,OAAmB,OAAfE,EACOA,EAAW,GAEf,0BAxDdE,EAAAA,sDARQC,EAAAA,kBAEmBC,EAAAA,qBAF5B,GCAAC,EAAA,WAsBI,SAAAA,EACcC,GAAA3C,KAAA2C,gBAAAA,gBAHG,SAMVD,EAAAxC,UAAA0C,qBAAYC,cACXA,EAAO,MACP7C,KAAK2C,gBAAgBxC,eAAeH,KAAKI,OACpCe,UAAU,SAACf,GACRG,EAAKuC,gBAAkB1C,EACvBG,EAAKwC,SAAU,IAGvB/C,KAAK+C,SAAU,uBA9B1BC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,mBACVC,SAAU,6OAJLtD,oCAaJuD,EAAAA,WAfL,GCAAC,EAAA,oDAMCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,aAAc,CACZb,GAEFc,QAAS,CACPC,EAAAA,cAEFC,QAAS,CACPhB,GAEFiB,UAAW,CACT9D,SAjBJ,GCgBI+D,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAAO,EAA0BR,EAAGC,GAEzB,SAAAQ,IAAgBtE,KAAKuE,YAAcV,EADnCD,EAAcC,EAAGC,GAEjBD,EAAE3D,UAAkB,OAAN4D,EAAaC,OAAOS,OAAOV,IAAMQ,EAAGpE,UAAY4D,EAAE5D,UAAW,IAAIoE,oBCK/E,SAAAG,EACcC,EACAC,GADA3E,KAAA0E,kBAAAA,EACA1E,KAAA2E,cAAAA,uBAbkC,IAAIC,EAAAA,kCAGJ,IAAIA,EAAAA,oBAa7CH,EAAAvE,UAAA2E,+BACC7E,KAAK8E,YACL9E,KAAK+E,WAAa/E,KAAK0E,kBAAkBM,kBAAkBhF,KAAK8E,WAChE9E,KAAKiF,YAAYjF,KAAK2E,cAAcO,cAExClF,KAAKmF,uBAAyBnF,KAAK2E,cAAcS,aAAajE,UAAU,SAACkE,GAAqC,OAAA9E,EAAK+E,kBAAkBD,MAGlIZ,EAAAvE,UAAAqF,uBACHvF,KAAKmF,uBAAuBK,eAGzBf,EAAAvE,UAAAuF,yBACHzF,KAAK0F,gBAAgBC,MAAK,IAGvBlB,EAAAvE,UAAA0F,2BACH5F,KAAK6F,UAAY7F,KAAK6F,SACtB7F,KAAK8F,gBAAgBH,KAAK3F,KAAK6F,WAGzBpB,EAAAvE,UAAAoF,kBAAV,SAA4BD,GACpBrF,KAAK+E,YACL/E,KAAKiF,YAAYI,EAAgBU,0CA9CxC3C,EAAAA,wBAGAA,EAAAA,+BAGA4C,EAAAA,gCAGAA,EAAAA,6BCwDD,SAAAC,EACcC,EACAxB,EACAC,GAHd,IAAApE,EAKI4F,EAAAC,KAAApG,KAAM0E,EAAmBC,IAAc3E,YAJ7BO,EAAA2F,IAAAA,EACA3F,EAAAmE,kBAAAA,EACAnE,EAAAoE,cAAAA,oBAtBgD,IAAIC,EAAAA,sCAGC,IAAIA,EAAAA,6BAGb,IAAIA,EAAAA,iCAGA,IAAIA,EAAAA,8BAGL,IAAIA,EAAAA,sBAlB1ByB,EAAAA,EAAAA,GAiChCJ,EAAA/F,UAAAoG,8BAAqBC,GACxBvG,KAAKwG,uBAAuBb,KAAKY,IAG9BN,EAAA/F,UAAAuG,4BAAmBF,GACtBvG,KAAK0G,cAAcf,KAAKY,IAGrBN,EAAA/F,UAAAyG,0BAAiBJ,GACpBA,EAAQK,SAAWL,EAAQK,QAC3B5G,KAAK6G,gBAAgBlB,KAAK3F,KAAK8G,iBAG5Bb,EAAA/F,UAAA6G,oBACH,QAAI/G,KAAKgH,SACEhH,KAAKgH,QAAQC,eAAiBC,EAAAA,cAAcC,cAKpDlB,EAAA/F,UAAAkH,yBAAgBC,GACnBrH,KAAKsH,kBAAkB3B,KAAK0B,IAGzBpB,EAAA/F,UAAAqH,sBAAaF,cACVtC,EAAa/E,KAAK0E,kBAAkBM,kBAAkBhF,KAAK8E,WACjE,GAAI9E,KAAK+G,WAAY,CACjB,IAAMS,EAAW,IAAIC,EAAAA,SAASJ,EAAOK,WACrC1H,KAAKkG,IAAIyB,QAAiC5C,EAAW6C,GAAI7C,EAAW8C,IAAKL,GAAUrG,UAAU,SAAC2G,GAC7D,IAAzBA,EAAOC,OAAO/F,QACdzB,EAAKyH,eAAerC,KAAKmC,EAAOC,OAAO,GAAGE,iBAIlDjI,KAAKkG,IAAIgC,YAAYlI,KAAKgH,QAAQmB,WAAWC,SAASR,GAAI7C,EAAW8C,KAAK1G,UAAU,SAACiH,GACjF7H,EAAKyH,eAAerC,KAAKyC,EAASH,aAKpChC,EAAA/F,UAAA+E,YAAV,SAAsBc,GAAtB,IAAAxF,EAAAP,KACUqI,EAA0B,GAC5BtC,IAAQsC,EAAOtC,KAAOA,GAC1B/F,KAAK+C,SAAU,EACf/C,KAAKkG,IAAIoC,WAAWtI,KAAK+E,WAAW6C,GAAI5H,KAAK+E,WAAW8C,IAAKQ,GAAQlH,UAAU,SAAC6F,GAC5EzG,EAAKyG,QAAUA,EACfzG,EAAKwC,SAAU,yBArH1BC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,oBACVC,SAAU,khEAkCVoF,OAAQ,CAAC,oZAhDTC,EAAAA,2BACAC,EAAAA,yBAOKC,EAAAA,4DA4CJtF,EAAAA,+BAGA4C,EAAAA,uCAGAA,EAAAA,8BAGAA,EAAAA,kCAGAA,EAAAA,+BAGAA,EAAAA,aAjBsCvB,iBCpBzC,SAAAkE,EACYzC,EACAxB,EACAC,GAHZ,IAAApE,EAKE4F,EAAAC,KAAApG,KAAM0E,EAAmBC,IAAc3E,YAJ7BO,EAAA2F,IAAAA,EACA3F,EAAAmE,kBAAAA,EACAnE,EAAAoE,cAAAA,WAbsC0B,EAAAA,EAAAA,GAkBxCsC,EAAAzI,UAAA+E,YAAV,SAAsBc,GAAtB,IAAAxF,EAAAP,KACQqI,EAA0B,GAC5BtC,IAAQsC,EAAOtC,KAAOA,GAC1B/F,KAAK+C,SAAU,EACf/C,KAAKkG,IAAI0C,oBAAoB5I,KAAK+E,WAAW6C,GAAI5H,KAAK+E,WAAW8C,IAAKQ,GACnElH,UACC,SAAC0H,GAAe,OAAAtI,EAAKuI,WAAWD,IAChC,SAAClH,GACCpB,EAAK2F,IAAIoC,WAAW/H,EAAKwE,WAAW6C,GAAIrH,EAAKwE,WAAW8C,IAAKQ,GAAQlH,UAAU,SAAC6F,GAAY,OAAAzG,EAAKuI,WAAW9B,QAI1G2B,EAAAzI,UAAA4I,WAAV,SAAqBD,GACnB7I,KAAKgH,QAAU6B,EACf7I,KAAK+I,gBACL/I,KAAK+C,SAAU,GAGP4F,EAAAzI,UAAA6I,cAAV,WACM/I,KAAKgH,mBAAmBgC,EAAAA,QAC1BhJ,KAAKiJ,cAAgBjJ,KAAKgH,QAAQmB,WAAWC,SAAShI,MAC7CJ,KAAKgH,mBAAmBkC,EAAAA,aACjClJ,KAAKiJ,cAAgBjJ,KAAKgH,QAAQmC,QAAQC,WAAWhJ,OAEvDJ,KAAKqJ,gBAAkBrJ,KAAKgH,QAAQmB,WAAWmB,WAAWlJ,MAC1DJ,KAAKuJ,eAAiBvJ,KAAKgH,QAAQmB,WAAWqB,UAAUpJ,MACxDJ,KAAKyJ,cAAgBzJ,KAAKgH,QAAQmB,WAAWuB,SAAStJ,MACtDJ,KAAK2J,IAAM3J,KAAKgH,QAAQ2C,yBAxD3B3G,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,8BACVC,SAAU,kTAOVoF,OAAQ,CAAC,iDApBOC,EAAAA,2BAA+BC,EAAAA,yBACxCC,EAAAA,uBAqB2CjE,iBCmBlD,SAAAmF,EACY1D,EACAxB,EACAC,GAHZ,IAAApE,EAKE4F,EAAAC,KAAApG,KAAMkG,EAAKxB,EAAmBC,IAAc3E,YAJlCO,EAAA2F,IAAAA,EACA3F,EAAAmE,kBAAAA,EACAnE,EAAAoE,cAAAA,oBAX2C,IAAIC,EAAAA,6BAGN,IAAIA,EAAAA,8BAGI,IAAIA,EAAAA,sBAfTyB,EAAAA,EAAAA,GAyBjDuD,EAAA1J,UAAAyG,4BACL3G,KAAK8G,eAAeF,SAAW5G,KAAK8G,eAAeF,QACnD5G,KAAK6G,gBAAgBlB,KAAK3F,KAAK8G,iBAG1B8C,EAAA1J,UAAAuG,8BACLzG,KAAK0G,cAAcf,KAAK3F,KAAK8G,iBAGxB8C,EAAA1J,UAAAqH,mCACDvH,KAAKgH,mBAAmBkC,EAAAA,YAC1BlJ,KAAKgI,eAAerC,KAAK3F,KAAKgH,QAAQmC,QAAQlB,UAE5CjI,KAAKgH,mBAAmBgC,EAAAA,SAC1BhJ,KAAKkG,IAAIgC,YAAYlI,KAAKgH,QAAQmB,WAAWC,SAASR,GAAI5H,KAAKgH,QAAQa,KAAK1G,UAAU,SAACiH,GACrF7H,EAAKyH,eAAerC,KAAKyC,EAASH,iCAtDzCjF,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oCACVC,SAAU,ofAUVoF,OAAQ,CAAC,iDAtBOC,EAAAA,2BAAqCC,EAAAA,yBAC9CC,EAAAA,4DAyBNtF,EAAAA,yBAGAA,EAAAA,+BAGA4C,EAAAA,8BAGAA,EAAAA,+BAGAA,EAAAA,aAduD2C,iBCQxD,SAAAkB,EACY3D,EACAxB,EACAC,EACAmF,GAJZ,IAAAvJ,EAME4F,EAAAC,KAAApG,KAAMkG,EAAKxB,EAAmBC,IAAc3E,YALlCO,EAAA2F,IAAAA,EACA3F,EAAAmE,kBAAAA,EACAnE,EAAAoE,cAAAA,EACApE,EAAAuJ,SAAAA,iBAV8B,IAAIlF,EAAAA,wBAI7B,WAVsCyB,EAAAA,EAAAA,GAqBhDwD,EAAA3J,UAAA0C,qBAAYC,GACbA,EAAO,cACT7C,KAAK+J,uBAIFF,EAAA3J,UAAA8J,gCACLhK,KAAKiK,aAAatE,KAAK,IAAIuE,KAAKlK,KAAKgH,QAAQmD,WAAWzC,aAGnDmC,EAAA3J,UAAAkK,+BACLpK,KAAKiK,aAAatE,KAAK,IAAIuE,KAAKlK,KAAKgH,QAAQqD,UAAU3C,aAG/CmC,EAAA3J,UAAA6I,cAAV,WACE5C,EAAAjG,UAAM6I,cAAa3C,KAAApG,MACnBA,KAAKmK,WAAanK,KAAKgH,QAAQmD,WAC/BnK,KAAKqK,UAAYrK,KAAKgH,QAAQqD,UAC9BrK,KAAK+J,uBAGCF,EAAA3J,UAAA6J,+BACF/J,KAAKsK,cAAgBtK,KAAKgH,UAC5BhH,KAAKuK,QAAUvK,KAAK8J,SAASU,SAC3BxK,KAAKsK,aACLtK,KAAKgH,QAAQmD,WAAWzC,UACxB1H,KAAKgH,QAAQqD,UAAU3C,iCAvD9B1E,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oCACVC,SAAU,gVAIVoF,OAAQ,CAAC,iDAlBFC,EAAAA,2BAAqCC,EAAAA,yBACrCC,EAAAA,wBADwD+B,EAAAA,8CAsB9DrH,EAAAA,4BAGA4C,EAAAA,aALsD4D,oFCZXvD,EAAAA,EAAAA,uBAD7C9D,EAAAA,gBAC6CtC,EAAAA,uBA2F1C,SAAAyK,EACcxE,EACA4D,EACApF,EACAiG,EACAC,EACAjG,GANd,IAAApE,EAQI4F,EAAAC,KAAApG,KAAMkG,EAAKxB,EAAmBC,EAAemF,IAAS9J,YAP5CO,EAAA2F,IAAAA,EACA3F,EAAAuJ,SAAAA,EACAvJ,EAAAmE,kBAAAA,EACAnE,EAAAoK,MAAAA,EACApK,EAAAqK,YAAAA,EACArK,EAAAoE,cAAAA,wBATc,WAFc0B,EAAAA,EAAAA,GAgBnCqE,EAAAxK,UAAA2K,6BACH7K,KAAK8K,oBAAsB9K,KAAK8K,oBAG7BJ,EAAAxK,UAAA6K,8BAAqBC,GACxB,IAAMC,EAAMjL,KAAK8G,eAAeoE,oBAAoBC,UAAU,SAACC,GAAU,OAAAA,EAAMxD,KAAOoD,EAASK,mBACzFC,EAAWtL,KAAKuL,eAAeP,EAASK,mBACnC,EAAPJ,GACAD,EAASpE,SAAU,EACnB5G,KAAK8G,eAAeoE,oBAAoBM,OAAOP,EAAK,KAEpDD,EAASpE,SAAU,EACnB5G,KAAK8G,eAAeoE,oBAAoBO,KAAK,CAAE7D,GAAIoD,EAASK,iBAAkBV,MAAOK,EAASL,SAElG3K,KAAK4K,YAAY7J,IAAIuK,GAAU1E,QAAUoE,EAASpE,QAClD5G,KAAK6G,gBAAgBlB,KAAK3F,KAAK8G,iBAGzB4D,EAAAxK,UAAA6I,cAAV,WAAA,IAAAxI,EAAAP,KACImG,EAAAjG,UAAM6I,cAAa3C,KAAApG,MACfA,KAAKgH,QAAQ0E,iBACb1L,KAAKgH,QAAQ0E,gBAAgBC,QAAQ,SAACC,GAClC,IAAMN,EAAW/K,EAAKgL,eAAeK,EAAEP,kBACjCQ,EAAetL,EAAKuG,eAAeoE,oBAAoBzJ,KAAK,SAACqK,GAAM,OAAAA,EAAElE,KAAOgE,EAAEP,mBAChFQ,GACAtL,EAAKqK,YAAYhJ,IAAI0J,EAAU,CAC3BX,MAAOkB,EAAalB,MACpB/D,SAAS,IAGZrG,EAAKqK,YAAY/J,IAAIyK,IACtB/K,EAAKqK,YAAYhJ,IAAI0J,EAAU,CAC3BX,MAAOpK,EAAKoK,MAAMoB,WAClBnF,SAAS,IAGjBgF,EAAEjB,MAAQpK,EAAKqK,YAAY7J,IAAIuK,GAAUX,MACzCiB,EAAEhF,QAAUrG,EAAKqK,YAAY7J,IAAIuK,GAAU1E,WAK/C8D,EAAAxK,UAAAqL,wBAAeS,GACnB,OAAOhM,KAAKgH,QAAQa,IAAMmE,uBA3IjChJ,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uBACVC,SAAU,oyIA2EVoF,OAAQ,CAAC,g4CACT0D,cAAeC,EAAAA,kBAAkBC,kDA5Fd3D,EAAAA,2BAAiEiC,EAAAA,YAAnChC,EAAAA,yBAA5C2D,EAAAA,oBAwGsBC,SAvGtB3D,EAAAA,uBA6FqCmB,iBC9D1C,SAAAyC,EACcpG,EACAxB,EACAC,GAHd,IAAApE,EAKI4F,EAAAC,KAAApG,KAAM0E,EAAmBC,IAAc3E,YAJ7BO,EAAA2F,IAAAA,EACA3F,EAAAmE,kBAAAA,EACAnE,EAAAoE,cAAAA,oBAZyC,IAAIC,EAAAA,6BAGN,IAAIA,EAAAA,sBATfyB,EAAAA,EAAAA,GAuBnCiG,EAAApM,UAAAyG,4BACH3G,KAAK8G,eAAeF,SAAW5G,KAAK8G,eAAeF,QACnD5G,KAAK6G,gBAAgBlB,KAAK3F,KAAK8G,iBAG5BwF,EAAApM,UAAAuG,4BAAmBF,GACtBvG,KAAK0G,cAAcf,KAAKY,IAGlB+F,EAAApM,UAAA+E,YAAV,SAAsBc,GAAtB,IAAAxF,EAAAP,KACUqI,EAA0B,GAC5BtC,IAAQsC,EAAOtC,KAAOA,GAC1B/F,KAAK+C,SAAU,EACf/C,KAAKkG,IAAIoC,WAAWtI,KAAK+E,WAAW6C,GAAI5H,KAAK+E,WAAW8C,IAAKQ,GAAQlH,UAAU,SAAC6F,GAC5EzG,EAAKyG,QAAUA,EACfzG,EAAKwC,SAAU,yBAlD1BC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uBACVC,SAAU,wlBAPIqF,EAAAA,2BAAqCC,EAAAA,yBAC9CC,EAAAA,4DAkBJtF,EAAAA,+BAGA4C,EAAAA,8BAGAA,EAAAA,aARyCvB,GCGxC8H,EAAa,CACjB7B,EACAd,EACAjB,EACAkB,EACA5D,EACAqG,yDAGDhJ,EAAAA,SAAQL,KAAA,CAAC,CACRO,QAAS,CACPC,EAAAA,aACA+I,EAAAA,gBACAC,EAAAA,oBACApJ,EACAqJ,EAAAA,aAEFnJ,aAAc,CACZgJ,GAEF7I,QAAS,CACP6I,GAEF5I,UAAW,CACT0I,0BCIF,SAAAM,EACYC,EACA1G,EACA2G,EACA/C,EACAnF,GALZ,IAAApE,EAOE4F,EAAAC,KAAApG,KAAM4M,EAAiB1G,EAAK2G,EAAmB/C,EAAUnF,IAAc3E,YAN7DO,EAAAqM,gBAAAA,EACArM,EAAA2F,IAAAA,EACA3F,EAAAsM,kBAAAA,EACAtM,EAAAuJ,SAAAA,EACAvJ,EAAAoE,cAAAA,iBAZ8BT,yBACRA,iBACnB,oBAEwB,IAAIA,eAXFmC,EAAAA,EAAAA,GAwBlCsG,EAAAzM,UAAA2E,oBACL7E,KAAK8M,qBAAuBC,SAASC,eAAe,yBAC/ChN,KAAK8M,uBACR9M,KAAK8M,qBAAuBC,SAASE,cAAc,SACnDjN,KAAK8M,qBAAqBlF,GAAK,wBAC/BmF,SAASG,KAAKC,YAAYnN,KAAK8M,wBAK5BH,EAAAzM,UAAAkN,cAAKC,GAEV,IAaIC,EAbEC,EAAKF,EAAMG,OAAOxG,QAAQyG,SAC1BC,EAAYL,EAAMG,OAAOG,UAAUC,SAAS,cAAgB,OAAS,MACrEC,EAAiC,QAAdH,EAAsB,GAAK,EAYpD,GATAxJ,MAAM4J,KAAKT,EAAMG,OAAOO,cAAcC,UAAUrC,QAAQ,SAACsC,GAAmB,OAAAA,EAAMC,UAAY,KAC5E,QAAdR,EACDL,EAAuB,OAAEM,UAAUQ,IAAI,cAEvCd,EAAuB,OAAEM,UAAUQ,IAAI,eAK/B,aAAPZ,EACFD,EAAe,SAACc,EAASC,GAAY,OAAAR,GAAmBO,EAAGE,SAAWD,EAAGC,eACpE,CACL,IAAMC,EAAQC,SAASjB,EAAI,IAE3BD,EAAe,SAACc,EAASC,GACvB,OAACD,EAAGrG,OAAOwG,KAAWE,UAAY,EAC/BJ,EAAGtG,OAAOwG,KAAWE,WAAa,EAChCZ,GAAmBO,EAAGrG,OAAOwG,GAASF,EAAGtG,OAAOwG,KAMzDvO,KAAK0O,aAAe1O,KAAK0O,aAAatB,KAAKE,IAGnCX,EAAAzM,UAAAoF,kBAAV,SAA4BD,KAErBsH,EAAAzM,UAAAyO,+BAAsBC,KAInBjC,EAAAzM,UAAA2O,wBAAV,SAAkCtI,KAKxBoG,EAAAzM,UAAA4O,uBAAV,SAAiC/J,GAE/B,OAAO/E,KAAK4O,WAAWG,QAAQhK,IAGvB4H,EAAAzM,UAAA8O,cAAV,SAAwBjK,GAEtB,IAAMkK,EAAQjP,KAAK8M,qBAAqBoC,UAAUC,MAAM,QAClDC,EAAQpP,KAAK8O,uBAAuB/J,GAC1CkK,EAAMG,GAAS,iBAAmBA,EAAQ,GAAK,wBAC/CpP,KAAK8M,qBAAqBoC,UAAYD,EAAMI,KAAK,SAGzC1C,EAAAzM,UAAAoP,iBAAV,SAA2BvK,GAEzB,IAAMkK,EAAQjP,KAAK8M,qBAAqBoC,UAAUC,MAAM,QAExDF,EADcjP,KAAK8O,uBAAuB/J,IAC3B,GACf/E,KAAK8M,qBAAqBoC,UAAYD,EAAMI,KAAK,SAGzC1C,EAAAzM,UAAAqP,oBAAV,WAAA,IAAAhP,EAAAP,KAEEA,KAAK0O,aAAe,GACpB1O,KAAKwP,gBAAgB7D,QAAQ,SAAC9C,GAAe,OAAAtI,EAAKkP,WAAW5G,MAGrD8D,EAAAzM,UAAAuF,cAAV,SAAwBV,GAEtB,IAAMqK,EAAQpP,KAAK8O,uBAAuB/J,GAG1C/E,KAAK0O,aAAa/C,QAAQ,SAACC,GAAM,OAAAA,EAAE7D,OAAOyD,OAAO4D,EAAO,KAExDpP,KAAK0O,aAAe1O,KAAK0O,aAAagB,OAAO,SAAC9D,GAAM,OAAAA,EAAE7D,OAAO4H,OAAO,SAACC,EAAGC,GAAM,OAAAD,GAAKC,GAAGpB,aAAeA,YAErGzO,KAAK8P,eAAetE,OAAO4D,EAAO,GAElC,IAAMH,EAAQjP,KAAK8M,qBAAqBoC,UAAUC,MAAM,QACxDF,EAAMzD,OAAO4D,EAAO,GACpBpP,KAAK8M,qBAAqBoC,UAAYD,EAAMI,KAAK,QAEjDrP,KAAKwP,gBAAgBhE,OAAO4D,EAAO,IAG3BzC,EAAAzM,UAAA6P,WAAV,SAAqBhL,EAAoB8C,GAAzC,IAAAtH,EAAAP,KACEA,KAAKwP,gBAAgBxN,QAAU,EAC/BhC,KAAK8P,eAAerE,KAAK,YACzBzL,KAAK8M,qBAAqBoC,WAAa,OACvClP,KAAKkG,IAAI0C,oBAAoB7D,EAAY8C,GACtC1G,UAAU,SAAC0H,GAA2B,OAAAtI,EAAKyP,cAAcnH,MAGpD8D,EAAAzM,UAAA+P,sBAAV,SAAgClL,EAAoBwB,GAClD,GAAIvG,KAAKwP,gBAAgBU,KAAK,SAACtE,GAAM,OAAAA,IAAM6C,WAAa7C,EAAE7G,aAAeA,IAAa,CACpF,IAAMqK,EAAQpP,KAAK8O,uBAAuB/J,GAC1C/E,KAAK8P,eAAeV,GAAS7I,EAAQoE,QAK/BgC,EAAAzM,UAAAiQ,SAAV,aAIQxD,EAAAzM,UAAA8P,uBAAcnH,GACpB7I,KAAKwP,gBAAgBxP,KAAK8O,uBAAuBjG,EAAW9D,aAAe8D,EAC3E7I,KAAKyP,WAAW5G,IAGV8D,EAAAzM,UAAAuP,oBAAW5G,cACb7I,KAAKwH,UAEPxH,KAAKkG,IAAIkK,UAA4BvH,EAAWjB,GAAIiB,EAAWhB,IAAK7H,KAAKwH,SAAU,CAAE6I,OAAQ,SAC1FlP,UAAU,SAAC2G,GAGV,IAAMsH,EAAQ7O,EAAKuO,uBAAuBjG,EAAW9D,YACrDxE,EAAK+P,YAAYzH,EAAYf,EAAOC,OAAOwI,IAAI,SAAC3E,GAC9C,IAAMgE,EAAI,IAAI1L,MAAM3D,EAAKqO,WAAW5M,QAAQwO,KAAK/B,WAEjD,OADAmB,EAAER,GAASxD,EAAE,GACN,CAAE0C,SAAU1C,EAAE,GAAI7D,OAAQ6H,SAMnCjD,EAAAzM,UAAAoQ,qBAAYzH,EAAwB4H,GAC1C,IAAMrB,EAAQpP,KAAK8O,uBAAuBjG,EAAW9D,YAGrD,GAAI/E,KAAK8G,eAAgB,CACvB,IAAMA,EAAiB9G,KAAK8G,eAAe/F,IAAI8H,EAAW9D,YAC1D/E,KAAK8P,eAAeV,GAAStI,EAAe6D,WAG5C3K,KAAK8P,eAAeV,GAAS,gBAY/B,IATgE,IAA5DpP,KAAK0Q,mBAAmB3B,QAAQlG,EAAW9D,aAC7C/E,KAAKgP,cAAcnG,EAAW9D,YAQC,IAA7B/E,KAAK0O,aAAa1M,OAEpBhC,KAAK0O,aAAe+B,OAQpB,IAJA,IAAIE,EAAI,EACJC,EAAI,EAGDA,EAAIH,EAAQzO,QAGbhC,KAAK0O,aAAaiC,IAAM3Q,KAAK0O,aAAaiC,GAAGrC,WAAamC,EAAQG,GAAGtC,UAEvEtO,KAAK0O,aAAaiC,GAAG5I,OAAOqH,GAASqB,EAAQG,GAAG7I,OAAOqH,GAEvDuB,IACAC,MAGS5Q,KAAK0O,aAAaiC,IAAM3Q,KAAK0O,aAAaiC,GAAGrC,SAAWmC,EAAQG,GAAGtC,WAQ5EtO,KAAK0O,aAAalD,OAAOmF,EAAG,EAAGF,EAAQG,IAEvCA,KAPAD,KAcN3Q,KAAK6Q,MAAQ7Q,KAAKwP,gBAAgBsB,MAAM,SAAClF,GAAM,OAAAA,IAAM6C,iCAvPxDzL,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,SAAU,4mBAmBVoF,OAAQ,CAAC,m5BAjCSwI,EAAAA,uBAElBvI,EAAAA,2BAIAC,EAAAA,yBACAgC,EAAAA,YAGwB/B,EAAAA,uBAyBiBsI,EAAAA,2BCnC3CC,EAAA,oDAOC3N,EAAAA,SAAQL,KAAA,CAAC,CACNM,aAAc,CACVoJ,GAEJnJ,QAAS,CACLC,EAAAA,aACA+I,EAAAA,gBACAC,EAAAA,qBAEJ/I,QAAS,CACLiJ,GAEJhJ,UAAW,SAnBf","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IdCache, Settings, SettingsService } from '@helgoland/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\ndeclare var $: any;\n\n@Injectable()\nexport class LabelMapperService {\n\n    private cache: IdCache<string> = new IdCache();\n\n    constructor(\n        protected httpClient: HttpClient,\n        protected settingsSrvc: SettingsService<Settings>\n    ) { }\n\n    public getMappedLabel(label: string): Observable<string> {\n        return new Observable<string>((observer: Observer<string>) => {\n            if (!this.settingsSrvc.getSettings().solveLabels) {\n                this.confirmLabel(observer, label);\n            } else {\n                const url = this.findUrl(label);\n                if (url) {\n                    if (this.cache.has(url)) {\n                        this.confirmLabel(observer, this.cache.get(url));\n                    } else {\n                        const labelUrl =\n                            this.settingsSrvc.getSettings().proxyUrl ? this.settingsSrvc.getSettings().proxyUrl + url : url;\n                        this.httpClient.get(labelUrl, { responseType: 'text' }).subscribe((res) => {\n                            try {\n                                const xml = $.parseXML(res);\n                                label = label.replace(url, $(xml).find('prefLabel').text());\n                            } catch (error) {\n                                // currently do nothing and use old label\n                            }\n                            this.cache.set(url, label);\n                            this.confirmLabel(observer, label);\n                        }, (error) => {\n                            const resolvedLabel = label.substring(label.lastIndexOf('/') + 1, label.length);\n                            this.cache.set(url, resolvedLabel);\n                            this.confirmLabel(observer, resolvedLabel);\n                        });\n                    }\n                } else {\n                    this.confirmLabel(observer, label);\n                }\n            }\n        });\n    }\n\n    private confirmLabel(observer: Observer<string>, label: string) {\n        observer.next(label);\n        observer.complete();\n    }\n\n    private findUrl(label: string) {\n        const source = (label || '').toString();\n        const regexToken = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?&\\/\\/=]+)/g;\n        const matchArray = regexToken.exec(source);\n        if (matchArray !== null) {\n            return matchArray[0];\n        }\n        return null;\n    }\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { LabelMapperService } from './label-mapper.service';\n\n@Component({\n    selector: 'n52-label-mapper',\n    template: `<span *ngIf=\"determinedLabel\">{{determinedLabel}}</span>\n<span *ngIf=\"loading\">\n  <span class=\"glyphicon glyphicon-refresh icon-spin\"></span>\n  <span> loading label ...</span>\n</span>\n`\n})\nexport class LabelMapperComponent implements OnChanges {\n\n    @Input()\n    public label: string;\n\n    public determinedLabel: string;\n\n    public loading = true;\n\n    constructor(\n        protected labelMapperSrvc: LabelMapperService\n    ) { }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.label) {\n            this.labelMapperSrvc.getMappedLabel(this.label)\n                .subscribe((label) => {\n                    this.determinedLabel = label;\n                    this.loading = false;\n                });\n        } else {\n            this.loading = false;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { LabelMapperComponent } from './label-mapper.component';\nimport { LabelMapperService } from './label-mapper.service';\n\n@NgModule({\n  declarations: [\n    LabelMapperComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    LabelMapperComponent\n  ],\n  providers: [\n    LabelMapperService\n  ]\n})\nexport class HelgolandLabelMapperModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { InternalDatasetId, InternalIdHandler } from '@helgoland/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\n\n/**\n * Represents an abstract dataset entry for a list, which has the following functions:\n *  - can be selected and is selectable internally, with a corresponding output event\n *  - can be deleted, which also triggers an output event\n *  - translatable, so it triggers the methode onLanguageChanged when the language is switched\n */\nexport abstract class ListEntryComponent implements OnInit, OnDestroy {\n\n    @Input()\n    public datasetId: string;\n\n    @Input()\n    public selected: boolean;\n\n    @Output()\n    public onDeleteDataset: EventEmitter<boolean> = new EventEmitter();\n\n    @Output()\n    public onSelectDataset: EventEmitter<boolean> = new EventEmitter();\n\n    public loading;\n\n    protected internalId: InternalDatasetId;\n\n    private langChangeSubscription: Subscription;\n\n    constructor(\n        protected internalIdHandler: InternalIdHandler,\n        protected translateSrvc: TranslateService\n    ) { }\n\n    public ngOnInit(): void {\n        if (this.datasetId) {\n            this.internalId = this.internalIdHandler.resolveInternalId(this.datasetId);\n            this.loadDataset(this.translateSrvc.currentLang);\n        }\n        this.langChangeSubscription = this.translateSrvc.onLangChange.subscribe((langChangeEvent: LangChangeEvent) => this.onLanguageChanged(langChangeEvent));\n    }\n\n    public ngOnDestroy(): void {\n        this.langChangeSubscription.unsubscribe();\n    }\n\n    public removeDataset() {\n        this.onDeleteDataset.emit(true);\n    }\n\n    public toggleSelection() {\n        this.selected = !this.selected;\n        this.onSelectDataset.emit(this.selected);\n    }\n\n    protected onLanguageChanged(langChangeEvent: LangChangeEvent): void {\n        if (this.internalId) {\n            this.loadDataset(langChangeEvent.lang);\n        }\n    }\n\n    protected abstract loadDataset(lang?: string): void;\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    Dataset,\n    DatasetApiInterface,\n    InternalIdHandler,\n    LocatedProfileDataEntry,\n    ParameterFilter,\n    PlatformTypes,\n    TimedDatasetOptions,\n    Timespan,\n} from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { ListEntryComponent } from '../list-entry.component';\n\n@Component({\n    selector: 'n52-profile-entry',\n    template: `<div class=\"legendItem\" style=\"position: relative;\" [ngClass]=\"{'selected': selected}\" (click)=\"toggleSelection()\">\n  <div class=\"legendItemheader\">\n    <div class=\"legendItemLabel\">\n      <n52-label-mapper label=\"{{dataset?.parameters.platform.label}}\"></n52-label-mapper>\n    </div>\n    <div class=\"small\">\n      <n52-label-mapper label=\"{{dataset?.parameters.phenomenon.label}}\"></n52-label-mapper>\n      <span *ngIf=\"dataset?.uom\">[\n        <n52-label-mapper label=\"{{dataset.uom}}\"></n52-label-mapper>]</span>\n    </div>\n    <div class=\"small\">\n      <n52-label-mapper label=\"{{dataset?.parameters.procedure.label}}\"></n52-label-mapper>\n    </div>\n    <div class=\"small\" *ngIf=\"dataset?.parameters.category.label != dataset?.parameters.phenomenon.label\">\n      <n52-label-mapper label=\"{{dataset?.parameters.category.label}}\"></n52-label-mapper>\n    </div>\n  </div>\n  <div *ngFor=\"let item of datasetOptions\">\n    <div>\n      <span [ngStyle]=\"{'color': item.color}\">{{item.timestamp | date: 'short'}}</span>\n      <span class=\"fa\" [ngClass]=\"{'fa-eye-slash': item.visible, 'fa-eye': !item.visible}\" (click)=\"toggleVisibility(item); $event.stopPropagation();\"\n        title=\"{{'profiles.legend.visibility' | translate}}\"></span>\n      <span class=\"fa fa-pencil\" (click)=\"editDatasetOptions(item); $event.stopPropagation();\" [ngStyle]=\"{color: item.color}\"\n        title=\"{{'profiles.legend.edit-style' | translate}}\"></span>\n      <span class=\"fa fa-map-marker\" (click)=\"showGeometry(item); $event.stopPropagation();\" title=\"{{'profiles.legend.show-geometry' | translate}}\"></span>\n      <span class=\"fa fa-times\" (click)=\"removeDatasetOptions(item); $event.stopPropagation();\" title=\"{{'profiles.legend.delete-subentry' | translate}}\"></span>\n    </div>\n    <div (click)=\"openInCombiView(item); $event.stopPropagation();\" *ngIf=\"isMobile()\" class=\"toCombiView\">\n      <span class=\"fa fa-arrow-right\"></span>\n      <span>{{'profiles.legend.go-to-combi-view' | translate}}</span>\n    </div>\n  </div>\n</div>\n`,\n    styles: [`:host .legendItem{background-color:#fff;padding:5px;border-radius:5px;margin-bottom:5px}:host .legendItem .small{font-size:90%;word-break:break-all}:host .legendItem.selected{padding:0;border-width:5px;border-style:solid}:host .legendItem .legendItemheader{cursor:pointer}:host .legendItem .toCombiView{cursor:pointer}:host .legendItem .fa{cursor:pointer}`]\n})\nexport class ProfileEntryComponent extends ListEntryComponent {\n\n    @Input()\n    public datasetOptions: TimedDatasetOptions[];\n\n    @Output()\n    public onUpdateOptions: EventEmitter<TimedDatasetOptions[]> = new EventEmitter();\n\n    @Output()\n    public onDeleteDatasetOptions: EventEmitter<TimedDatasetOptions> = new EventEmitter();\n\n    @Output()\n    public onEditOptions: EventEmitter<TimedDatasetOptions> = new EventEmitter();\n\n    @Output()\n    public onOpenInCombiView: EventEmitter<TimedDatasetOptions> = new EventEmitter();\n\n    @Output()\n    public onShowGeometry: EventEmitter<GeoJSON.GeoJsonObject> = new EventEmitter();\n\n    public dataset: Dataset;\n\n    public editableOptions: TimedDatasetOptions;\n    public tempColor: string;\n\n    constructor(\n        protected api: DatasetApiInterface,\n        protected internalIdHandler: InternalIdHandler,\n        protected translateSrvc: TranslateService\n    ) {\n        super(internalIdHandler, translateSrvc);\n    }\n\n    public removeDatasetOptions(options: TimedDatasetOptions) {\n        this.onDeleteDatasetOptions.emit(options);\n    }\n\n    public editDatasetOptions(options: TimedDatasetOptions) {\n        this.onEditOptions.emit(options);\n    }\n\n    public toggleVisibility(options: TimedDatasetOptions) {\n        options.visible = !options.visible;\n        this.onUpdateOptions.emit(this.datasetOptions);\n    }\n\n    public isMobile() {\n        if (this.dataset) {\n            return this.dataset.platformType === PlatformTypes.mobileInsitu;\n        }\n        return false;\n    }\n\n    public openInCombiView(option: TimedDatasetOptions) {\n        this.onOpenInCombiView.emit(option);\n    }\n\n    public showGeometry(option: TimedDatasetOptions) {\n        const internalId = this.internalIdHandler.resolveInternalId(this.datasetId);\n        if (this.isMobile()) {\n            const timespan = new Timespan(option.timestamp);\n            this.api.getData<LocatedProfileDataEntry>(internalId.id, internalId.url, timespan).subscribe((result) => {\n                if (result.values.length === 1) {\n                    this.onShowGeometry.emit(result.values[0].geometry);\n                }\n            });\n        } else {\n            this.api.getPlatform(this.dataset.parameters.platform.id, internalId.url).subscribe((platform) => {\n                this.onShowGeometry.emit(platform.geometry);\n            });\n        }\n    }\n\n    protected loadDataset(lang?: string) {\n        const params: ParameterFilter = {};\n        if (lang) { params.lang = lang; }\n        this.loading = true;\n        this.api.getDataset(this.internalId.id, this.internalId.url, params).subscribe((dataset) => {\n            this.dataset = dataset;\n            this.loading = false;\n        });\n    }\n\n}\n","import { Component } from '@angular/core';\nimport { Dataset, DatasetApiInterface, IDataset, InternalIdHandler, ParameterFilter, Timeseries } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { ListEntryComponent } from '../../list-entry.component';\n\n/**\n * Implements the abstract ListEntryComponent, which has the following functions:\n *  - can be selected and is selectable internally, with a corresponding output event\n *  - can be deleted, which also triggers an output event\n *  - translatable, so it triggers the methode onLanguageChanged when the language is switched\n */\n@Component({\n  selector: 'n52-simple-timeseries-entry',\n  template: `<span>Platform: {{platformLabel}}</span>\n<span>Phenomenon: {{phenomenonLabel}}</span>\n<span>Procedure: {{procedureLabel}}</span>\n<span>Category: {{categoryLabel}}</span>\n<span>Uom: {{uom}}</span>\n<button (click)=\"toggleSelection()\">select</button>\n<button (click)=\"removeDataset()\">remove</button>`,\n  styles: [``]\n})\nexport class SimpleTimeseriesEntryComponent extends ListEntryComponent {\n\n  public dataset: IDataset;\n\n  public platformLabel: string;\n  public phenomenonLabel: string;\n  public procedureLabel: string;\n  public categoryLabel: string;\n  public uom: string;\n\n  constructor(\n    protected api: DatasetApiInterface,\n    protected internalIdHandler: InternalIdHandler,\n    protected translateSrvc: TranslateService\n  ) {\n    super(internalIdHandler, translateSrvc);\n  }\n\n  protected loadDataset(lang?: string): void {\n    const params: ParameterFilter = {};\n    if (lang) { params.lang = lang; }\n    this.loading = true;\n    this.api.getSingleTimeseries(this.internalId.id, this.internalId.url, params)\n      .subscribe(\n        (timeseries) => this.setDataset(timeseries),\n        (error) => {\n          this.api.getDataset(this.internalId.id, this.internalId.url, params).subscribe((dataset) => this.setDataset(dataset));\n        });\n  }\n\n  protected setDataset(timeseries: IDataset) {\n    this.dataset = timeseries;\n    this.setParameters();\n    this.loading = false;\n  }\n\n  protected setParameters() {\n    if (this.dataset instanceof Dataset) {\n      this.platformLabel = this.dataset.parameters.platform.label;\n    } else if (this.dataset instanceof Timeseries) {\n      this.platformLabel = this.dataset.station.properties.label;\n    }\n    this.phenomenonLabel = this.dataset.parameters.phenomenon.label;\n    this.procedureLabel = this.dataset.parameters.procedure.label;\n    this.categoryLabel = this.dataset.parameters.category.label;\n    this.uom = this.dataset.uom;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Dataset, DatasetApiInterface, DatasetOptions, InternalIdHandler, Timeseries } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { SimpleTimeseriesEntryComponent } from '../simple-timeseries-entry/simple-timeseries-entry.component';\n\n/**\n * Extends the SimpleTimeseriesEntryComponent, with the following functions:\n *  - dataset options and triggers the editation of the dataset options\n *  - triggers the show geometry event\n */\n@Component({\n  selector: 'n52-configurable-timeseries-entry',\n  template: `<span>Platform: {{platformLabel}}</span>\n<span>Phenomenon: {{phenomenonLabel}}</span>\n<span>Procedure: {{procedureLabel}}</span>\n<span>Category: {{categoryLabel}}</span>\n<span>Uom: {{uom}}</span>\n<button (click)=\"toggleSelection()\">toggle selection</button>\n<button (click)=\"removeDataset()\">remove</button>\n<button (click)=\"toggleVisibility()\">toggle visibility</button>\n<button (click)=\"editDatasetOptions()\">edit Options</button>\n<button (click)=\"showGeometry()\">show Geometry</button>`,\n  styles: [``]\n})\nexport class ConfigurableTimeseriesEntryComponent extends SimpleTimeseriesEntryComponent {\n\n  @Input()\n  public datasetOptions: DatasetOptions;\n\n  @Input()\n  public highlight: boolean;\n\n  @Output()\n  public onUpdateOptions: EventEmitter<DatasetOptions> = new EventEmitter();\n\n  @Output()\n  public onEditOptions: EventEmitter<DatasetOptions> = new EventEmitter();\n\n  @Output()\n  public onShowGeometry: EventEmitter<GeoJSON.GeoJsonObject> = new EventEmitter();\n\n  constructor(\n    protected api: DatasetApiInterface,\n    protected internalIdHandler: InternalIdHandler,\n    protected translateSrvc: TranslateService\n  ) {\n    super(api, internalIdHandler, translateSrvc);\n  }\n\n  public toggleVisibility() {\n    this.datasetOptions.visible = !this.datasetOptions.visible;\n    this.onUpdateOptions.emit(this.datasetOptions);\n  }\n\n  public editDatasetOptions() {\n    this.onEditOptions.emit(this.datasetOptions);\n  }\n\n  public showGeometry() {\n    if (this.dataset instanceof Timeseries) {\n      this.onShowGeometry.emit(this.dataset.station.geometry);\n    }\n    if (this.dataset instanceof Dataset) {\n      this.api.getPlatform(this.dataset.parameters.platform.id, this.dataset.url).subscribe((platform) => {\n        this.onShowGeometry.emit(platform.geometry);\n      });\n    }\n  }\n\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { DatasetApiInterface, FirstLastValue, InternalIdHandler, Time, TimeInterval } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport {\n  ConfigurableTimeseriesEntryComponent,\n} from '../configurable-timeseries-entry/configurable-timeseries-entry.component';\n\n/**\n * Extends the ConfigurableTimeseriesEntryComponent, with the following functions:\n *  - first and latest validation\n *  - jump to first and latest value events\n */\n@Component({\n  selector: 'n52-first-latest-timeseries-entry',\n  template: `<span>{{procedureLabel}} - {{platformLabel}}</span>\n<span>Has Data: {{hasData}}</span>\n<button *ngIf=\"firstValue\" (click)=\"jumpToFirstTimeStamp()\">{{firstValue.value}} - {{firstValue.timestamp | date}}</button>\n<button *ngIf=\"lastValue\" (click)=\"jumpToLastTimeStamp()\">{{lastValue.value}} - {{lastValue.timestamp | date}}</button>`,\n  styles: [``]\n})\nexport class FirstLatestTimeseriesEntryComponent extends ConfigurableTimeseriesEntryComponent implements OnChanges {\n\n  @Input()\n  public timeInterval: TimeInterval;\n\n  @Output()\n  public onSelectDate: EventEmitter<Date> = new EventEmitter();\n\n  public firstValue: FirstLastValue;\n  public lastValue: FirstLastValue;\n  public hasData = true;\n\n  constructor(\n    protected api: DatasetApiInterface,\n    protected internalIdHandler: InternalIdHandler,\n    protected translateSrvc: TranslateService,\n    protected timeSrvc: Time\n  ) {\n    super(api, internalIdHandler, translateSrvc);\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.timeInterval) {\n      this.checkDataInTimespan();\n    }\n  }\n\n  public jumpToFirstTimeStamp() {\n    this.onSelectDate.emit(new Date(this.dataset.firstValue.timestamp));\n  }\n\n  public jumpToLastTimeStamp() {\n    this.onSelectDate.emit(new Date(this.dataset.lastValue.timestamp));\n  }\n\n  protected setParameters() {\n    super.setParameters();\n    this.firstValue = this.dataset.firstValue;\n    this.lastValue = this.dataset.lastValue;\n    this.checkDataInTimespan();\n  }\n\n  private checkDataInTimespan() {\n    if (this.timeInterval && this.dataset) {\n      this.hasData = this.timeSrvc.overlaps(\n        this.timeInterval,\n        this.dataset.firstValue.timestamp,\n        this.dataset.lastValue.timestamp\n      );\n    }\n  }\n\n}\n","import { Component, Injectable, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { ColorService, DatasetApiInterface, IdCache, InternalIdHandler, ReferenceValue, Time } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport {\n    FirstLatestTimeseriesEntryComponent,\n} from '../first-latest-timeseries-entry/first-latest-timeseries-entry.component';\n\n@Injectable()\nexport class ReferenceValueColorCache extends IdCache<{ color: string, visible: boolean }> { }\n\n/**\n * Extends the FirstLatestTimeseriesEntryComponent, with the following functions:\n *  - handles the reference values of the dataset entry\n */\n@Component({\n    selector: 'n52-timeseries-entry',\n    template: `<div class=\"legendItem\" style=\"position: relative;\" [ngStyle]=\"{'border-color': datasetOptions?.color}\" [ngClass]=\"{'selected': selected}\"\n  (click)=\"toggleSelection()\">\n  <div class=\"loading-overlay\" *ngIf=\"loading\" [ngStyle]=\"{'background-color': datasetOptions?.color}\">\n    <div class=\"fa fa-refresh fa-spin fa-3x fa-fw\"></div>\n  </div>\n  <div>\n    <div class=\"legendItemheader\" [ngClass]=\"{'highlight': highlight}\">\n      <div class=\"legendItemLabel\" [ngStyle]=\"{'color': datasetOptions?.color}\">\n        <n52-label-mapper label=\"{{platformLabel}}\"></n52-label-mapper>\n        <!-- <n52-favorite-toggler [dataset]=\"dataset\"></n52-favorite-toggler> -->\n      </div>\n      <div class=\"noDataWarning firstLastEntry\" *ngIf=\"!hasData\">\n        <div>\n          <span class=\"fa fa-exclamation-triangle red\"></span>\n          <span class=\"small-label\">Keine Daten verfÃ¼gbar</span>\n        </div>\n        <div class=\"additionalLegendEntry\" (click)=\"jumpToLastTimeStamp(); $event.stopPropagation();\">\n          <span class=\"fa fa-chevron-right\"></span>\n          <span class=\"small-label\">Springe zur letzten Messung</span>\n        </div>\n      </div>\n      <div class=\"small-label\">\n        <n52-label-mapper label=\"{{phenomenonLabel}}\"></n52-label-mapper>\n        <span *ngIf=\"uom\">\n          <span>[</span>\n          <n52-label-mapper label=\"{{uom}}\"></n52-label-mapper>\n          <span>]</span>\n        </span>\n      </div>\n      <div class=\"small-label\">\n        <n52-label-mapper label=\"{{procedureLabel}}\"></n52-label-mapper>\n      </div>\n      <div class=\"small-label\" *ngIf=\"categoryLabel != phenomenonLabel\">\n        <n52-label-mapper label=\"{{categoryLabel}}\"></n52-label-mapper>\n      </div>\n    </div>\n    <div class=\"legendicons\">\n      <span class=\"fa\" [ngClass]=\"{'fa-chevron-down': !informationVisible, 'fa-chevron-up': informationVisible}\" (click)=\"toggleInformation(); $event.stopPropagation();\"></span>\n      <span class=\"fa\" [ngClass]=\"{'fa-eye-slash': datasetOptions?.visible, 'fa-eye': !datasetOptions?.visible}\" (click)=\"toggleVisibility(); $event.stopPropagation();\"></span>\n      <span class=\"fa fa-map-marker\" (click)=\"showGeometry(); $event.stopPropagation();\"></span>\n      <span class=\"fa fa-pencil\" (click)=\"editDatasetOptions(); $event.stopPropagation();\" [ngStyle]=\"{color: datasetOptions?.color}\"></span>\n      <span class=\"fa fa-times\" (click)=\"removeDataset(); $event.stopPropagation();\"></span>\n    </div>\n    <div class=\"collapseLegendEntry small-label\" *ngIf=\"informationVisible\">\n      <div class=\"firstLastEntry additionalLegendEntry\" *ngIf=\"firstValue\" (click)=\"jumpToFirstTimeStamp(); $event.stopPropagation();\">\n        <span class=\"fa fa-chevron-right\"></span>\n        <span>Erster Wert bei</span>\n        <span>{{firstValue.timestamp| date: 'short'}}</span>\n        <span class=\"hidden-medium\">({{firstValue.value}} {{uom}})</span>\n      </div>\n      <div class=\"firstLastEntry additionalLegendEntry\" *ngIf=\"lastValue\" (click)=\"jumpToLastTimeStamp(); $event.stopPropagation();\">\n        <span class=\"fa fa-chevron-right\"></span>\n        <span>Letzter Wert bei</span>\n        <span>{{lastValue.timestamp| date: 'short'}}</span>\n        <span class=\"hidden-medium\">({{lastValue.value}} {{uom}})</span>\n      </div>\n      <div *ngIf=\"dataset?.referenceValues\">\n        <div class=\"additionalLegendEntry\" *ngFor=\"let ref of dataset.referenceValues\" (click)=\"toggleReferenceValue(ref); $event.stopPropagation();\"\n          [ngClass]=\"{'selected': ref.visible}\" [ngStyle]=\"{color: ref.color}\">\n          <span class=\"fa fa-chevron-right\"></span>\n          <span>{{ref.label}}</span>\n        </div>\n      </div>\n      <!-- <div class=\"additionalLegendEntry\" ng-click=\"$event.stopPropagation(); createExportCsv(timeseries)\">\n                <span class=\"glyphicon glyphicon-download\"></span>\n                <span translate=\"export.label\"></span>\n            </div> -->\n      <!-- <div class=\"additionalLegendEntry\">\n                <swc-procedure-metadata timeseries='timeseries'></swc-procedure-metadata>\n                <swc-timeseries-raw-data-output timeseries='timeseries'></swc-timeseries-raw-data-output>\n                <swc-sos-url timeseries='timeseries'></swc-sos-url>\n            </div> -->\n    </div>\n  </div>\n</div>`,\n    styles: [`.geometryViewerModal .modal-body{height:50vh}n52-timeseries-entry .legendItem{background-color:#fff;padding:5px;border-radius:5px;margin-bottom:5px}n52-timeseries-entry .legendItem .small-label{font-size:90%;word-break:break-all}n52-timeseries-entry .legendItem.selected{padding:0;border-width:5px;border-style:solid}n52-timeseries-entry .legendItem .legendItemheader{cursor:pointer}n52-timeseries-entry .legendItem .legendItemheader.highlight{font-weight:700}n52-timeseries-entry .legendItem .legendicons span{margin:0 4%;font-size:150%}n52-timeseries-entry .legendItem .legendicons span:hover{cursor:pointer}n52-timeseries-entry .legendItem .legendicons .delete{z-index:5}n52-timeseries-entry .legendItem .noDataWarning{border:2px solid red;border-radius:5px;padding:3px}n52-timeseries-entry .legendItem .noDataWarning .red{color:red}n52-timeseries-entry .legendItem .additionalLegendEntry:hover{cursor:pointer}n52-timeseries-entry .legendItem .additionalLegendEntry.selected{font-weight:bolder}n52-timeseries-entry .legendItem .refEntry.selected{border-style:solid;border-width:2px;border-radius:2px;margin:2px 0}n52-timeseries-entry .legendItem .loading-overlay{width:100%;height:100%;position:absolute;top:0;left:0;opacity:.5;z-index:1;display:flex;justify-content:center;align-items:center}n52-timeseries-entry .legendItem .loading-overlay .fa-spin{color:#fff;font-size:25px;width:25px;height:25px}`],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TimeseriesEntryComponent extends FirstLatestTimeseriesEntryComponent implements OnChanges {\n\n    public informationVisible = false;\n    public referenceValues: ReferenceValue[];\n\n    constructor(\n        protected api: DatasetApiInterface,\n        protected timeSrvc: Time,\n        protected internalIdHandler: InternalIdHandler,\n        protected color: ColorService,\n        protected refValCache: ReferenceValueColorCache,\n        protected translateSrvc: TranslateService\n    ) {\n        super(api, internalIdHandler, translateSrvc, timeSrvc);\n    }\n\n    public toggleInformation() {\n        this.informationVisible = !this.informationVisible;\n    }\n\n    public toggleReferenceValue(refValue: ReferenceValue) {\n        const idx = this.datasetOptions.showReferenceValues.findIndex((entry) => entry.id === refValue.referenceValueId);\n        const refValId = this.createRefValId(refValue.referenceValueId);\n        if (idx > -1) {\n            refValue.visible = false;\n            this.datasetOptions.showReferenceValues.splice(idx, 1);\n        } else {\n            refValue.visible = true;\n            this.datasetOptions.showReferenceValues.push({ id: refValue.referenceValueId, color: refValue.color });\n        }\n        this.refValCache.get(refValId).visible = refValue.visible;\n        this.onUpdateOptions.emit(this.datasetOptions);\n    }\n\n    protected setParameters() {\n        super.setParameters();\n        if (this.dataset.referenceValues) {\n            this.dataset.referenceValues.forEach((e) => {\n                const refValId = this.createRefValId(e.referenceValueId);\n                const refValOption = this.datasetOptions.showReferenceValues.find((o) => o.id === e.referenceValueId);\n                if (refValOption) {\n                    this.refValCache.set(refValId, {\n                        color: refValOption.color,\n                        visible: true\n                    });\n                }\n                if (!this.refValCache.has(refValId)) {\n                    this.refValCache.set(refValId, {\n                        color: this.color.getColor(),\n                        visible: false\n                    });\n                }\n                e.color = this.refValCache.get(refValId).color;\n                e.visible = this.refValCache.get(refValId).visible;\n            });\n        }\n    }\n\n    private createRefValId(refId: string) {\n        return this.dataset.url + refId;\n    }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Dataset, DatasetApiInterface, DatasetOptions, InternalIdHandler, ParameterFilter } from '@helgoland/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { ListEntryComponent } from '../list-entry.component';\n\n@Component({\n    selector: 'n52-trajectory-entry',\n    template: `<div style=\"white-space: nowrap;\" (click)=\"toggleVisibility()\">\n  <span>\n    <a class=\"btn btn-light\">\n      <span class=\"fa fa-plus\" [ngClass]=\"{'fa-eye': !datasetOptions?.visible, 'fa-eye-slash': datasetOptions?.visible}\"></span>\n    </a>\n  </span>\n  <span style=\"padding-left: 10px;\" [ngStyle]=\"{'color': datasetOptions?.color}\">{{dataset?.parameters.phenomenon.label}}</span>\n  <span class=\"fa fa-pencil\" (click)=\"editDatasetOptions(datasetOptions); $event.stopPropagation();\" [ngStyle]=\"{color: datasetOptions?.color}\"></span>\n</div>`\n})\nexport class TrajectoryEntryComponent extends ListEntryComponent {\n\n    @Input()\n    public datasetOptions: DatasetOptions;\n\n    @Output()\n    public onUpdateOptions: EventEmitter<DatasetOptions> = new EventEmitter();\n\n    @Output()\n    public onEditOptions: EventEmitter<DatasetOptions> = new EventEmitter();\n\n    public dataset: Dataset;\n\n    public tempColor: string;\n\n    constructor(\n        protected api: DatasetApiInterface,\n        protected internalIdHandler: InternalIdHandler,\n        protected translateSrvc: TranslateService\n    ) {\n        super(internalIdHandler, translateSrvc);\n    }\n\n    public toggleVisibility() {\n        this.datasetOptions.visible = !this.datasetOptions.visible;\n        this.onUpdateOptions.emit(this.datasetOptions);\n    }\n\n    public editDatasetOptions(options: DatasetOptions) {\n        this.onEditOptions.emit(options);\n    }\n\n    protected loadDataset(lang?: string): void {\n        const params: ParameterFilter = {};\n        if (lang) { params.lang = lang; }\n        this.loading = true;\n        this.api.getDataset(this.internalId.id, this.internalId.url, params).subscribe((dataset) => {\n            this.dataset = dataset;\n            this.loading = false;\n        });\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HelgolandCoreModule } from '@helgoland/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { HelgolandLabelMapperModule } from '../label-mapper/label-mapper.module';\nimport { ProfileEntryComponent } from './profile-entry/profile-entry.component';\nimport {\n  ConfigurableTimeseriesEntryComponent,\n} from './timeseries/configurable-timeseries-entry/configurable-timeseries-entry.component';\nimport {\n  FirstLatestTimeseriesEntryComponent,\n} from './timeseries/first-latest-timeseries-entry/first-latest-timeseries-entry.component';\nimport { SimpleTimeseriesEntryComponent } from './timeseries/simple-timeseries-entry/simple-timeseries-entry.component';\nimport {\n  ReferenceValueColorCache,\n  TimeseriesEntryComponent,\n} from './timeseries/timeseries-entry/timeseries-entry.component';\nimport { TrajectoryEntryComponent } from './trajectory-entry/trajectory-entry.component';\n\nconst COMPONENTS = [\n  TimeseriesEntryComponent,\n  ConfigurableTimeseriesEntryComponent,\n  SimpleTimeseriesEntryComponent,\n  FirstLatestTimeseriesEntryComponent,\n  ProfileEntryComponent,\n  TrajectoryEntryComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule,\n    HelgolandCoreModule,\n    HelgolandLabelMapperModule,\n    FormsModule\n  ],\n  declarations: [\n    COMPONENTS\n  ],\n  exports: [\n    COMPONENTS\n  ],\n  providers: [\n    ReferenceValueColorCache\n  ]\n})\nexport class HelgolandDatasetlistModule {\n}\n","import { Component, IterableDiffers, OnInit } from '@angular/core';\nimport {\n  DatasetApiInterface,\n  DatasetOptions,\n  DatasetPresenterComponent,\n  DatasetTableData,\n  InternalIdHandler,\n  Time,\n  Timeseries,\n} from '@helgoland/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'n52-dataset-table',\n  template: `<table *ngIf=\"ready\">\n  <thead>\n    <tr>\n      <th (click)=\"sort($event)\" [attr.data-column-id]=\"'datetime'\" class=\"sorted-asc\">\n        Zeit\n      </th>\n      <th *ngFor=\"let series of this.timeseriesArray; let i = index\" (click)=\"sort($event)\" [attr.data-column-id]=\"i\" [ngStyle]=\"{ 'border-color': preparedColors[i] }\">\n        {{series?.label}} [{{series?.uom}}]\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let row of this.preparedData\">\n      <td>{{row.datetime | date: 'short'}}</td>\n      <td *ngFor=\"let value of row.values\">{{value}}</td>\n    </tr>\n  </tbody>\n</table>\n`,\n  styles: [`:host{flex:1;overflow-y:scroll;overflow-x:hidden}:host tbody,:host thead tr{display:table;table-layout:fixed;width:100%}:host table{display:block;border-collapse:separate;border-spacing:0 1px}:host thead{display:block;position:-webkit-sticky;position:sticky;top:0;border-spacing:0}:host tr:nth-child(2n){background-color:#eee}:host th{background-color:#a9a9a9;cursor:pointer;border-bottom-width:7px;border-bottom-style:solid;overflow-wrap:break-word}:host th:first-child{border-bottom-color:#a9a9a9}:host th:first-child.sorted-asc,:host th:first-child.sorted-desc{border-bottom-color:#555}:host th.sorted-asc,:host th.sorted-desc{background-color:#555;color:#fff}:host th.sorted-asc:after{content:\"\\\\25B4\";float:right}:host th.sorted-desc:after{content:\"\\\\25BE\";float:right}:host td{white-space:nowrap;border-bottom:1px solid gray}:host td,:host th{padding:5px 10px}`]\n})\nexport class DatasetTableComponent extends DatasetPresenterComponent<DatasetOptions, any> implements OnInit {\n  /*\n    The component extends DatasetGraphComponent, but implements only parts of that components inputs and outputs.\n    Implemented: datasetIds, timeInterval, selectedDatasetIds and datasetOptions inputs; no outputs\n    Not implemented: graphOptions input; all outputs (onDatasetSelected, onTimespanChanged, onMessageThrown, onLoading)\n  */\n\n  public preparedData: DatasetTableData[] = Array();\n  public preparedColors: string[] = Array();\n  public ready = false;\n\n  public timeseriesArray: Timeseries[] = new Array();\n  private additionalStylesheet: HTMLElement;\n\n  constructor(\n    protected iterableDiffers: IterableDiffers,\n    protected api: DatasetApiInterface,\n    protected datasetIdResolver: InternalIdHandler,\n    protected timeSrvc: Time,\n    protected translateSrvc: TranslateService\n  ) {\n    super(iterableDiffers, api, datasetIdResolver, timeSrvc, translateSrvc);\n  }\n\n  public ngOnInit() {\n    this.additionalStylesheet = document.getElementById('selectedIdsStylesheet');\n    if (!this.additionalStylesheet) {\n      this.additionalStylesheet = document.createElement('style');\n      this.additionalStylesheet.id = 'selectedIdsStylesheet';\n      document.body.appendChild(this.additionalStylesheet);\n    }\n  }\n\n  /* called when user clicks on table headers */\n  public sort(event: any) {\n    // can be 'datetime' or an integer indicating the index of the column in the values array\n    const by = event.target.dataset.columnId;\n    const direction = event.target.classList.contains('sorted-asc') ? 'desc' : 'asc';\n    const directionNumber = (direction === 'asc' ? 1 : -1);\n\n    // set CSS classes\n    Array.from(event.target.parentElement.children).forEach((child: Element) => child.className = '');\n    if (direction === 'asc') {\n      (event.target as Element).classList.add('sorted-asc');\n    } else {\n      (event.target as Element).classList.add('sorted-desc');\n    }\n\n    // define correct callback function for sort method\n    let sortCallback;\n    if (by === 'datetime') {\n      sortCallback = (e1: any, e2: any) => directionNumber * (e1.datetime - e2.datetime);\n    } else {\n      const index = parseInt(by, 10);\n      // basically the same as above, but take care of 'undefined' values\n      sortCallback = (e1: any, e2: any) =>\n        (e1.values[index] === undefined ? 1 :\n          (e2.values[index] === undefined ? -1 :\n            (directionNumber * (e1.values[index] - e2.values[index]))\n          )\n        );\n    }\n\n    // do the sort\n    this.preparedData = this.preparedData.sort(sortCallback);\n  }\n\n  protected onLanguageChanged(langChangeEvent: LangChangeEvent): void { }\n\n  public reloadDataForDatasets(datasetIds: string[]): void {\n    // console.log('reload data at ' + new Date());\n  }\n\n  protected presenterOptionsChanged(options: any) {\n    // only included because it's required by abstract parent class (wouldn't compile without)\n    // no point in implementing this method in a non-graphing component\n  }\n\n  protected getIndexFromInternalId(internalId: string) {\n    // helper method\n    return this.datasetIds.indexOf(internalId);\n  }\n\n  protected setSelectedId(internalId: string) {\n    // quite fairly tested\n    const rules = this.additionalStylesheet.innerHTML.split('\\r\\n');\n    const index = this.getIndexFromInternalId(internalId);\n    rules[index] = 'td:nth-child(' + (index + 2) + ') {font-weight: bold}';\n    this.additionalStylesheet.innerHTML = rules.join('\\r\\n');\n  }\n\n  protected removeSelectedId(internalId: string) {\n    // fairly tested\n    const rules = this.additionalStylesheet.innerHTML.split('\\r\\n');\n    const index = this.getIndexFromInternalId(internalId);\n    rules[index] = '';\n    this.additionalStylesheet.innerHTML = rules.join('\\r\\n');\n  }\n\n  protected timeIntervalChanges() {\n    // the easiest method: delete everything and build preparedData from scratch.\n    this.preparedData = [];\n    this.timeseriesArray.forEach((timeseries) => this.loadTsData(timeseries));\n  }\n\n  protected removeDataset(internalId: string) {\n    // fairly tested\n    const index = this.getIndexFromInternalId(internalId);\n\n    // remove entries of this dataset in each datetime's `values` arrays\n    this.preparedData.forEach((e) => e.values.splice(index, 1));\n    // if a datetime became completely empty (i.e. there's only `undefined`s in the `values` array, delete this datetime)\n    this.preparedData = this.preparedData.filter((e) => e.values.reduce((a, c) => a || c, undefined) !== undefined);\n\n    this.preparedColors.splice(index, 1);\n\n    const rules = this.additionalStylesheet.innerHTML.split('\\r\\n');\n    rules.splice(index, 1);\n    this.additionalStylesheet.innerHTML = rules.join('\\r\\n');\n\n    this.timeseriesArray.splice(index, 1);\n  }\n\n  protected addDataset(internalId: string, url: string): void {\n    this.timeseriesArray.length += 1;  // create new empty slot\n    this.preparedColors.push('darkgrey');\n    this.additionalStylesheet.innerHTML += '\\r\\n';\n    this.api.getSingleTimeseries(internalId, url)\n      .subscribe((timeseries: Timeseries) => this.addTimeseries(timeseries));\n  }\n\n  protected datasetOptionsChanged(internalId: string, options: DatasetOptions): void {\n    if (this.timeseriesArray.some((e) => e !== undefined && e.internalId === internalId)) {\n      const index = this.getIndexFromInternalId(internalId);\n      this.preparedColors[index] = options.color;\n      // TODO-CF: Page isn't refreshed instantly, but only after the next sort (or possible other actions as well)\n    }\n  }\n\n  protected onResize(): void {\n    // TODO-CF: needed???? probably not\n  }\n\n  private addTimeseries(timeseries: Timeseries) {\n    this.timeseriesArray[this.getIndexFromInternalId(timeseries.internalId)] = timeseries;\n    this.loadTsData(timeseries);\n  }\n\n  private loadTsData(timeseries: Timeseries) {\n    if (this.timespan) {\n      // const datasetOptions = this.datasetOptions.get(timeseries.internalId);\n      this.api.getTsData<[number, number]>(timeseries.id, timeseries.url, this.timespan, { format: 'flot' })\n        .subscribe((result) => {\n          // bring result into Array<DatasetTableData> format and pass to prepareData\n          // convention for layout of newdata argument: see 3-line-comment in prepareData function\n          const index = this.getIndexFromInternalId(timeseries.internalId);\n          this.prepareData(timeseries, result.values.map((e) => {\n            const a = new Array(this.datasetIds.length).fill(undefined);\n            a[index] = e[1];\n            return { datetime: e[0], values: a };\n          }));\n        });\n    }\n  }\n\n  private prepareData(timeseries: Timeseries, newdata: DatasetTableData[]) {\n    const index = this.getIndexFromInternalId(timeseries.internalId);\n\n    // if datasetOptions are provided, use their color to style the header's \"color band\" (i.e. the 7px border-bottom of th)\n    if (this.datasetOptions) {\n      const datasetOptions = this.datasetOptions.get(timeseries.internalId);\n      this.preparedColors[index] = datasetOptions.color;\n    } else {\n      // when no color is specified: make border transparent so the header's background color is used for the color band, too\n      this.preparedColors[index] = 'rgba(0,0,0,0)';\n    }\n\n    if (this.selectedDatasetIds.indexOf(timeseries.internalId) !== -1) {\n      this.setSelectedId(timeseries.internalId);\n    }\n\n    // `newdata` is expected in exactly the same format `preparedData` would look like if that timeseries was the only one\n    // to actually have data (i.e. `values` has the length of timeseriesArray, but all slots are `undefined`, except for\n    // the slot that corresponds to that timeseries)\n\n    // `timeseries` is first timeseries added -> no other `preparedData` to merge with\n    if (this.preparedData.length === 0) {\n      // set newdata as preparedData (as per above)\n      this.preparedData = newdata;\n\n      // `timeseries` is not the first timeseries added -> we have to merge `newdata` into the existing `preparedData`\n    } else {\n      let i = 0;  // loop variable for `preparedData`\n      let j = 0;  // loop variable for `newdata`\n\n      // go through all data points in `newdata`\n      while (j < newdata.length) {\n\n        // timestamps match\n        if (this.preparedData[i] && this.preparedData[i].datetime === newdata[j].datetime) {\n          // just add `newdata`'s value to the existing `values` array in `preparedData`\n          this.preparedData[i].values[index] = newdata[j].values[index];\n          // increment both\n          i++;\n          j++;\n\n          // `newdata` is ahead of `preparedData`\n        } else if (this.preparedData[i] && this.preparedData[i].datetime < newdata[j].datetime) {\n          // do nothing because there's already an undefined there\n          // give preparedData the chance to catch up with newdata\n          i++;\n\n          // `preparedData` is ahead of `newdata`\n        } else {\n          // the current `newdata` is the first dataset that has this datetime -> add it to the preparedData array\n          this.preparedData.splice(i, 0, newdata[j]);\n          // give newdata the chance to catch up with preparedData\n          j++;\n          // but preparedData is 1 longer now, too\n          i++;\n        }\n      }\n    }\n\n    this.ready = this.timeseriesArray.every((e) => e !== undefined);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HelgolandCoreModule } from '@helgoland/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DatasetTableComponent } from './dataset-table.component';\n\n@NgModule({\n    declarations: [\n        DatasetTableComponent\n    ],\n    imports: [\n        CommonModule,\n        TranslateModule,\n        HelgolandCoreModule\n    ],\n    exports: [\n        DatasetTableComponent\n    ],\n    providers: [\n    ]\n})\nexport class HelgolandDatasetTableModule { }\n"]}