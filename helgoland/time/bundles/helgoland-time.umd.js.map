{"version":3,"file":"helgoland-time.umd.js.map","sources":["ng://@helgoland/time/lib/predefined-timespan-selector/predefined-timespan-selector.component.ts","ng://@helgoland/time/lib/time-list-selector/time-list-selector.component.ts","ng://@helgoland/time/lib/timespan-button/timespan-button.component.ts","ng://@helgoland/time/lib/timespan-shift-selector/timespan-shift-selector.component.ts","ng://@helgoland/time/lib/time.module.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ParsedTimespanPreset, Settings, SettingsService, Timespan, TimespanPreset } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-predefined-timespan-selector',\n  template: `<span *ngFor=\"let item of parsedTimespanPresets\">\n  <button (click)=\"timespanChanged(item)\" [ngClass]=\"{'seperator-after-this-item': item.seperatorAfterThisItem}\" class=\"btn btn-sm btn-default\">\n    {{item.label}}\n  </button>\n  <br>\n</span>\n`,\n  styles: [`:host :not(.seperator-after-this-item)+br{display:none}:host button{margin:3px}`]\n})\n\nexport class PredefinedTimespanSelectorComponent implements OnInit {\n\n  @Input()\n  public timespan: Timespan;\n\n  @Output()\n  public onTimespanChange: EventEmitter<Timespan> = new EventEmitter<Timespan>();\n\n  public parsedTimespanPresets: ParsedTimespanPreset[];\n\n  constructor(\n    protected settingSrvc: SettingsService<Settings>\n  ) { }\n\n  public ngOnInit() {\n    const timespanPresets = this.settingSrvc.getSettings().timespanPresets;\n    if (timespanPresets) {\n      this.parsedTimespanPresets = timespanPresets\n        .filter((e) => this.isSafeTimespanPreset(e))\n        .map((e) => ({\n          name: e.name,\n          label: e.label,\n          timespan: {\n            from: this.parseMomentExpression(e.timespan.from).getTime(),\n            to: this.parseMomentExpression(e.timespan.to).getTime()\n          },\n          seperatorAfterThisItem: e.seperatorAfterThisItem\n        }));\n    }\n  }\n\n  public isSafeMomentExpression(expression: string): boolean {\n    // tslint:disable:max-line-length\n    // regex checks whether code to be eval'ed adhers to syntax given in https://momentjs.com/docs/#/manipulating/\n    // explanation:               Start with \"moment()\"   Possible functions: add(number, string) and subtract(number, string)                            Further possible functions: startOf(string) and endOf(string)                           Further possible functions: year(number), ..., milliseconds(number).                         functions can be chained infinitely, or not at all\n    // further explanation:       This is a MUST.         The strings have to be out of the options described in the docs (shortcuts permitted)           Again, the strings have to be out of a strict set.                                      These set the corresponding part of the Moment object to the number given.                   |  (i.e. \"moment()\" is the minimal case matched)\n    // even further explanation:                          The number doesn't HAVE to be reasonable (e.g. month=20 is ok), but that's no security issue.   The quotes can incorrectly start with ' and then end with \" (or vice versa), but that's no security problem either.                                                                  v v optional semicolon at the end\n    const safeMomentExpression = new RegExp(/^moment\\(\\)(\\.(((add|subtract)\\(\\d+, ?['\"](years|y|quarters|Q|months|M|weeks|w|days|d|hours|h|minutes|m|seconds|s|milliseconds|ms)['\"]\\))|((startOf|endOf)\\(['\"](year|month|quarter|week|isoWeek|day|date|hour|minute|second)['\"]\\))|((year|month|date|hours|minutes|seconds|milliseconds)\\(\\d+\\))))*;?$/);\n    // brackets level in case you get lost:          * *1  234            4 *          4                                                                                      4     *3 34             4 *    4                                                           4     *3 34                                                  4 *    *321\n    // * = this bracket is an escaped bracket and therefore not counted\n\n    // test expression against regex above\n    return safeMomentExpression.test(expression);\n  }\n\n  public isSafeTimespanPreset(preset: TimespanPreset): boolean {\n    // test both inputs against the regex\n    const isSafe = this.isSafeMomentExpression(preset.timespan.from) && this.isSafeMomentExpression(preset.timespan.to);\n\n    if (isSafe) {\n      return true;\n    } else {\n      console.log('Timespan preset \"' + preset.name + '\" has invalid moment() expression!');\n      return false;\n    }\n  }\n\n  public parseMomentExpression(expression: string): Date {\n    // just to be sure not to eval() something nasty\n    if (this.isSafeMomentExpression(expression)) {\n      // if satisfied, eval the inputs -> the ._d property contains the corresponding Date objects from which the Timespan can be constructed\n      // tslint:disable-next-line:no-eval\n      return eval(expression)._d;\n    } else {\n      return null;\n    }\n  }\n\n  public timespanChanged(preset: TimespanPreset) {\n    // construct new Timespan\n    this.timespan = new Timespan(parseInt(preset.timespan.from, 10), parseInt(preset.timespan.to, 10));\n    // publicise new timespan\n    this.onTimespanChange.emit(this.timespan);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'n52-time-list-selector',\n  template: `<div class=\"selector-entry\" *ngFor=\"let time of timeList\" (click)=\"selectTime(time)\">\n  <span>{{time | date: 'medium'}}</span>\n</div>\n`\n})\nexport class TimeListSelectorComponent {\n\n  @Input()\n  public timeList: number[];\n\n  @Output()\n  public onTimeSelected: EventEmitter<number> = new EventEmitter();\n\n  public selectTime(timestamp: number) {\n    this.onTimeSelected.emit(timestamp);\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DefinedTimespan, DefinedTimespanService, Timespan } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-timespan-button',\n  template: `<button type=\"button\" class=\"btn\" (click)=\"clicked()\">\n  {{label}}\n</button>\n`\n})\nexport class TimespanButtonComponent {\n\n  @Input()\n  public predefined: string | DefinedTimespan;\n\n  @Input()\n  public label: string;\n\n  @Input()\n  public timespanFunc: () => Timespan;\n\n  @Output()\n  public onTimespanSelected: EventEmitter<Timespan> = new EventEmitter();\n\n  constructor(\n    protected predefinedSrvc: DefinedTimespanService\n  ) { }\n\n  public clicked() {\n    if (this.predefined) {\n      this.onTimespanSelected.emit(this.predefinedSrvc.getInterval(this.predefined as DefinedTimespan));\n      return;\n    }\n    if (this.timespanFunc) {\n      this.onTimespanSelected.emit(this.timespanFunc());\n      return;\n    }\n    this.onTimespanSelected.emit();\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Time, Timespan } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-timespan-shift-selector',\n  template: `<div>\n  <button type=\"button\" (click)=\"back()\"> &lt; </button>\n  <button type=\"button\" (click)=\"open()\">\n    {{timespan.from | date : 'medium'}} &nbsp;&ndash;&nbsp; {{timespan.to | date : 'medium'}}\n  </button>\n  <button type=\"button\" (click)=\"forward()\"> &gt; </button>\n</div>\n`\n})\nexport class TimespanShiftSelectorComponent {\n\n  @Input()\n  public timespan: Timespan;\n\n  @Output()\n  public onTimespanChange: EventEmitter<Timespan> = new EventEmitter<Timespan>();\n\n  @Output()\n  public onOpenTimeSettings: EventEmitter<void> = new EventEmitter();\n\n  constructor(\n    protected timeSrvc: Time\n  ) { }\n\n  public back() {\n    this.onTimespanChange.emit(this.timeSrvc.stepBack(this.timespan));\n  }\n\n  public forward() {\n    this.onTimespanChange.emit(this.timeSrvc.stepForward(this.timespan));\n  }\n\n  public open() {\n    this.onOpenTimeSettings.emit();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HelgolandCoreModule } from '@helgoland/core';\n\nimport { PredefinedTimespanSelectorComponent } from './predefined-timespan-selector/predefined-timespan-selector.component';\nimport { TimeListSelectorComponent } from './time-list-selector/time-list-selector.component';\nimport { TimespanButtonComponent } from './timespan-button/timespan-button.component';\nimport { TimespanShiftSelectorComponent } from './timespan-shift-selector/timespan-shift-selector.component';\n\nconst COMPONENTS = [\n  PredefinedTimespanSelectorComponent,\n  TimeListSelectorComponent,\n  TimespanShiftSelectorComponent,\n  TimespanButtonComponent\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HelgolandCoreModule\n  ],\n  exports: [\n    COMPONENTS\n  ]\n})\nexport class HelgolandTimeModule { }\n"],"names":["EventEmitter","Timespan","Component","SettingsService","Input","Output","DefinedTimespanService","Time","NgModule","CommonModule","FormsModule","HelgolandCoreModule"],"mappings":"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"}
