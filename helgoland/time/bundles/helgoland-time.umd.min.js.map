{"version":3,"sources":["ng://@helgoland/time/lib/predefined-timespan-selector/predefined-timespan-selector.component.ts","ng://@helgoland/time/lib/time-list-selector/time-list-selector.component.ts","ng://@helgoland/time/lib/timespan-button/timespan-button.component.ts","ng://@helgoland/time/lib/timespan-shift-selector/timespan-shift-selector.component.ts","ng://@helgoland/time/lib/time.module.ts"],"names":["PredefinedTimespanSelectorComponent","settingSrvc","this","EventEmitter","prototype","ngOnInit","timespanPresets","getSettings","parsedTimespanPresets","filter","e","_this","isSafeTimespanPreset","map","name","label","timespan","from","parseMomentExpression","getTime","to","seperatorAfterThisItem","isSafeMomentExpression","expression","RegExp","test","preset","console","log","eval","_d","timespanChanged","Timespan","parseInt","onTimespanChange","emit","Component","args","selector","template","styles","SettingsService","Input","Output","TimeListSelectorComponent","selectTime","timestamp","onTimeSelected","TimespanButtonComponent","predefinedSrvc","clicked","predefined","onTimespanSelected","getInterval","timespanFunc","DefinedTimespanService","TimespanShiftSelectorComponent","timeSrvc","back","stepBack","forward","stepForward","open","onOpenTimeSettings","Time","COMPONENTS","NgModule","declarations","imports","CommonModule","FormsModule","HelgolandCoreModule","exports"],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ParsedTimespanPreset, Settings, SettingsService, Timespan, TimespanPreset } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-predefined-timespan-selector',\n  template: `<span *ngFor=\"let item of parsedTimespanPresets\">\n  <button (click)=\"timespanChanged(item)\" [ngClass]=\"{'seperator-after-this-item': item.seperatorAfterThisItem}\" class=\"btn btn-sm btn-default\">\n    {{item.label}}\n  </button>\n  <br>\n</span>\n`,\n  styles: [`:host :not(.seperator-after-this-item)+br{display:none}:host button{margin:3px}`]\n})\n\nexport class PredefinedTimespanSelectorComponent implements OnInit {\n\n  @Input()\n  public timespan: Timespan;\n\n  @Output()\n  public onTimespanChange: EventEmitter<Timespan> = new EventEmitter<Timespan>();\n\n  public parsedTimespanPresets: ParsedTimespanPreset[];\n\n  constructor(\n    protected settingSrvc: SettingsService<Settings>\n  ) { }\n\n  public ngOnInit() {\n    const timespanPresets = this.settingSrvc.getSettings().timespanPresets;\n    if (timespanPresets) {\n      this.parsedTimespanPresets = timespanPresets\n        .filter((e) => this.isSafeTimespanPreset(e))\n        .map((e) => ({\n          name: e.name,\n          label: e.label,\n          timespan: {\n            from: this.parseMomentExpression(e.timespan.from).getTime(),\n            to: this.parseMomentExpression(e.timespan.to).getTime()\n          },\n          seperatorAfterThisItem: e.seperatorAfterThisItem\n        }));\n    }\n  }\n\n  public isSafeMomentExpression(expression: string): boolean {\n    // tslint:disable:max-line-length\n    // regex checks whether code to be eval'ed adhers to syntax given in https://momentjs.com/docs/#/manipulating/\n    // explanation:               Start with \"moment()\"   Possible functions: add(number, string) and subtract(number, string)                            Further possible functions: startOf(string) and endOf(string)                           Further possible functions: year(number), ..., milliseconds(number).                         functions can be chained infinitely, or not at all\n    // further explanation:       This is a MUST.         The strings have to be out of the options described in the docs (shortcuts permitted)           Again, the strings have to be out of a strict set.                                      These set the corresponding part of the Moment object to the number given.                   |  (i.e. \"moment()\" is the minimal case matched)\n    // even further explanation:                          The number doesn't HAVE to be reasonable (e.g. month=20 is ok), but that's no security issue.   The quotes can incorrectly start with ' and then end with \" (or vice versa), but that's no security problem either.                                                                  v v optional semicolon at the end\n    const safeMomentExpression = new RegExp(/^moment\\(\\)(\\.(((add|subtract)\\(\\d+, ?['\"](years|y|quarters|Q|months|M|weeks|w|days|d|hours|h|minutes|m|seconds|s|milliseconds|ms)['\"]\\))|((startOf|endOf)\\(['\"](year|month|quarter|week|isoWeek|day|date|hour|minute|second)['\"]\\))|((year|month|date|hours|minutes|seconds|milliseconds)\\(\\d+\\))))*;?$/);\n    // brackets level in case you get lost:          * *1  234            4 *          4                                                                                      4     *3 34             4 *    4                                                           4     *3 34                                                  4 *    *321\n    // * = this bracket is an escaped bracket and therefore not counted\n\n    // test expression against regex above\n    return safeMomentExpression.test(expression);\n  }\n\n  public isSafeTimespanPreset(preset: TimespanPreset): boolean {\n    // test both inputs against the regex\n    const isSafe = this.isSafeMomentExpression(preset.timespan.from) && this.isSafeMomentExpression(preset.timespan.to);\n\n    if (isSafe) {\n      return true;\n    } else {\n      console.log('Timespan preset \"' + preset.name + '\" has invalid moment() expression!');\n      return false;\n    }\n  }\n\n  public parseMomentExpression(expression: string): Date {\n    // just to be sure not to eval() something nasty\n    if (this.isSafeMomentExpression(expression)) {\n      // if satisfied, eval the inputs -> the ._d property contains the corresponding Date objects from which the Timespan can be constructed\n      // tslint:disable-next-line:no-eval\n      return eval(expression)._d;\n    } else {\n      return null;\n    }\n  }\n\n  public timespanChanged(preset: TimespanPreset) {\n    // construct new Timespan\n    this.timespan = new Timespan(parseInt(preset.timespan.from, 10), parseInt(preset.timespan.to, 10));\n    // publicise new timespan\n    this.onTimespanChange.emit(this.timespan);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'n52-time-list-selector',\n  template: `<div class=\"selector-entry\" *ngFor=\"let time of timeList\" (click)=\"selectTime(time)\">\n  <span>{{time | date: 'medium'}}</span>\n</div>\n`\n})\nexport class TimeListSelectorComponent {\n\n  @Input()\n  public timeList: number[];\n\n  @Output()\n  public onTimeSelected: EventEmitter<number> = new EventEmitter();\n\n  public selectTime(timestamp: number) {\n    this.onTimeSelected.emit(timestamp);\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DefinedTimespan, DefinedTimespanService, Timespan } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-timespan-button',\n  template: `<button type=\"button\" class=\"btn\" (click)=\"clicked()\">\n  {{label}}\n</button>\n`\n})\nexport class TimespanButtonComponent {\n\n  @Input()\n  public predefined: string | DefinedTimespan;\n\n  @Input()\n  public label: string;\n\n  @Input()\n  public timespanFunc: () => Timespan;\n\n  @Output()\n  public onTimespanSelected: EventEmitter<Timespan> = new EventEmitter();\n\n  constructor(\n    protected predefinedSrvc: DefinedTimespanService\n  ) { }\n\n  public clicked() {\n    if (this.predefined) {\n      this.onTimespanSelected.emit(this.predefinedSrvc.getInterval(this.predefined as DefinedTimespan));\n      return;\n    }\n    if (this.timespanFunc) {\n      this.onTimespanSelected.emit(this.timespanFunc());\n      return;\n    }\n    this.onTimespanSelected.emit();\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Time, Timespan } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-timespan-shift-selector',\n  template: `<div>\n  <button type=\"button\" (click)=\"back()\"> &lt; </button>\n  <button type=\"button\" (click)=\"open()\">\n    {{timespan.from | date : 'medium'}} &nbsp;&ndash;&nbsp; {{timespan.to | date : 'medium'}}\n  </button>\n  <button type=\"button\" (click)=\"forward()\"> &gt; </button>\n</div>\n`\n})\nexport class TimespanShiftSelectorComponent {\n\n  @Input()\n  public timespan: Timespan;\n\n  @Output()\n  public onTimespanChange: EventEmitter<Timespan> = new EventEmitter<Timespan>();\n\n  @Output()\n  public onOpenTimeSettings: EventEmitter<void> = new EventEmitter();\n\n  constructor(\n    protected timeSrvc: Time\n  ) { }\n\n  public back() {\n    this.onTimespanChange.emit(this.timeSrvc.stepBack(this.timespan));\n  }\n\n  public forward() {\n    this.onTimespanChange.emit(this.timeSrvc.stepForward(this.timespan));\n  }\n\n  public open() {\n    this.onOpenTimeSettings.emit();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HelgolandCoreModule } from '@helgoland/core';\n\nimport { PredefinedTimespanSelectorComponent } from './predefined-timespan-selector/predefined-timespan-selector.component';\nimport { TimeListSelectorComponent } from './time-list-selector/time-list-selector.component';\nimport { TimespanButtonComponent } from './timespan-button/timespan-button.component';\nimport { TimespanShiftSelectorComponent } from './timespan-shift-selector/timespan-shift-selector.component';\n\nconst COMPONENTS = [\n  PredefinedTimespanSelectorComponent,\n  TimeListSelectorComponent,\n  TimespanShiftSelectorComponent,\n  TimespanButtonComponent\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HelgolandCoreModule\n  ],\n  exports: [\n    COMPONENTS\n  ]\n})\nexport class HelgolandTimeModule { }\n"]}