{"version":3,"file":"helgoland-time.js.map","sources":["ng://@helgoland/time/lib/predefined-timespan-selector/predefined-timespan-selector.component.ts","ng://@helgoland/time/lib/time-list-selector/time-list-selector.component.ts","ng://@helgoland/time/lib/timespan-button/timespan-button.component.ts","ng://@helgoland/time/lib/timespan-shift-selector/timespan-shift-selector.component.ts","ng://@helgoland/time/lib/time.module.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ParsedTimespanPreset, Settings, SettingsService, Timespan, TimespanPreset } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-predefined-timespan-selector',\n  template: `<span *ngFor=\"let item of parsedTimespanPresets\">\n  <button (click)=\"timespanChanged(item)\" [ngClass]=\"{'seperator-after-this-item': item.seperatorAfterThisItem}\" class=\"btn btn-sm btn-default\">\n    {{item.label}}\n  </button>\n  <br>\n</span>\n`,\n  styles: [`:host :not(.seperator-after-this-item)+br{display:none}:host button{margin:3px}`]\n})\n\nexport class PredefinedTimespanSelectorComponent implements OnInit {\n\n  @Input()\n  public timespan: Timespan;\n\n  @Output()\n  public onTimespanChange: EventEmitter<Timespan> = new EventEmitter<Timespan>();\n\n  public parsedTimespanPresets: ParsedTimespanPreset[];\n\n  constructor(\n    protected settingSrvc: SettingsService<Settings>\n  ) { }\n\n  public ngOnInit() {\n    const timespanPresets = this.settingSrvc.getSettings().timespanPresets;\n    if (timespanPresets) {\n      this.parsedTimespanPresets = timespanPresets\n        .filter((e) => this.isSafeTimespanPreset(e))\n        .map((e) => ({\n          name: e.name,\n          label: e.label,\n          timespan: {\n            from: this.parseMomentExpression(e.timespan.from).getTime(),\n            to: this.parseMomentExpression(e.timespan.to).getTime()\n          },\n          seperatorAfterThisItem: e.seperatorAfterThisItem\n        }));\n    }\n  }\n\n  public isSafeMomentExpression(expression: string): boolean {\n    // tslint:disable:max-line-length\n    // regex checks whether code to be eval'ed adhers to syntax given in https://momentjs.com/docs/#/manipulating/\n    // explanation:               Start with \"moment()\"   Possible functions: add(number, string) and subtract(number, string)                            Further possible functions: startOf(string) and endOf(string)                           Further possible functions: year(number), ..., milliseconds(number).                         functions can be chained infinitely, or not at all\n    // further explanation:       This is a MUST.         The strings have to be out of the options described in the docs (shortcuts permitted)           Again, the strings have to be out of a strict set.                                      These set the corresponding part of the Moment object to the number given.                   |  (i.e. \"moment()\" is the minimal case matched)\n    // even further explanation:                          The number doesn't HAVE to be reasonable (e.g. month=20 is ok), but that's no security issue.   The quotes can incorrectly start with ' and then end with \" (or vice versa), but that's no security problem either.                                                                  v v optional semicolon at the end\n    const safeMomentExpression = new RegExp(/^moment\\(\\)(\\.(((add|subtract)\\(\\d+, ?['\"](years|y|quarters|Q|months|M|weeks|w|days|d|hours|h|minutes|m|seconds|s|milliseconds|ms)['\"]\\))|((startOf|endOf)\\(['\"](year|month|quarter|week|isoWeek|day|date|hour|minute|second)['\"]\\))|((year|month|date|hours|minutes|seconds|milliseconds)\\(\\d+\\))))*;?$/);\n    // brackets level in case you get lost:          * *1  234            4 *          4                                                                                      4     *3 34             4 *    4                                                           4     *3 34                                                  4 *    *321\n    // * = this bracket is an escaped bracket and therefore not counted\n\n    // test expression against regex above\n    return safeMomentExpression.test(expression);\n  }\n\n  public isSafeTimespanPreset(preset: TimespanPreset): boolean {\n    // test both inputs against the regex\n    const isSafe = this.isSafeMomentExpression(preset.timespan.from) && this.isSafeMomentExpression(preset.timespan.to);\n\n    if (isSafe) {\n      return true;\n    } else {\n      console.log('Timespan preset \"' + preset.name + '\" has invalid moment() expression!');\n      return false;\n    }\n  }\n\n  public parseMomentExpression(expression: string): Date {\n    // just to be sure not to eval() something nasty\n    if (this.isSafeMomentExpression(expression)) {\n      // if satisfied, eval the inputs -> the ._d property contains the corresponding Date objects from which the Timespan can be constructed\n      // tslint:disable-next-line:no-eval\n      return eval(expression)._d;\n    } else {\n      return null;\n    }\n  }\n\n  public timespanChanged(preset: TimespanPreset) {\n    // construct new Timespan\n    this.timespan = new Timespan(parseInt(preset.timespan.from, 10), parseInt(preset.timespan.to, 10));\n    // publicise new timespan\n    this.onTimespanChange.emit(this.timespan);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'n52-time-list-selector',\n  template: `<div class=\"selector-entry\" *ngFor=\"let time of timeList\" (click)=\"selectTime(time)\">\n  <span>{{time | date: 'medium'}}</span>\n</div>\n`\n})\nexport class TimeListSelectorComponent {\n\n  @Input()\n  public timeList: number[];\n\n  @Output()\n  public onTimeSelected: EventEmitter<number> = new EventEmitter();\n\n  public selectTime(timestamp: number) {\n    this.onTimeSelected.emit(timestamp);\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DefinedTimespan, DefinedTimespanService, Timespan } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-timespan-button',\n  template: `<button type=\"button\" class=\"btn\" (click)=\"clicked()\">\n  {{label}}\n</button>\n`\n})\nexport class TimespanButtonComponent {\n\n  @Input()\n  public predefined: string | DefinedTimespan;\n\n  @Input()\n  public label: string;\n\n  @Input()\n  public timespanFunc: () => Timespan;\n\n  @Output()\n  public onTimespanSelected: EventEmitter<Timespan> = new EventEmitter();\n\n  constructor(\n    protected predefinedSrvc: DefinedTimespanService\n  ) { }\n\n  public clicked() {\n    if (this.predefined) {\n      this.onTimespanSelected.emit(this.predefinedSrvc.getInterval(this.predefined as DefinedTimespan));\n      return;\n    }\n    if (this.timespanFunc) {\n      this.onTimespanSelected.emit(this.timespanFunc());\n      return;\n    }\n    this.onTimespanSelected.emit();\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Time, Timespan } from '@helgoland/core';\n\n@Component({\n  selector: 'n52-timespan-shift-selector',\n  template: `<div>\n  <button type=\"button\" (click)=\"back()\"> &lt; </button>\n  <button type=\"button\" (click)=\"open()\">\n    {{timespan.from | date : 'medium'}} &nbsp;&ndash;&nbsp; {{timespan.to | date : 'medium'}}\n  </button>\n  <button type=\"button\" (click)=\"forward()\"> &gt; </button>\n</div>\n`\n})\nexport class TimespanShiftSelectorComponent {\n\n  @Input()\n  public timespan: Timespan;\n\n  @Output()\n  public onTimespanChange: EventEmitter<Timespan> = new EventEmitter<Timespan>();\n\n  @Output()\n  public onOpenTimeSettings: EventEmitter<void> = new EventEmitter();\n\n  constructor(\n    protected timeSrvc: Time\n  ) { }\n\n  public back() {\n    this.onTimespanChange.emit(this.timeSrvc.stepBack(this.timespan));\n  }\n\n  public forward() {\n    this.onTimespanChange.emit(this.timeSrvc.stepForward(this.timespan));\n  }\n\n  public open() {\n    this.onOpenTimeSettings.emit();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HelgolandCoreModule } from '@helgoland/core';\n\nimport { PredefinedTimespanSelectorComponent } from './predefined-timespan-selector/predefined-timespan-selector.component';\nimport { TimeListSelectorComponent } from './time-list-selector/time-list-selector.component';\nimport { TimespanButtonComponent } from './timespan-button/timespan-button.component';\nimport { TimespanShiftSelectorComponent } from './timespan-shift-selector/timespan-shift-selector.component';\n\nconst COMPONENTS = [\n  PredefinedTimespanSelectorComponent,\n  TimeListSelectorComponent,\n  TimespanShiftSelectorComponent,\n  TimespanButtonComponent\n];\n\n@NgModule({\n  declarations: [\n    COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HelgolandCoreModule\n  ],\n  exports: [\n    COMPONENTS\n  ]\n})\nexport class HelgolandTimeModule { }\n"],"names":[],"mappings":"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"}
