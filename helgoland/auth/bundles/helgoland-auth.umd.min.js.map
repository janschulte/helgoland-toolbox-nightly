{"version":3,"sources":["ng://@helgoland/auth/lib/basic-auth/basic-auth.service.ts","ng://@helgoland/auth/lib/basic-auth/basic-auth-service-maintainer.service.ts","ng://@helgoland/auth/lib/basic-auth/basic-auth-interceptor.service.ts","ng://@helgoland/auth/lib/basic-auth/basic-auth.module.ts"],"names":["BasicAuthService","http","this","Map","prototype","auth","username","password","url","token","btoa","headers","HttpHeaders","Authorization","get","pipe","map","res","_this","basicAuthTokens","set","clearToken","has","delete","hasToken","getToken","Injectable","HttpClient","BasicAuthServiceMaintainer","settingsService","registerService","services","indexOf","push","getCorrespondingService","matchedUrl","find","e","startsWith","settings","getSettings","datasetApis","Array","isArray","api","basicAuth","SettingsService","BasicAuthInterceptorService","basicAuthServices","basicAuthSrvc","receptor","intercept","req","options","next","clone","setHeaders","handle","Observable","observer","doBasicAuth","subscribe","successfully","HttpResponse","complete","BasicAuthInformer","HelgolandBasicAuthModule","NgModule","args","providers","provide","HTTP_SERVICE_INTERCEPTORS","useClass","multi"],"mappings":"mhBAaE,SAAAA,EACUC,GAAAC,KAAAD,KAAAA,uBAHqC,IAAIE,WAS5CH,EAAAI,UAAAC,cAAKC,EAAkBC,EAAkBC,cACxCC,EAAQ,SAAWC,KAAKJ,EAAW,IAAMC,GACzCI,EAAU,IAAIC,EAAAA,YAAY,CAAEC,cAAiBJ,IACnD,OAAOP,KAAKD,KAAKa,IAAIN,EAAK,CAAEG,QAAOA,IAChCI,KACCC,EAAAA,IAAI,SAAAC,GAEF,OADAC,EAAKC,gBAAgBC,IAAIZ,EAAKC,GACvBA,MAQRT,EAAAI,UAAAiB,oBAAWb,GACZN,KAAKiB,gBAAgBG,IAAId,IAC3BN,KAAKiB,gBAAgBI,UAAOf,IAOzBR,EAAAI,UAAAoB,kBAAShB,GACd,OAAON,KAAKiB,gBAAgBG,IAAId,IAM3BR,EAAAI,UAAAqB,kBAASjB,GACd,OAAON,KAAKiB,gBAAgBG,IAAId,GAAON,KAAKiB,gBAAgBL,IAAIN,GAAO,0BA5C1EkB,EAAAA,sDARQC,EAAAA,gCCYP,SAAAC,EACYC,GAAA3B,KAAA2B,gBAAAA,gBAHiB,UAStBD,EAAAxB,UAAA0B,yBAAgBtB,IACe,IAAhCN,KAAK6B,SAASC,QAAQxB,IACxBN,KAAK6B,SAASE,KAAKzB,IAOhBoB,EAAAxB,UAAA8B,iCAAwB1B,GAC7B,IAAM2B,EAAajC,KAAK6B,SAASK,KAAK,SAAAC,GAAK,OAAA7B,EAAI8B,WAAWD,KAC1D,GAAIF,EACF,OAAOA,EAET,IAAMI,EAAWrC,KAAK2B,gBAAgBW,cACtC,GAAID,GAAYA,EAASE,aAAeC,MAAMC,QAAQJ,EAASE,aAAc,CAC3E,IAAMG,EAAML,EAASE,YAAYL,KAAK,SAACC,GAAM,OAAA7B,EAAI8B,WAAWD,EAAE7B,MAAQ6B,EAAEQ,YACxE,GAAID,EACF,OAAOA,EAAIpC,0BA9BlBkB,EAAAA,sDANkBoB,EAAAA,qCCajB,SAAAC,EACYR,EACAS,EACAC,EACAC,GAHAhD,KAAAqC,SAAAA,EACArC,KAAA8C,kBAAAA,EACA9C,KAAA+C,cAAAA,EACA/C,KAAAgD,SAAAA,SAGZH,EAAA3C,UAAA+C,UAAA,SAAUC,EAAuBC,EAAsCC,GAAvE,IAAApC,EAAAhB,KACQM,EAAMN,KAAK8C,kBAAkBd,wBAAwBkB,EAAI5C,KAC/D,OAAIA,EACEN,KAAK+C,cAAczB,SAAShB,IAC9B4C,EAAMA,EAAIG,MAAM,CACdC,WAAY,CACV3C,cAAeX,KAAK+C,cAAcxB,SAASjB,MAGxC8C,EAAKG,OAAOL,EAAKC,IAEjB,IAAIK,EAAAA,WAA2B,SAACC,GACrCzC,EAAKgC,SAASU,YAAYpD,GAAKqD,UAAU,SAAAC,GACnCA,IACFV,EAAMA,EAAIG,MAAM,CACdC,WAAY,CACV3C,cAAeK,EAAK+B,cAAcxB,SAASjB,OAIjD8C,EAAKG,OAAOL,EAAKC,GAASQ,UAAU,SAAA5C,GAClC0C,EAASL,KAAKrC,GACVA,aAAe8C,EAAAA,cACjBJ,EAASK,iBAOZV,EAAKG,OAAOL,EAAKC,wBAxC7B3B,EAAAA,sDATkFoB,EAAAA,uBAG1ElB,SACA5B,SAYeiE,UA8CxBA,eChEAC,EAAA,oDAOCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,UAAW,CACTrE,EACA4B,EACA,CACE0C,QAASC,EAAAA,0BACTC,SAAUzB,EACV0B,OAAO,UAdb","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Maintains all basic auth tokens and also do the authentication process.\n */\n@Injectable()\nexport class BasicAuthService {\n\n  private basicAuthTokens: Map<string, string> = new Map();\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  /**\n   * Do the authentication.\n   */\n  public auth(username: string, password: string, url: string): Observable<string> {\n    const token = 'Basic ' + btoa(username + ':' + password);\n    const headers = new HttpHeaders({ 'Authorization': token });\n    return this.http.get(url, { headers })\n      .pipe(\n        map(res => {\n          this.basicAuthTokens.set(url, token);\n          return token;\n        })\n      );\n  }\n\n  /**\n   * Removes existing token.\n   */\n  public clearToken(url: string): void {\n    if (this.basicAuthTokens.has(url)) {\n      this.basicAuthTokens.delete(url);\n    }\n  }\n\n  /**\n   * Checks if a token exists.\n   */\n  public hasToken(url: string): boolean {\n    return this.basicAuthTokens.has(url);\n  }\n\n  /**\n   * Gets the token for the given service url.\n   */\n  public getToken(url: string): string {\n    return this.basicAuthTokens.has(url) ? this.basicAuthTokens.get(url) : null;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Settings, SettingsService } from '@helgoland/core';\n\n/**\n * This service maintaines all service urls which are secured with basic auth. The service is used to check for every servie url if it is necessary to work with basic auth. It is possible to\n * register a url and it also checks every dataset url in the settings.\n */\n@Injectable()\nexport class BasicAuthServiceMaintainer {\n\n  private services: string[] = [];\n\n  constructor(\n    protected settingsService: SettingsService<Settings>\n  ) { }\n\n  /**\n   * Register an additional service url, which is secured with basic auth.\n   */\n  public registerService(url: string) {\n    if (this.services.indexOf(url) === -1) {\n      this.services.push(url);\n    }\n  }\n\n  /**\n   * Checks if a given url is registered as secured with basic auth.\n   */\n  public getCorrespondingService(url: string): string {\n    const matchedUrl = this.services.find(e => url.startsWith(e));\n    if (matchedUrl) {\n      return matchedUrl;\n    }\n    const settings = this.settingsService.getSettings();\n    if (settings && settings.datasetApis && Array.isArray(settings.datasetApis)) {\n      const api = settings.datasetApis.find((e) => url.startsWith(e.url) && e.basicAuth);\n      if (api) {\n        return api.url;\n      }\n    }\n  }\n\n}\n","import { HttpEvent, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpRequestOptions, HttpServiceHandler, HttpServiceInterceptor, Settings, SettingsService } from '@helgoland/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { BasicAuthServiceMaintainer } from './basic-auth-service-maintainer.service';\nimport { BasicAuthService } from './basic-auth.service';\n\n/**\n * Interceptor to a basic auth token if needed.\n */\n@Injectable()\nexport class BasicAuthInterceptorService implements HttpServiceInterceptor {\n\n  constructor(\n    protected settings: SettingsService<Settings>,\n    protected basicAuthServices: BasicAuthServiceMaintainer,\n    protected basicAuthSrvc: BasicAuthService,\n    protected receptor: BasicAuthInformer\n  ) { }\n\n  intercept(req: HttpRequest<any>, options: Partial<HttpRequestOptions>, next: HttpServiceHandler): Observable<HttpEvent<any>> {\n    const url = this.basicAuthServices.getCorrespondingService(req.url);\n    if (url) {\n      if (this.basicAuthSrvc.hasToken(url)) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: this.basicAuthSrvc.getToken(url)\n          }\n        });\n        return next.handle(req, options);\n      } else {\n        return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n          this.receptor.doBasicAuth(url).subscribe(successfully => {\n            if (successfully) {\n              req = req.clone({\n                setHeaders: {\n                  Authorization: this.basicAuthSrvc.getToken(url)\n                }\n              });\n            }\n            next.handle(req, options).subscribe(res => {\n              observer.next(res);\n              if (res instanceof HttpResponse) {\n                observer.complete();\n              }\n            });\n          });\n        });\n      }\n    } else {\n      return next.handle(req, options);\n    }\n  }\n}\n\nexport interface BasicAuthCredentials {\n  username: string;\n  password: string;\n}\n\n/**\n * Needs to be implemented to do the authentication for the given url.\n */\nexport abstract class BasicAuthInformer {\n  public abstract doBasicAuth(url: string): Observable<boolean>;\n}\n","import { NgModule } from '@angular/core';\nimport { HTTP_SERVICE_INTERCEPTORS } from '@helgoland/core';\n\nimport { BasicAuthServiceMaintainer } from './basic-auth-service-maintainer.service';\nimport { BasicAuthService } from './basic-auth.service';\nimport { BasicAuthInterceptorService } from './basic-auth-interceptor.service';\n\n@NgModule({\n  providers: [\n    BasicAuthService,\n    BasicAuthServiceMaintainer,\n    {\n      provide: HTTP_SERVICE_INTERCEPTORS,\n      useClass: BasicAuthInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class HelgolandBasicAuthModule { }\n"]}